{
    "works_cycles": {
        "countryregion": {
            "countryregioncode": "The unique id number identifying Country Region ISO standard code for countries and regions.",
            "name": "Country or region name.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "culture": {
            "cultureid": "The unique id string identifying the language in which AdventrueWorks data is stored.",
            "name": "Name of the language.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "currency": {
            "currencycode": "The unique id string identifying the currency.",
            "name": "Currency name.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "countryregioncurrency": {
            "countryregioncode": "The id number identifying Country Region ISO standard code for countries and regions.",
            "currencycode": "ISO standard currency code.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "person": {
            "businessentityid": "The unique id number identifying the person.",
            "persontype": "The type of person. (Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact)",
            "namestyle": "Name Style. (0 = The data in FirstName and LastName are stored in western style (first name, last name) order. 1 = Eastern style (last name, first name) order. Default: 0)",
            "title": "A courtesy title.",
            "firstname": "First name of the person. (Default: getdate())",
            "middlename": "Middle name or middle initial of the person.",
            "lastname": "Last name of the person.",
            "suffix": "Surname suffix.",
            "emailpromotion": "Email Promotion. (0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. Default: 0)",
            "additionalcontactinfo": "Additional contact information about the person stored in xml format.",
            "demographics": "Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "businessentitycontact": {
            "businessentityid": "The id number identifying the Business Entity ID.",
            "personid": "The id number identifying the Person ID.",
            "contacttypeid": "The id number identifying the contact type ID.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "emailaddress": {
            "businessentityid": "The id number identifying the person associated with this email address.",
            "emailaddressid": "The ID of this email address.",
            "emailaddress": "The E-mail address for the person.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "employee": {
            "businessentityid": "The id number identifying the employee.",
            "nationalidnumber": "The national identification number such as a social security number.",
            "loginid": "Network login.",
            "organizationnode": "Where the employee is located in corporate hierarchy. (Default: newid())",
            "organizationlevel": "The depth of the employee in the corporate hierarchy. (Computed: [OrganizationNode].[GetLevel]())",
            "jobtitle": "Work title such as Buyer or Sales Representative.",
            "birthdate": "Date of birth.",
            "maritalstatus": "Whether this employee is married or not. (M = Married, S = Single)",
            "gender": "The gender of this employee. (M = Male, F = Female)",
            "hiredate": "The employee was hired on this date.",
            "salariedflag": "Job classification. (0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.)",
            "vacationhours": "The number of available vacation hours.",
            "sickleavehours": "The number of available sick leave hours.",
            "currentflag": "Whether this employee is active or not (0 = Inactive, 1 = Active)",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "password": {
            "businessentityid": "The unique id number identifying the person.",
            "passwordhash": "Password for the e-mail account.",
            "passwordsalt": "Random value concatenated with the password string before the password is hashed.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "personcreditcard": {
            "businessentityid": "The id number identifying the person.",
            "creditcardid": "Credit card identification number.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productcategory": {
            "productcategoryid": "The unique id number identifying the product category.",
            "name": "Category description",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productdescription": {
            "productdescriptionid": "The unique id number identifying the product description.",
            "description": "Description of the product.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productmodel": {
            "productmodelid": "The unique id number identifying the product model.",
            "name": "Product model description.",
            "catalogdescription": "Detailed product catalog information in xml format.",
            "instructions": "Manufacturing instructions in xml format.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productmodelproductdescriptionculture": {
            "productmodelid": "The id number identifying the product model.",
            "productdescriptionid": "Product description identification number.",
            "cultureid": "Culture identification number.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productphoto": {
            "productphotoid": "unique id number identifying the products",
            "thumbnailphoto": "Small image of the product. (The size of small images.; commonsense evidence:; \"80x49 GIF image 3.07 kB\". \"3.07\" represents the size of images, \"GIF\" refers to type of images like JPEG, GIF, etc. )",
            "thumbnailphotofilename": "Small image file name",
            "largephoto": "Large image of the product.",
            "largephotofilename": "Large image file name. (commonsense evidence:; similar to ThumbNailPhoto)",
            "modifieddate": "Date and time the record was last updated."
        },
        "productsubcategory": {
            "productsubcategoryid": "Unique id number identifying the subcategory of products.",
            "productcategoryid": "Product category identification number.",
            "name": "Subcategory description.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesreason": {
            "salesreasonid": "The unique number identifying SalesReason records.",
            "name": "Sales reason description",
            "reasontype": "Category the sales reason belongs to.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesterritory": {
            "territoryid": "The unique id number for SalesTerritory records.",
            "name": "Sales territory description.",
            "countryregioncode": "ISO standard country or region code.",
            "group": "Geographic area to which the sales territory belong.",
            "salesytd": "Sales in the territory year to date.",
            "saleslastyear": "Sales in the territory the previous year.",
            "costytd": "Business costs in the territory year to date.",
            "costlastyear": "Business costs in the territory the previous year.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesperson": {
            "businessentityid": "The unique id number identifying the business entity.",
            "territoryid": "Territory currently assigned to.",
            "salesquota": "Projected yearly sales",
            "bonus": "Bonus due if quota is met. (commonsense evidence:; if bonus is equal to 0, it means this salesperson doesn't meet quota. vice versa.)",
            "commissionpct": " (Commission percent received per sale)",
            "salesytd": "Sales total year to date",
            "saleslastyear": "Sales total of previous year.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salespersonquotahistory": {
            "businessentityid": "Sales person identification number",
            "quotadate": "Sales quota date",
            "salesquota": "Sales quota amount",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesterritoryhistory": {
            "businessentityid": "The sales representative.",
            "territoryid": "Territory identification number.",
            "startdate": "Date the sales representive started work in the territory.",
            "enddate": "Date the sales representative left work in the territory.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "scrapreason": {
            "scrapreasonid": "The unique number identifying for ScrapReason records.",
            "name": "Failure description.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "shift": {
            "shiftid": "The unique number identifying the shift.",
            "name": "Shift description.",
            "starttime": "Shift start time.",
            "endtime": "Shift end time.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "shipmethod": {
            "shipmethodid": "The unique number for ShipMethod records.",
            "name": "Shipping company name.",
            "shipbase": "Minimum shipping charge.",
            "shiprate": "Shipping charge per pound.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "specialoffer": {
            "specialofferid": "The unique id number identifying the special offer.",
            "description": "Discount description.",
            "discountpct": "Discount percentage.",
            "type": "Discount type category.",
            "category": "Group the discount applies to such as Reseller or Customer.",
            "startdate": "Discount start date.",
            "enddate": "Discount end date. (commonsense evidence:; promotion date = EndDate - StartDate)",
            "minqty": "Minimum discount percent allowed.",
            "maxqty": "Maximum discount percent allowed.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "businessentityaddress": {
            "businessentityid": "Number identifying the business entity.",
            "addressid": "Number identifying the address.",
            "addresstypeid": "Number identifying the address type.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salestaxrate": {
            "salestaxrateid": "Unique id number identifying sales tax records.",
            "stateprovinceid": "id number identifying state province.",
            "taxtype": "Tax Type (1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions)",
            "taxrate": "Tax rate amount",
            "name": "Tax rate description (commonsense evidence:; if there's \"+\" in the value, it means this sales are charged by multiple types of tax.; )",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "store": {
            "businessentityid": "The unique number identifying business entity.",
            "name": "Name of the store.",
            "salespersonid": "ID of the sales person assigned to the customer.",
            "demographics": "Demographic information about the store such as the number of employees, annual sales and store type.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesorderheadersalesreason": {
            "salesorderid": "The id number of sales order.",
            "salesreasonid": "The id number for sales reasons.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "transactionhistoryarchive": {
            "transactionid": "The unique id number identifying TransactionHistory records.",
            "productid": "Product identification number.",
            "referenceorderid": "Purchase order, sales order, or work order identification number.",
            "referenceorderlineid": "Line number associated with the purchase order, sales order, or work order.",
            "transactiondate": "Date and time of the transaction.",
            "transactiontype": "Type of transaction records. (commonsense evidence: ; W = WorkOrder, S = SalesOrder, P = PurchaseOrder)",
            "quantity": "Product quantity.",
            "actualcost": "Product cost.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "unitmeasure": {
            "unitmeasurecode": "The unique identifying numbers for measure.",
            "name": "Unit of measure description.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productcosthistory": {
            "productid": "The id number identifying the product.",
            "startdate": "Product cost start date",
            "enddate": "Product cost end date",
            "standardcost": "Standard cost of the product.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productdocument": {
            "productid": "The id number identifying the product.",
            "documentnode": "The hierarchy id number identifying the Document node. (Document identification number)",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productinventory": {
            "productid": "Product identification number.",
            "locationid": "Inventory location identification number. (Document identification number)",
            "shelf": "Storage compartment within an inventory location.",
            "bin": "Storage container on a shelf in an inventory location.",
            "quantity": "Quantity of products in the inventory location. (Default: 0)",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productproductphoto": {
            "productid": "Product identification number.",
            "productphotoid": "Product photo identification number.",
            "primary": "Whether this photo is the principal image or not. (0 = Photo is not the principal image. ; 1 = Photo is the principal image. ; commonsense evidence:; staff can mention \"principal\" in the question in order to make the question more realistic.)",
            "modifieddate": ""
        },
        "productreview": {
            "productreviewid": "The unique id numbers identifying product reviews.",
            "productid": "Product identification number.",
            "reviewername": "The name of reviewer.",
            "reviewdate": "Date review was submitted.  (Default: getdate())",
            "emailaddress": "Reviewer's e-mail address.",
            "rating": "Product rating given by the reviewer.  (commonsense evidence:; Scale is 1 to 5 with 5 as the highest rating.)",
            "comments": "",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "shoppingcartitem": {
            "shoppingcartitemid": "The unique id number identifying the shopping cart item records.",
            "shoppingcartid": "Shopping cart identification number.",
            "quantity": "Product quantity ordered. (Default: 1)",
            "productid": "Product ordered.",
            "datecreated": "Date the time the record was created.  (Default: getdate())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "specialofferproduct": {
            "specialofferid": "The id for SpecialOfferProduct records",
            "productid": "Product identification number.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesorderdetail": {
            "salesorderid": "",
            "salesorderdetailid": "",
            "carriertrackingnumber": "",
            "orderqty": "",
            "productid": "",
            "specialofferid": "",
            "unitprice": "",
            "unitpricediscount": "",
            "linetotal": "",
            "rowguid": "",
            "modifieddate": "modified date (Date and time the record was last updated. )"
        },
        "transactionhistory": {
            "transactionid": "The unique id number identifying TransactionHistory records.",
            "productid": "Product identification number.",
            "referenceorderid": "Purchase order, sales order, or work order identification number.",
            "referenceorderlineid": "Line number associated with the purchase order, sales order, or work order.",
            "transactiondate": "Date and time of the transaction.",
            "transactiontype": "Type of transaction records. (commonsense evidence:; W = WorkOrder, S = SalesOrder, P = PurchaseOrder)",
            "quantity": "Product quantity.",
            "actualcost": "Product cost.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "vendor": {
            "businessentityid": "The unique number identifying Vendor records.",
            "accountnumber": "Vendor account (identification) number.",
            "name": "Company name.",
            "creditrating": "Rating of credit. (commonsense evidence: ; 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average. ; commonsense evidence:; 1, 2, 3 can represent good credit, 4 is average credit, 5 is bad credit.)",
            "preferredvendorstatus": "Preferred Vendor Status (commonsense evidence: ; 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.)",
            "activeflag": "Vendor URL (commonsense evidence:; 0 = Vendor no longer used. 1 = Vendor is actively used. Default: 1)",
            "purchasingwebserviceurl": "Purchasing Web Service URL",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productvendor": {
            "productid": "The id number identifying the products.",
            "businessentityid": "The id number identifying the business entities.",
            "averageleadtime": "The average span of time between placing an order with the vendor and receiving the purchased product. (in days)",
            "standardprice": "The vendor's usual selling price.",
            "lastreceiptcost": "The selling price when last purchased. (commonsense evidence:; profit on net can be computed by LastReceiptCost - StandardPrice)",
            "lastreceiptdate": "Date the product was last received by the vendor.",
            "minorderqty": "The maximum quantity that should be ordered.",
            "maxorderqty": "The minimum quantity that should be ordered.",
            "onorderqty": "The quantity currently on order. (if it's equal to 0, it means \"out of stock\")",
            "unitmeasurecode": "The product's unit of measure.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "purchaseorderheader": {
            "purchaseorderid": "The unique id number identifying purchase order.",
            "revisionnumber": "Incremental number to track changes to the purchase order over time. ",
            "status": "Order current status. (1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete Default: 1)",
            "employeeid": "Employee who created the purchase order.",
            "vendorid": "Vendor with whom the purchase order is placed.",
            "shipmethodid": "Shipping method",
            "orderdate": "Purchase order creation date (Default: getdate())",
            "shipdate": "Estimated shipment date from the vendor.",
            "subtotal": "Purchase order subtotal ( Computed as SUM (PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID)",
            "taxamt": "Tax amount",
            "freight": "Shipping cost",
            "totaldue": "Total due to vendor (Computed as Subtotal + TaxAmt + Freight. Computed: isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "purchaseorderdetail": {
            "purchaseorderid": "Purchase order number.",
            "purchaseorderdetailid": "Unique purchase detail order.",
            "duedate": "Date the product is expected to be received.",
            "orderqty": "Quantity ordered.",
            "productid": "The id number identifying products.",
            "unitprice": "Vendor's selling price of a single product.",
            "linetotal": "Per product subtotal (Computed as OrderQty * UnitPrice. Computed: isnull([OrderQty]*[UnitPrice],(0.00)))",
            "receivedqty": "Quantity actually received from the vendor.",
            "rejectedqty": "",
            "stockedqty": "",
            "modifieddate": ""
        },
        "workorder": {
            "workorderid": "The unique id number identifying work order.",
            "productid": "Product identification number.",
            "orderqty": "Product quantity to build.",
            "stockedqty": "Quantity built and put in inventory. ( Computed: isnull([OrderQty]-[ScrappedQty],(0)))",
            "scrappedqty": "Quantity that failed inspection.",
            "startdate": "Work order start date.",
            "enddate": "Work order end date.",
            "duedate": "Work order due date.",
            "scrapreasonid": "Reason for inspection failure.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "workorderrouting": {
            "workorderid": "The id number of work order.",
            "productid": "The id number identifying products.",
            "operationsequence": "Indicates the manufacturing process sequence.",
            "locationid": "Manufacturing location where the part is processed.",
            "scheduledstartdate": "Planned manufacturing start date.",
            "scheduledenddate": "Planned manufacturing end date.",
            "actualstartdate": "Actual start date.",
            "actualenddate": "Actual end date.",
            "actualresourcehrs": "Number of manufacturing hours used.",
            "plannedcost": "Estimated manufacturing cost.",
            "actualcost": "Actual manufacturing cost.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "customer": {
            "customerid": "The unique id number identifying the customer.",
            "personid": "The id number identifying the person.",
            "storeid": "The id number identifying the store / bussiness entity.",
            "territoryid": "ID of the territory in which the customer is located.",
            "accountnumber": "Unique number identifying the customer assigned by the accounting system. (Computed: isnull('AW'+[ufnLeadingZeros]([CustomerID]),''))",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "productlistpricehistory": {
            "productid": "Product identification number.",
            "startdate": "List price start date.",
            "enddate": "List price end date.",
            "listprice": "Product list price.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "address": {
            "addressid": "Unique id number identifying the address. (Primary key for Address records. Identity / Auto increment column.)",
            "addressline1": "First street address line.",
            "addressline2": "Second street address line. (commonsense evidence:; 1. total address = (AddressLine1+AddressLine2) ; 2. if AddressLine2 is not null, it means the address is too long)",
            "city": "Name of the city.",
            "stateprovinceid": "Identification number for the state or province. ",
            "postalcode": "Postal code for the street address.",
            "spatiallocation": "Latitude and longitude of this address.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "addresstype": {
            "addresstypeid": "Unique numbers identifying address type records. (Primary key for AddressType records. Identity / Auto increment column.)",
            "name": "Address type description. ",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "billofmaterials": {
            "billofmaterialsid": "The unique number identifying bill of materials. (Primary key for BillOfMaterials records. Identity / Auto increment column.)",
            "productassemblyid": "Parent product identification number.",
            "componentid": "Component identification number.",
            "startdate": "Date the component started being used in the assembly item.",
            "enddate": "Date the component stopped being used in the assembly item. (commonsense evidence:; 1. assembly item duration = (EndDate - StartDate) ; 2. if EndDate is null, it means the assembly item doesn't finish (still going on).)",
            "unitmeasurecode": "Standard code identifying the unit of measure for the quantity.",
            "bomlevel": "Indicates the depth the component is from its parent (column2)(AssemblyID).",
            "perassemblyqty": "Quantity of the component needed to create the assembly.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "businessentity": {
            "businessentityid": "Unique number of identifying business entity. (Primary key for all customers, vendors, and employees. Identity / Auto increment column)",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "contacttype": {
            "contacttypeid": "The unique id number identifying the contact type ID.",
            "name": "Contact type description.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "currencyrate": {
            "currencyrateid": "The unique id number identifying the currency rate record.",
            "currencyratedate": "Date and time the exchange rate was obtained.",
            "fromcurrencycode": "Exchange rate was converted from this currency code.",
            "tocurrencycode": "Exchange rate was converted to this currency code.",
            "averagerate": "Average exchange rate for the day.",
            "endofdayrate": "Final exchange rate for the day.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "department": {
            "departmentid": "The unique id number identifying the department.",
            "name": "Name of the department.",
            "groupname": "Name of the group to which the department belongs.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "employeedepartmenthistory": {
            "businessentityid": "Employee identification number.",
            "departmentid": "Department in which the employee worked including currently.",
            "shiftid": "Identifies which 8-hour shift the employee works.",
            "startdate": "Date the employee started working in the department.",
            "enddate": "Date the employee ended working in the department.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "employeepayhistory": {
            "businessentityid": "Employee identification number.",
            "ratechangedate": "Date the change in pay is effective.",
            "rate": "Salary hourly rate.",
            "payfrequency": "Pay Frequency. (1 = Salary received monthly, 2 = Salary received biweekly)",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "jobcandidate": {
            "jobcandidateid": "The unique id number identifying the job candidates.",
            "businessentityid": "Employee identification number if applicant was hired.",
            "resume": "Rsum in XML format.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "location": {
            "locationid": "The unique id number identifying the job candidates.",
            "name": "Location description.",
            "costrate": "Standard hourly cost of the manufacturing location. (Default: 0.00)",
            "availability": "Work capacity (in hours) of the manufacturing location. (Default: 0.00)",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "phonenumbertype": {
            "phonenumbertypeid": "The id number identifying the telephone number type records.",
            "name": "Name of the telephone number type.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "product": {
            "productid": "The unique id number identifying the product.",
            "name": "Name of the product.",
            "productnumber": "The unique product identification number.",
            "makeflag": "The source of product make. (0 = Product is purchased, 1 = Product is manufactured in-house. Default: 1)",
            "finishedgoodsflag": "Whether the product is salable or not. (0 = Product is not a salable item. 1 = Product is salable. Default: 1)",
            "color": "Color (Product color.)",
            "safetystocklevel": "The minimum inventory quantity.",
            "reorderpoint": "Inventory level that triggers a purchase order or work order.",
            "standardcost": "Standard cost of the product.",
            "listprice": "Selling price (commonsense evidence: ; profit = ListPrice - StandardCost)",
            "size": "Product size",
            "sizeunitmeasurecode": "Unit of measure for Size column.",
            "weightunitmeasurecode": "Unit of measure for Weight column.",
            "weight": "Product weight",
            "daystomanufacture": "Number of days required to manufacture the product.",
            "productline": "Product Routine (R = Road, M = Mountain, T = Touring, S = Standard)",
            "class": "Product quality class (H = High, M = Medium, L = Low)",
            "style": "Style (W = Womens, M = Mens, U = Universal)",
            "productsubcategoryid": "Product is a member of this product subcategory.",
            "productmodelid": "Product is a member of this product model.",
            "sellstartdate": "Date the product was available for sale.",
            "sellenddate": "Date the product was no longer available for sale.",
            "discontinueddate": "Date the product was discontinued.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "document": {
            "documentnode": "The unique hierarchy id identifying the document nodes.",
            "documentlevel": "Depth in the document hierarchy. (Computed: [DocumentNode].[GetLevel]())",
            "title": "Title of the document.",
            "owner": "Employee who controls the document.",
            "folderflag": "The type of the folders. (0 = This is a folder, 1 = This is a document. Default: 0)",
            "filename": "Uniquely identifying the record. Used to support a merge replication sample.  (File name of the document)",
            "fileextension": "File extension indicating the document type.",
            "revision": "Revision number of the document.",
            "changenumber": "Engineering change approval number.",
            "status": "Status of document processing. (1 = Pending approval, 2 = Approved, 3 = Obsolete)",
            "documentsummary": "Document abstract. (commonsense evidence:; if no document Summary: it means this document is private)",
            "document": "Complete document.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "stateprovince": {
            "stateprovinceid": "The unique number for StateProvince records.",
            "stateprovincecode": "ISO standard state or province code.",
            "countryregioncode": "ISO standard country or region code.",
            "isonlystateprovinceflag": " (0 = StateProvinceCode exists. ; 1 = StateProvinceCode unavailable, using CountryRegionCode. ; Default: 1. ; commonsense evidence:; To ask whether the StateProvinceCode exists or not.)",
            "name": "State or province description.",
            "territoryid": "ID of the territory in which the state or province is located.",
            "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  (Default: newid())",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "creditcard": {
            "creditcardid": "The unique id number identifying the credit card.",
            "cardtype": "Credit card name.",
            "cardnumber": "Credit card number.",
            "expmonth": "Credit card expiration month.",
            "expyear": "Credit card expiration year.",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        },
        "salesorderheader": {
            "salesorderid": "The id number of sales order.",
            "revisionnumber": "",
            "orderdate": "",
            "duedate": "",
            "shipdate": "Estimated shipment date from the vendor",
            "status": "Order current status (1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete Default: 1)",
            "onlineorderflag": "",
            "salesordernumber": "",
            "purchaseordernumber": "",
            "accountnumber": "",
            "customerid": "",
            "salespersonid": "",
            "territoryid": "",
            "billtoaddressid": "",
            "shiptoaddressid": "",
            "shipmethodid": "Shipping method",
            "creditcardid": "",
            "creditcardapprovalcode": "",
            "currencyrateid": "",
            "subtotal": "",
            "taxamt": "Tax amount",
            "freight": "Shipping cost",
            "totaldue": "Total due to vendor",
            "comment": "",
            "rowguid": "",
            "modifieddate": "Date and time the record was last updated.  (Default: getdate())"
        }
    },
    "mental_health_survey": {
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        }
    },
    "legislator": {
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        }
    },
    "synthea": {
        "all_prevalences": {
            "item": "the prevalent disease",
            "population type": "the population type - LIVING",
            "occurrences": "the number of occurrences",
            "population count": "the number of the counted populations ",
            "prevalence rate": "the prevalence rate (commonsense evidence: prevalence rate = occurrences / population_count)",
            "prevalence percentage": "the prevalence percentage (commonsense evidence: prevalence rate = occurrences / population_count * 100)"
        },
        "patients": {
            "patient": "the unique id for the patient",
            "birthdate": "the birth date of the patient",
            "deathdate": "the death date of the patient (commonsense evidence: ;  the age of the patient = death year - birth year ;  if null, it means this patient is still alive)",
            "ssn": "the social security number of the patient",
            "drivers": "the driver number of the patient (commonsense evidence: if not, this patient doesn't have driving license)",
            "passport": "the passport number (commonsense evidence: if not, this patient cannot go abroad, vice versa)",
            "prefix": "the prefix",
            "first": "the first name",
            "last": "the last name (commonsense evidence: full name = first + last)",
            "suffix": "the suffix of the patient (commonsense evidence: if suffix = PhD, JD, MD, it means this patient has doctoral degree. Otherwise, this patient is not.)",
            "maiden": "the maiden name of the patient (commonsense evidence: Only married women have the maiden name)",
            "marital": "the marital status of the patient (commonsense evidence: ;  M: married ;  S: single)",
            "race": "the race of the patient",
            "ethnicity": "the ethnicity of the patient",
            "gender": "the gender of the patient",
            "birthplace": "the birth place",
            "address": "the specific address"
        },
        "encounters": {
            "id": "the unique id of the encounter",
            "date": "the date of the encounter (yyyy-mm-dd)",
            "patient": "the patient id",
            "code": "the code of the care plan ",
            "description": "the description of the care plan",
            "reasoncode": "the reason code",
            "reasondescription": "the description of the reason why the patient needs the care plan"
        },
        "allergies": {
            "start": "the start date of the allergy  (mm/dd/yy)",
            "stop": "the stop date of the allergy (mm/dd/yy; commonsense evidence: allergy period = stop - start)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the allergy ",
            "description": "the description of the allergy "
        },
        "careplans": {
            "id": "the unique id of the care plan",
            "start": "the start date of the care plan (yyyy-mm-dd)",
            "stop": "the stop date of the care plan (yyyy-mm-dd; commonsense evidence: care plan period:; stop - start)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the care plan ",
            "description": "the description of the care plan",
            "reasoncode": "the reason code",
            "reasondescription": "the description of the reason why the patient needs the care plan"
        },
        "conditions": {
            "start": "the start date of the allergy  (mm/dd/yy)",
            "stop": "the stop date of the allergy (mm/dd/yy)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the condition ",
            "description": "the description of the patient condition"
        },
        "immunizations": {
            "date": "the date of the immunization (yyyy-mm-dd)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the immunization ",
            "description": "the description of the immunization"
        },
        "medications": {
            "start": "the start date of the care plan (yyyy-mm-dd)",
            "stop": "the stop date of the care plan (yyyy-mm-dd; commonsense evidence: Time of taking medicine)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the medication",
            "description": "the description of the medication",
            "reasoncode": "the reason code",
            "reasondescription": "the description of the reason why the patient take the medication"
        },
        "observations": {
            "date": "the date of the observation (yyyy-mm-dd)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the observation type",
            "description": "the description of the observation",
            "value": "the observation value",
            "units": "the units of the observation value (commonsense evidence: DESCRIPTION + VALUE + UNITS could be a fact:; e.g.: body height of patient xxx is 166.03 cm:; body height is in DESCRIPTION ; 166.03 is in VALUE ; cm is in UNITS)"
        },
        "procedures": {
            "date": "the date of the procedure (yyyy-mm-dd)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the procedure",
            "description": "the description of the procedure",
            "reasoncode": "the code of the reason",
            "reasondescription": "the description of the reason why the patient take the procedure"
        },
        "claims": {
            "id": "the unique id of the claim",
            "patient": "the patient id",
            "billableperiod": "the start date of the billable (yyyy-mm-dd)",
            "organization": "the claim organization",
            "encounter": "the medical encounter id",
            "diagnosis": "the diagnosis",
            "total": "the length of the billable period"
        }
    },
    "car_retails": {
        "offices": {
            "officecode": "unique ID of the office (unique ID of the office)",
            "city": "",
            "phone": "phone number",
            "addressline1": "addressLine1",
            "addressline2": "addressLine2 (commonsense evidence: ; addressLine1 + addressLine2 = entire address)",
            "state": "",
            "country": "country",
            "postalcode": "postalCode",
            "territory": "territory"
        },
        "employees": {
            "employeenumber": "unique string ID of the employees",
            "lastname": "last name of employees",
            "firstname": "first name of employees",
            "extension": "extension number",
            "email": "email",
            "officecode": "office code of the employees",
            "reportsto": "represents for organization structure such as who reports to whom (commonsense evidence: ; \"reportsTO\" is the leader of the \"employeeNumber\")",
            "jobtitle": "job title"
        },
        "customers": {
            "customernumber": "unique id number of customer",
            "customername": "the name when the customer registered",
            "contactlastname": "contact last name",
            "contactfirstname": "contact first name",
            "phone": "phone",
            "addressline1": "addressLine1",
            "addressline2": "addressLine2 (commonsense evidence: ; addressLine1 + addressLine2 = entire address)",
            "city": "city",
            "state": "state",
            "postalcode": "postalCode",
            "country": "country",
            "salesrepemployeenumber": "sales representative employee number",
            "creditlimit": "credit limit"
        },
        "orders": {
            "ordernumber": "unique order number (unique order number)",
            "orderdate": "order date",
            "requireddate": "required Date",
            "shippeddate": "shipped Date",
            "status": "status",
            "comments": "comments",
            "customernumber": "customer number"
        },
        "payments": {
            "customernumber": "customer number",
            "checknumber": "check Number",
            "paymentdate": "payment Date",
            "amount": "amount"
        },
        "productlines": {
            "productline": "unique product line name",
            "textdescription": "text description",
            "htmldescription": "html description",
            "image": "image"
        },
        "products": {
            "productcode": "unique product code",
            "productname": "product name",
            "productline": "product line name",
            "productscale": "product scale",
            "productvendor": "product vendor",
            "productdescription": "product description",
            "quantityinstock": "quantity in stock ",
            "buyprice": "buy price from vendors",
            "msrp": "Manufacturer Suggested Retail Price (commonsense evidence: ; expected profits: msrp - buyPrice)"
        },
        "orderdetails": {
            "ordernumber": "order number",
            "productcode": "product code",
            "quantityordered": "quantity ordered",
            "priceeach": "price for each (commonsense evidence: ; total price = quantityOrdered x priceEach)",
            "orderlinenumber": "order Line Number"
        }
    },
    "cs_semester": {
        "course": {
            "course_id": "unique id representing the course",
            "name": "name of the course",
            "credit": "credit of the course (commonsense evidence:; higher means more important)",
            "diff": "difficulty of the course (commonsense evidence:; higher --> more difficult; smaller --> less difficult)"
        },
        "prof": {
            "prof_id": "unique id for professors",
            "gender": "gender of the professor",
            "first_name": "the first name of the professor",
            "last_name": "the last name of the professor  (commonsense evidence:; full name: first name, last name)",
            "email": "email of the professor",
            "popularity": "popularity of the professor (commonsense evidence:; higher --> more popular)",
            "teachingability": "the teaching ability of the professor (commonsense evidence:; higher --> more teaching ability, his / her lectures may have better quality)",
            "graduate_from": "the school where the professor graduated from"
        },
        "ra": {
            "student_id": "the id numbe representing each student",
            "capability": "the capability of student on research; (Evaluated by the professor) (higher --> higher research ability / capability)",
            "prof_id": "professor who advises this student (this value may be repetitive since one professor may advise many students in this semester; commonsense evidence:; if a professor advise > 2 students in this semester, it means this professor's research work is heavy; or: this professor's popularity on research is higher)",
            "salary": "the salary of this student. (med: average salary; high: higher salary than others; low: lower salary; free: unpaid RA)"
        },
        "registration": {
            "course_id": "the id of courses",
            "student_id": "the id of students",
            "grade": "the grades that the students acquire in this course (commonsense evidence:;  A: excellent -- 4;  B: good -- 3;  C: fair -- 2;  D: poorly pass -- 1;  null or empty: this student fails to pass this course;  gpa of students for this semester = sum (credits x grade) / sum (credits))",
            "sat": "student satisfaction with the course"
        },
        "student": {
            "student_id": "the unique id to identify students",
            "f_name": "the first name of the student",
            "l_name": "the last name of the student (commonsense evidence:; full name: f_name, l_name)",
            "phone_number": "phone number",
            "email": "email ",
            "intelligence": "intelligence of the student (higher --> more intelligent)",
            "gpa": "gpa ",
            "type": "type of the student ( TPG: taught postgraduate student(master);  RPG: research postgraduate student (master);  UG: undergraduate student(bachelor); commonsense evidence:; both TPG and RPG are students pursuing a masters degree; UG are students pursuing the bachelor degree)"
        }
    },
    "airline": {
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        }
    },
    "sales": {
        "customers": {
            "customerid": "the unique id of the customer",
            "firstname": "the customer's first name",
            "middleinitial": "the customer's middle initial ",
            "lastname": "the customer's last name"
        },
        "employees": {
            "employeeid": "the unique id of the employee",
            "firstname": "the employee's first name",
            "middleinitial": "the employee's middle initial ",
            "lastname": "the employee's last name"
        },
        "products": {
            "productid": "the unique id of the product",
            "name": "the product name",
            "price": "the price of the product (unit price; commonsense evidence:; if the price = 0.0, it means this product is free or a gift)"
        },
        "sales": {
            "salesid": "the unique id of the sales",
            "salespersonid": "the unique id of the sale person",
            "customerid": "the unique id of the customer",
            "productid": "the unique id of the product",
            "quantity": "trading quantity (commonsense evidence:; total price = quantity x Products' Price)"
        }
    },
    "shooting": {
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        }
    },
    "soccer_2016": {
        "batting_style": {
            "batting_id": "unique id for batting hand",
            "batting_hand": "the batting hand: left or right"
        },
        "bowling_style": {
            "bowling_id": "unique id for bowling style",
            "bowling_skill": "the bowling skill"
        },
        "city": {
            "city_id": "unique id for city",
            "city_name": "city name",
            "country_id": "id of country"
        },
        "country": {
            "country_id": "unique id for country",
            "country_name": "country name"
        },
        "extra_type": {
            "extra_id": "unique id for extra type",
            "extra_name": "extra type name"
        },
        "extra_runs": {
            "match_id": "Unique Number Which Identifies a match",
            "over_id": "Unique Number which Identifies an over in an Innings",
            "ball_id": "Unique Number which Identifies a ball in an over",
            "extra_type_id": "Unique Number which Identifies extra type",
            "extra_runs": "Number of extra runs",
            "innings_no": "Unique Number which Identifies an innings in a match"
        },
        "out_type": {
            "out_id": "unique id for out type",
            "out_name": "out type name"
        },
        "outcome": {
            "outcome_id": "unique id for outcome",
            "outcome_type": "type of the outcome"
        },
        "player": {
            "player_id": "the id of the player",
            "player_name": "the name of the player",
            "dob": "player's birthday (yyyy-mm-dd)",
            "batting_hand": "the id of the batting hand",
            "bowling_skill": "the id of the bowling skill",
            "country_name": "the name of the country where the player is from"
        },
        "rolee": {
            "role_id": "the unique id for the role",
            "role_desc": "the role description "
        },
        "season": {
            "season_id": "the unique id for season",
            "man_of_the_series": "the player id of man of the series (commonsense evidence:; In team sport, a player of the series or man (or woman) of the series award is often given to the outstanding player in a particular series.)",
            "orange_cap": "the player id who wins the orange cap (commonsense evidence:; The Orange Cap is a coveted award for a batter who is participating in the Indian Premier League (IPL))",
            "purple_cap": "the player id who wins the purple cap (commonsense evidence:; The Purple Cap is awarded to the bowler who has emerged as the leading wicket-taker in a particular edition of the high-profile Indian Premier League (IPL))",
            "season_year": "the year of the season"
        },
        "team": {
            "team_id": "the unique id for the team",
            "team_name": "the team name "
        },
        "toss_decision": {
            "toss_id": "the unique id for the toss",
            "toss_name": "the toss decision name"
        },
        "umpire": {
            "umpire_id": "the unique id of the umpire",
            "umpire_name": "umpire's name",
            "umpire_country": "the id of the country where the umpire are from"
        },
        "venue": {
            "venue_id": "the unique id of the venue",
            "venue_name": "the name of the venue",
            "city_id": "the city id where the venue is located in "
        },
        "win_by": {
            "win_id": "the unique id for the winning",
            "win_type": "the winning type"
        },
        "match": {
            "match_id": "unique id for match",
            "team_1": "the team id of the first team",
            "team_2": "the team id for the second team",
            "match_date": "the date of the match (yyyy-mm-dd)",
            "season_id": "the id of the season",
            "venue_id": "the id of the venue where the match held",
            "toss_winner": "the id of the toss winner (commonsense evidence:; The toss winner is a term used in cricket and is the team that wins the heads or tails toss of coin at the beginning of a match which then enables the team captain to decide whether to bat or bowl first on the pitch.)",
            "toss_decide": "the decision (batting or bowling) made after winning the toss (â¢ field ; â¢ bat)",
            "win_type": "the id of the winning type ",
            "win_margin": "the points of the winning margin (commonsense evidence:; A winning margin bet is a wager on the final result of a game, within a certain range of points.)",
            "outcome_type": "the id of the outcome type",
            "match_winner": "the team id of the match winner",
            "man_of_the_match": "the id of the man of the match (commonsense evidence:; In team sport, a player of the match or man (or woman) of the match award is often given to the outstanding player in a particular match.)"
        },
        "ball_by_ball": {
            "match_id": "Unique Number Which Identifies a match",
            "over_id": "Unique Number which Identifies an over in an Innings (commonsense evidence:; The match is made up of two innings and each team takes a turn at batting and bowling. An innings is made up of 50 overs. An over involves six deliveries from the bowler.)",
            "ball_id": "Unique Number which Identifies a ball in an over",
            "innings_no": "Unique Number which Identifies an innings in a match",
            "team_batting": "Unique Number which Identifies Batting team in a match",
            "team_bowling": "Unique Number which Identifies Bowling team in a match",
            "striker_batting_position": "Unique Number which Identifies the position in which player came into bat",
            "striker": "Unique Number which Identifies the player who is on strike for that particular ball",
            "non_striker": "Unique Number which Identifies the player who is Non-striker for that particular ball",
            "bowler": "Unique Number which Identifies the player who is Bowling that particular ball"
        },
        "batsman_scored": {
            "match_id": "Unique Number Which Identifies a match",
            "over_id": "Unique Number which Identifies an over in an Innings",
            "ball_id": "Unique Number which Identifies a ball in an over",
            "runs_scored": "Number of Runs scored by the batsman",
            "innings_no": "Unique Number which Identifies an innings in a match"
        },
        "player_match": {
            "match_id": "unique id for match",
            "player_id": "the id of the player",
            "role_id": "the id of the play's role in the match (commonsense evidence:; if a player has multiple roles in a match, it means this player is versatile)",
            "team_id": "the id of player's team"
        },
        "wicket_taken": {
            "match_id": "the id of the match",
            "over_id": "the id of the over in an inning",
            "ball_id": "the id of the ball in an over",
            "player_out": "the player id who got an out",
            "kind_out": "the id that represents the out type",
            "innings_no": "number which identifies an innings in a match"
        }
    },
    "cookbook": {
        "ingredient": {
            "ingredient_id": "the unique identifier for the ingredient",
            "category": "the category of the ingredient",
            "name": "the name of the ingredient",
            "plural": "the plural suffix of the ingredient"
        },
        "recipe": {
            "recipe_id": "the unique identifier for the recipe",
            "title": "the title of the recipe",
            "subtitle": "the subtitle of the recipe",
            "servings": "the number of people the recipe can serve",
            "yield_unit": "the unit of the yield for the recipe",
            "prep_min": "the preparation minute of the recipe",
            "cook_min": "the cooked minute of the recipe",
            "stnd_min": "the stand minute of the price (commonsense evidence: The stand minute stands for the time to take the dish away from the heat source. ; the total time of the recipe = prep_min + cook_min + stnd_min)",
            "source": "the source of the recipe",
            "intro": "the introduction of the recipe",
            "directions": "the directions of the recipe"
        },
        "nutrition": {
            "recipe_id": "the id of the recipe",
            "protein": "the protein content in the recipe",
            "carbo": "the carbo content in the recipe",
            "alcohol": "the alcohol content in the recipe",
            "total_fat": "the total fat content in the recipe (commonsense evidence: higher --> higher possibility to gain weight)",
            "sat_fat": "the saturated fat content in the recipe (commonsense evidence: unsaturated fat = total_fat - saturated fat)",
            "cholestrl": "the cholesterol content in the recipe",
            "sodium": "the sodium content in the recipe (commonsense evidence:; Salt/Sodium-Free - Less than 5 mg of sodium per serving; Very Low Sodium - 35 mg of sodium or less per serving; Low Sodium -140 mg of sodium or less per serving; Reduced Sodium - At least 25% less sodium than the regular product; Light in Sodium or Lightly Salted - At least 50% less sodium than the regular product; No-Salt-Added or Unsalted - No salt is added during processing - but these products may not be salt/sodium-free unless stated)",
            "iron": "the iron content in the recipe (commonsense evidence: if iron > 20mg, it will lead to  ;  constipation ;  feeling sick ;  being sick ;  stomach pain ; question could mention any of functions listed before.)",
            "vitamin_c": "the vitamin c content in the recipe (commonsense evidence: Vitamin C, also known as ascorbic acid, if the VC is higher, it will:;  helping to protect cells and keeping them healthy ;  maintaining healthy skin, blood vessels, bones and cartilage ;  helping with wound healing ; question could mention any of functions listed before.)",
            "vitamin_a": "the vitamin a content in the recipe (commonsense evidence:; higher --> beneficial to ;  helping your body's natural defense against illness and infection (the immune system) work properly ;  helping vision in dim light ;  keeping skin and the lining of some parts of the body, such as the nose, healthy ; question could mention any of functions listed before.)",
            "fiber": "the fiber a content in the recipe",
            "pcnt_cal_carb": "percentage of carbo in total nutrient composition",
            "pcnt_cal_fat": "percentage of fat in total nutrient composition",
            "pcnt_cal_prot": "percentage of protein in total nutrient composition",
            "calories": "the calories of the recipe"
        },
        "quantity": {
            "quantity_id": "the unique identifier for the quantity",
            "recipe_id": "the id of the recipe",
            "ingredient_id": "the id of the ingredient",
            "max_qty": "the max quantity of the ingredient",
            "min_qty": "the min quantity of the ingredient (commonsense evidence: If max_qty equals to min_qty, it means that the ingredient must be rationed. )",
            "unit": "the unit of the ingredient",
            "preparation": " (commonsense evidence: 'No data' means the ingredient doesn't need preprocessing. )",
            "optional": "whether the ingredient is optional "
        }
    },
    "image_and_language": {
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        }
    },
    "retails": {
        "customer": {
            "c_custkey": "unique id number identifying the customer",
            "c_mktsegment": "the segment of the customer",
            "c_nationkey": "the nation key number of the customer",
            "c_name": "name of the customer",
            "c_address": "address of the customer",
            "c_phone": "phone of the customer",
            "c_acctbal": "account balance (if c_acctbal < 0: this account is in debt)",
            "c_comment": "comment of the customer"
        },
        "lineitem": {
            "l_shipdate": "ship date of line item ",
            "l_orderkey": "order key number of line item ",
            "l_discount": "discount of line item  (0.1: 10% off)",
            "l_extendedprice": "extended price of line item  (commonsense evidence:; full price before discount; discounted price = (l_extendedprice*(1-l_discount)))",
            "l_suppkey": "suppkey of line item ",
            "l_quantity": "quantity of line item ",
            "l_returnflag": "return flag of line item  (commonsense evidence:;  R ? returned item;  A and \"N\": not returned item.)",
            "l_partkey": "part key of line item ",
            "l_linestatus": "line status of line item  (NOT USEFUL)",
            "l_tax": "tax of line item  (commonsense evidence:; charge = l_extendedprice * (1- l_discount) * (1+ l_tax))",
            "l_commitdate": "commit date of line item ",
            "l_receiptdate": "receipt date of line item  (commonsense evidence:; freight / shipping / delivery time = l_receiptdate - l_commitdate;; less shipping / delivery time --> faster shipping speed.)",
            "l_shipmode": "ship mode of line item ",
            "l_linenumber": "unique id number identifying the line item",
            "l_shipinstruct": "ship instruct of line item ",
            "l_comment": "comment of line item "
        },
        "nation": {
            "n_nationkey": "unique id number identifying the nation",
            "n_name": "name of the nation",
            "n_regionkey": "region key number of the nation",
            "n_comment": "comment description of nation"
        },
        "orders": {
            "o_orderdate": "date of the order (commonsense evidence:; earlier order date --> higher priority in delivery)",
            "o_orderkey": "unique id number identifying the order",
            "o_custkey": "customer key of order",
            "o_orderpriority": "priority rate of order (A smaller number means a higher priority: 0-Urgent)",
            "o_shippriority": "ship priority of order (NOT USEFUL)",
            "o_clerk": "clerk of order",
            "o_orderstatus": "status of order (NOT USEFUL)",
            "o_totalprice": "total price of the order",
            "o_comment": "comment description of order"
        },
        "part": {
            "p_partkey": "unique id number identifying the part",
            "p_type": "type of part",
            "p_size": "size number of part (larger number --> larger part)",
            "p_brand": "brand of part",
            "p_name": "name of part",
            "p_container": "container of part",
            "p_mfgr": "manufacturer of part",
            "p_retailprice": "retail price of part",
            "p_comment": "comment description text of part"
        },
        "partsupp": {
            "ps_partkey": "unique id number identifying the part key",
            "ps_suppkey": "unique id number identifying the supply key",
            "ps_supplycost": "cost number of the part supply (commonsense evidence:; profit = (l_extendedprice*(1-l_discount)) - (ps_supplycost * l_quantity)] l_quantity comes from table lineitem!)",
            "ps_availqty": "available quantity of the part supply (if ps_availqty < 10 --> closer to OOS (out of stock))",
            "ps_comment": "comment description of the part supply."
        },
        "region": {
            "r_regionkey": "unique id number identifying the region",
            "r_name": "name of the region",
            "r_comment": "comment description of the region"
        },
        "supplier": {
            "s_suppkey": "unique id number identifying the supply",
            "s_nationkey": "nation key of the supply",
            "s_comment": "comment description of the comment",
            "s_name": "name of the supplier",
            "s_address": "address of the supplier",
            "s_phone": "phone number of the supplier",
            "s_acctbal": "account balance of the supplier (commonsense evidence:; if c_acctbal < 0: this account is in debt)"
        }
    },
    "software_company": {
        "demog": {
            "geoid": "unique geographic identifier",
            "inhabitants_k": "number of inhabitants (the unit is K (thousands))",
            "income_k": "average income per inhabitant per month (the unit is dollar, it indicates the average income per inhabitant per month.; commonsense evidence:; some computation like: total income per year = INHABITANTS_K x INCOME_K x 12)",
            "a_var1": "",
            "a_var2": "",
            "a_var3": "",
            "a_var4": "",
            "a_var5": "",
            "a_var6": "",
            "a_var7": "",
            "a_var8": "",
            "a_var9": "",
            "a_var10": "",
            "a_var11": "",
            "a_var12": "",
            "a_var13": "",
            "a_var14": "",
            "a_var15": "",
            "a_var16": "",
            "a_var17": "",
            "a_var18": ""
        },
        "mailings3": {
            "refid": "unique id number identifying the customer",
            "ref_date": "indicating the date when the mailing was sent",
            "response": "Actual response to the marketing incentive email  ( True;  False ; commonsense evidence: ; 1. any person who has not responded to a mailing within two months is considered to have responded negatively.; 2. true respond to the mailing, otherwise, no)"
        },
        "customers": {
            "id": "the unique number identifying the customer",
            "sex": "the sex of the customer",
            "marital_status": " (� Never-married; � Married-civ-spouse; � Divorced; � Widowed; � Other; commonsense evidence: \"Married-civ-spouse\", \"Divorced\", \"Widowed\" mean customer has been married.; )",
            "geoid": "geographic identifier",
            "educationnum": "the level of education (commonsense evidence: higher education number refers to higher education)",
            "occupation": "occupation of customers",
            "age": "age of customers (commonsense evidence: � teenager: 13-19 years old.; � elder: people aged over 65)"
        },
        "mailings1_2": {
            "refid": "unique id number identifying the customer",
            "ref_date": "indicating the date when the mailing was sent",
            "response": "Response to the incentive mailing that marketing department sent ( True;  False ; commonsense evidence: ; 1. any person who has not responded to a mailing within two months is considered to have responded negatively.; 2. true respond to the mailing, otherwise, no)"
        },
        "sales": {
            "eventid": "unique id of event (sales)",
            "refid": "Reference to customer ID",
            "event_date": "date of sales",
            "amount": "amount of sales"
        }
    },
    "professional_basketball": {
        "awards_players": {
            "playerid": "ID number identifying the unique number of the player",
            "award": "the name of the award",
            "year": "the time of this award",
            "lgid": "the name of the league (mainly categories: \"NBA\" & \"ABA\")",
            "note": "notification (”null“ refers to that no special things; ”tie“ represents that coaches are tied for some awards)",
            "pos": "the position of the player (C: Center; F: Forward; G: Guard )"
        },
        "coaches": {
            "coachid": "ID number identifying the unique number of the coach",
            "year": "",
            "tmid": "team name (abbreviated name)",
            "lgid": "league name (mainly categories: \"NBA\" & \"ABA\")",
            "stint": "the period of the time coaching this team",
            "won": "the number of won games (0: no wins)",
            "lost": "the number of lost games (0: win all the games)",
            "post_wins": "the number of games won in the post-season (playoffs) games (0: no wins; ; commonsense evidence:; ; If the team's post-season wins and losses are all zero, it implies that the team did not participate in the post-season (playoffs) that year.)",
            "post_losses": "the number of games lost in the post-season (playoffs) games (0: win all the games; ; commonsense evidence:; ; If the team's post-season wins and losses are all zero, it implies that the team did not participate in the post-season (playoffs) that year.)"
        },
        "draft": {
            "id": "the unique number to determine one row of the data",
            "draftyear": "which year does this draft happens",
            "draftround": "the Round number of this draft (If the value is 0, it means that there is no draft in this year; ; 1 refers that this player was picked in the first round)",
            "draftselection": "the position that the player was picked (0：This signifies that it doesn't contain the draft information of this player; ; 7：this player was selected in the 7th position in this round; ; commonsense evidence:; ; draftRound: 1; ; draftSelection: 7 ; represents: this player was selected in the round 1, 7th position.)",
            "draftoverall": "The player's overall draft position for the year (this is the overall draft rank of the player.)",
            "tmid": "team name (abbreviated name)",
            "firstname": "the first name of the player",
            "lastname": "the last name of the player",
            "suffixname": "the suffix name of the player",
            "playerid": "ID number identifying the unique number of the player",
            "draftfrom": "the university that the drafted players come from (the name of the university)",
            "lgid": "the league name (mainly categories: \"NBA\" & \"ABA\")"
        },
        "player_allstar": {
            "playerid": "ID number identifying the unique number of the player",
            "last_name": "the last name of the player",
            "first_name": "the first name of the player",
            "season_id": "the id number of the season",
            "conference": "which conference that players belong to (two categories: west; east)",
            "league_id": "the league name (two categories: NBA; ABA)",
            "games_played": "how many all star games that this player played in this season (mostly it's 1)",
            "minutes": "minutes of attendance (18：played in 18 minutes)",
            "points": "points (19: get 19 points；; ; null --> doesn't get points)",
            "o_rebounds": "offense rebounds (empty or null refers to none offense rebounds，; ; 1: one offense rebound)",
            "d_rebounds": "defense rebounds (empty or null refers to none defense rebounds，; ; 1: one defense rebound)",
            "rebounds": "total rebounds (empty or null refers to none total rebounds，; ; 3: totally gets 3 rebounds including offence and defense rebounds; ; commensense evidence:; ; total rebounds = offense rebounds + defense rebounds)",
            "assists": "assistants (null or empty refers to none; ; 2: 2 assistants)",
            "steals": "steals (null or empty refers to none; ; 2: 2 steals)",
            "blocks": "blocks (null or empty refers to none; ; 2: 2 blocks)",
            "turnovers": "turnovers (null or empty refers to none; ; 2: 2 turnovers)",
            "personal_fouls": "personal fouls (null or empty refers to none; ; 2: 2 personal fouls)",
            "fg_attempted": "field goal attempted (null or empty refers to none; ; 2: 2 field goal attempts)",
            "fg_made": "field goal made (null or empty refers to none; ; 2: 2 field goal made)",
            "ft_attempted": "free throw attempted (null or empty refers to none; ; 2: 2 free throw attempts)",
            "ft_made": "free throw made (null or empty refers to none; ; 2: 2 free throw made)",
            "three_attempted": "three point attempted (null or empty refers to none; ; 2: 2 three point attempts)",
            "three_made": "three point made  (null or empty refers to none; ; 2: 2 three point made)"
        },
        "players": {
            "playerid": "ID number identifying the unique number of the player",
            "usefirst": " (not useful)",
            "firstname": "the first name of the player",
            "middlename": "the middle name of the player",
            "lastname": "the last name of the player",
            "namegiven": " (not useful)",
            "fullgivenname": " (not useful)",
            "namesuffix": "the suffix name of the player",
            "namenick": "",
            "pos": "the position of the player (C: Center; ; F: Forward; ; G: Guard ; ; commonsense evidence:; some player can have two positions simultaneously)",
            "firstseason": " (nothing special)",
            "lastseason": " (nothing special)",
            "height": "inch (inch)",
            "weight": "lb (null or empty means it doesn't have this information)",
            "college": "college (null or empty means it doesn't have this information; ; which colledge does this player graduate from)",
            "collegeother": "the college that transferred from  (commonsense evidence:; ; some players may have the record of transferring from other colleges)",
            "birthdate": "birthdate",
            "birthcity": "birthcity (null / empty refers to not recorded)",
            "birthstate": "birth state",
            "birthcountry": "birth country",
            "highschool": "high school (null / empty refers to not recorded)",
            "hscity": "high school city (null / empty refers to not recorded)",
            "hsstate": "high school state (null / empty refers to not recorded)",
            "hscountry": "high school country (null / empty refers to not recorded)",
            "deathdate": "deathdate (0000-00-00 means this player is still alive; ; within clear date：; 2011-11-10, which means this guy was died on \"2011-11-10\")",
            "race": " (B：black,; W: white; ; null or empty: nothing)"
        },
        "teams": {
            "year": "year",
            "lgid": "league name (main categories:; NBA, ABA)",
            "tmid": "team id (abbreviated name)",
            "franchid": " (not useful)",
            "confid": " (not useful)",
            "divid": "division ID",
            "rank": "rank (less is better)",
            "confrank": " (not useful)",
            "playoff": "another name: post season (for brevity, if the value is not null or empty, it means this team attends the playoffs, otherwise, means not attend)",
            "name": "full name of the team",
            "o_fgm": "how many offense field goal made by this team in this season",
            "o_ftm": "how many offense free throw made by this team in this season",
            "o_pts": "offense points",
            "d_pts": "defense points",
            "homewon": "wins in the home",
            "homelost": "loses in the home",
            "awaywon": "wins in the away",
            "awaylost": "loses in the away",
            "won": " (total wins of this team in this year.)",
            "lost": " (total losts of this team in this year.)",
            "games": " (total number of games that this team played in this year (season))",
            "arena": "arena (null or empty refers to the fact that this team doesn't have individual arenas, otherwise, it has individual arenas)"
        },
        "awards_coaches": {
            "id": "id of this row of data",
            "year": "which year did the coach receive the honor?",
            "coachid": "id number of the coaches",
            "award": "the award names (mainly categories: \"NBA\" & \"ABA\")",
            "lgid": "the name of the league (mainly categories: \"NBA\" & \"ABA\")",
            "note": "special notification (”null“ refers to that no special things; ”tie“ represents that coaches are tied for some awards)"
        },
        "players_teams": {
            "id": "the unique number to identify this record",
            "playerid": "ID number identifying the unique number of the player",
            "year": "year",
            "stint": "the period of the time player spent played for this team",
            "tmid": "team name (abbreviated name)",
            "lgid": "",
            "gp": "game presentatons (attendance) (min: 0, max: 82; ; commonsense evidence:; ; if this number is equal to 82, means full attendance)",
            "gs": "game starting (min: 0, max: 82,; ; commonsense evidence:; ; when GP = GS, it means that this player plays as the stating lineup fully. )",
            "minutes": "minutes",
            "points": "points",
            "orebounds": "offense rebounds (empty or null refers to none offense rebounds，; ; 1: one offense rebound)",
            "drebounds": "defense rebounds (empty or null refers to none defense rebounds，; ; 1: one defense rebound)",
            "rebounds": "total rebounds (empty or null refers to none total rebounds，; ; 3: totally gets 3 rebounds including offense and defense rebounds; ; commensense evidence:; ; total rebounds = offense rebounds + defense rebounds)",
            "assists": "assistants (null or empty refers to none; ; 2: 2 assistants)",
            "steals": "steals (null or empty refers to none; ; 2: 2 steals)",
            "blocks": "blocks (null or empty refers to none; ; 2: 2 blocks)",
            "turnovers": "turnovers (null or empty refers to none; ; 2: 2 turnovers)",
            "pf": "personal fouls (null or empty refers to none; ; 2: 2 personal fouls)",
            "fgattempted": "field goal attempted (null or empty refers to none; ; 2: 2 field goal attempts)",
            "fgmade": "field goal made (null or empty refers to none; ; 2: 2 field goal made)",
            "ftattempted": "free throw attempted (null or empty refers to none; ; 2: 2 free throw attempts)",
            "ftmade": "free throw made (null or empty refers to none; ; 2: 2 free throw made)",
            "threeattempted": "three point attempted (null or empty refers to none; ; 2: 2 three point attempts)",
            "threemade": "three point made (null or empty refers to none; ; 2: 2 three point made)",
            "postgp": "post season game presentations (0: this player doesn't present in the post season (playoffs))",
            "postgs": "post season game starting",
            "postminutes": "post season minutes",
            "postpoints": "post season points",
            "postorebounds": "post season offense rebounds (null or empty refers to none; ; 1: 1 offense rebounds in the post season)",
            "postdrebounds": "post season defense rebounds (null or empty refers to none; ; 1: 1 defense rebounds in the post season)",
            "postrebounds": "post season defense rebounds (null or empty refers to none; ; 3: 3 rebounds in the post season totally)",
            "postassists": " (null or empty refers to none; ; 1: 1 assistance in the post season)",
            "poststeals": " (null or empty refers to none; ; 1: 1 offense steals in the post season)",
            "postblocks": " (null or empty refers to none; ; 1: 1 block in the post season)",
            "postturnovers": " (null or empty refers to none; ; 1: 1 turnover in the post season)",
            "postpf": " (null or empty refers to none; ; 1: 2 personal fouls in the post season)",
            "postfgattempted": " (null or empty refers to none; ; 1: 1 field goal attempts in the post season)",
            "postfgmade": " (null or empty refers to none; ; 1: 1 field goal made in the post season)",
            "postftattempted": " (null or empty refers to none; ; 1: 1 free throw attempts in the post season)",
            "postftmade": " (null or empty refers to none; ; 1: 1 free throw made in the post season)",
            "postthreeattempted": " (null or empty refers to none; ; 1: 1 three point attempts in the post season)",
            "postthreemade": " (null or empty refers to none; ; 1: 1 three point made in the post season)",
            "note": ""
        },
        "series_post": {
            "id": "unique number of this record",
            "year": "year",
            "round": "round (known abbreviations：; ; F：final ; SF: semi-final ; ; QF：quater-final 1/4; ; DF：division-final ; ; DSF：division semi-final)",
            "series": " (not useful)",
            "tmidwinner": "team id winner",
            "lgidwinner": "league id winner",
            "tmidloser": "team id loser",
            "lgidloser": "league id loser",
            "w": "wins",
            "l": "loses"
        }
    },
    "coinmarketcap": {
        "coins": {
            "id": "unique id number identifying coins",
            "name": "name of coins",
            "slug": "slug names of coins",
            "symbol": "symbol of names of coins",
            "status": "status of coins (commonsense reasoning:; • active: this coin is active and available for transactions; • untracked: this coin cannot be tracked; • inactive: this coin is not available for transactions; • extinct: this coin has been disappeared )",
            "category": "category of coins (commonsense reasoning:; • token: ; • coin: )",
            "description": "description of coins",
            "subreddit": "name of coins on reddit ",
            "notice": "notice if any ",
            "tags": "tags of coins",
            "tag_names": "tag names of coins",
            "website": "website introduction of coins",
            "platform_id": "id number of the platform",
            "date_added": "the added date",
            "date_launched": "lanched date"
        },
        "historical": {
            "date": "transaction date; ",
            "coin_id": "id number referring to coins",
            "cmc_rank": "CMC rank is a metric used by CoinMarketCap to rank the relative popularity of different cryptocurrencies.",
            "market_cap": "Market capitalization refers to how much a coin is worth as determined by the coin market. (dollars; market cap (latest trade price x circulating supply).)",
            "price": "how much is a coin (dollars)",
            "open": "the price at which a cryptocurrency (coin) opens at a time period (dollars; commonsense reasoning:; if null or empty, it means this coins has not opened yet today.)",
            "high": "highest price (dollars)",
            "low": "lowest price (commonsense reasoning:; 1.\tIt's the best time to purchase this coin; 2.\tusers can make the max profit today by computation: high - low)",
            "close": "the price at which a cryptocurrency (coin) closes at a time period, for example at the end of the day.",
            "time_high": "the time to achieve highest price",
            "time_low": "the time to achieve lowest price",
            "volume_24h": "the total value of cryptocurrency coined traded in the past 24 hours.",
            "percent_change_1h": "price percentage change in the first hour (The change is the difference (in percent) between the price now compared to the price around this time 1 hours ago)",
            "percent_change_24h": "price percentage change in the first 24 hours (The change is the difference (in percent) between the price now compared to the price around this time 24 hours ago)",
            "percent_change_7d": "price percentage change in the first 7 days (The change is the difference (in percent) between the price now compared to the price around this time 7 days ago)",
            "circulating_supply": "the best approximation of the number of coins that are circulating in the market and in the general public's hands.",
            "total_supply": "the total amount of coins in existence right now",
            "max_supply": "Max Supply is the best approximation of the maximum amount of coins that will ever exist in the lifetime of the cryptocurrency. (commonsense reasoning:; the number of coins verifiably burned so far = max_supply - total_supply)",
            "num_market_pairs": "number of market pairs across all exchanges trading each currency. (commonsense reasoning:; active coins that have gone inactive can easily be identified as having a num_market_pairs of 0)"
        }
    },
    "college_completion": {
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        }
    },
    "european_football_1": {
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        }
    },
    "retail_complains": {
        "state": {
            "statecode": "",
            "state": "",
            "region": ""
        },
        "callcenterlogs": {
            "date received": "complaint date",
            "complaint id": "unique id number representing each complaint",
            "rand client": "client id",
            "phonefinal": "final phone number",
            "vru+line": "voice response unit line",
            "call_id": "id number identifying the call",
            "priority": "priority of the complaint (0, 1, 2, ; null: not available,; higher: -> higher priority,; -> more serious/urgent complaint)",
            "type": "type of complaint",
            "outcome": "the outcome of processing of complaints",
            "server": "server",
            "ser_start": "server start time (HH:MM:SS)",
            "ser_exit": "server exit time",
            "ser_time": "server time (commonsense evidence:; longer server time referring to more verbose/longer complaint)"
        },
        "client": {
            "client_id": "unique id client number",
            "sex": "sex of client",
            "day": "day of the birthday",
            "month": "month of the birthday",
            "year": "year when is born",
            "age": "age  (teenager: 13-19; adult: 19-65; elder: > 65)",
            "social": "social number (ssn: us id number for each person)",
            "first": "first name",
            "middle": "middle name",
            "last": "last name",
            "phone": "phone number",
            "email": "email (commonsense evidence:; google email / account: @gamil.com; microsoft email / account: xxx@outlook.com)",
            "address_1": "address 1",
            "address_2": "address 2 (entire address = (address_1, address_2))",
            "city": "city ",
            "state": "state code",
            "zipcode": "zipcode",
            "district_id": "district id number"
        },
        "district": {
            "district_id": "unique id number representing district",
            "city": "city ",
            "state_abbrev": "state abbreviated code",
            "division": "division"
        },
        "events": {
            "date received": "Date received",
            "product": "complaining about which product ",
            "sub-product": "sub product if exists (commonsense evidence:; detailed product)",
            "issue": "problems leading to this complaints",
            "sub-issue": "sub problems leading to this complaints if exists (commonsense evidence:; more detailed issue)",
            "consumer complaint narrative": "Consumer complaint narrative",
            "tags": "tags of client",
            "consumer consent provided?": "whether the tags labeled under permission of the clients (commonsense evidence:;  null, 'N/A' or empty value: indicating that the company didn't get the permission of consent.;  if the value is not empty: customers provide the consent for this tag.)",
            "submitted via": "Submitted via",
            "date sent to company": "Date sent to company (commonsense evidence:; delay of the complaints = 'Date sent to company')",
            "company response to consumer": "Company response to consumer",
            "timely response?": "whether the response of the company is timely",
            "consumer disputed?": "whether the consumer dispute about the response from the company.",
            "complaint id": "id number indicating which complaint",
            "client_id": "id number indicating which client"
        },
        "reviews": {
            "date": "",
            "stars": "",
            "reviews": "",
            "product": "",
            "district_id": ""
        }
    },
    "world": {
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        }
    },
    "restaurant": {
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        }
    },
    "language_corpus": {
        "langs": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's the Catalan language.; )",
            "lang": "language name  (commonsense evidence:;  ca means Catalan language.)",
            "locale": "The locale of the language",
            "pages": "total pages of Wikipedia in this language",
            "words": "total number of words in this pages"
        },
        "pages": {
            "pid": "page id of Wikipedia about Catalan language",
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language)",
            "page": "wikipedia page id",
            "revision": "wikipedia revision page id",
            "title": "The title of this Catalan language Wikipedia page",
            "words": "number of different words in this page"
        },
        "words": {
            "wid": "The word id of the Catalan language (The value is unique.)",
            "word": "The word itself",
            "occurrences": "The occurrences of the specific word"
        },
        "langs_words": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language.)",
            "wid": "The word id of the Catalan language",
            "occurrences": "repetitions of this word in this language (it's INTEGER and DEFAULT is 0.)"
        },
        "pages_words": {
            "pid": "page id of Wikipedia about Catalan language",
            "wid": "The word id of the Catalan language (The value is unique.)",
            "occurrences": "times of this word appears into this page"
        },
        "biwords": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language.; )",
            "w1st": "The word id of the first word of the biwords pair.  (The value is unique.)",
            "w2nd": "The word id of the second word of the biwords pair.  (The value is unique.)",
            "occurrences": "times of this pair appears in this language/page"
        }
    },
    "shipping": {
        "city": {
            "city_id": "unique identifier for the city",
            "city_name": "name of the city",
            "state": "state in which the city is",
            "area": "square miles the city covers (commonsense evidence: ; population density (land area per capita) = area / population )"
        },
        "customer": {
            "cust_id": "Unique identifier for the customer",
            "cust_name": "Business name of the customer",
            "annual_revenue": "Annual revenue of the customer",
            "cust_type": "Whether the customer is a manufacturer or a wholes",
            "address": "Physical street address of the customer",
            "city": "City of the customer's address",
            "state": "State of the customer's address (commonsense evidence: ; please mention its full name in the question, by referring to ; https://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971; e.g., NY --> New York)",
            "zip": "Postal code of the customer's address",
            "phone": "Telephone number to reach the customer"
        },
        "driver": {
            "driver_id": "Unique identifier for the driver",
            "first_name": "First given name of the driver",
            "last_name": "Family name of the driver (commonsense evidence: full name = first_name + last_name)",
            "address": "Street address of the driver's home",
            "city": "City the driver lives in",
            "state": "State the driver lives in (commonsense evidence: ; please mention its full name in the question, by referring to ; https://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971 ; e.g., NY --> New York)",
            "zip_code": "postal code of the driver's address",
            "phone": "telephone number of the driver"
        },
        "truck": {
            "truck_id": "Unique identifier of the truck table",
            "make": "The brand of the truck (commonsense evidence: ;  Peterbilt headquarter: Texas (TX) ;  Mack headquarter: North Carolina (NC) ;  Kenworth headquarter: Washington (WA) ; can ask question about headquarters of the truck)",
            "model_year": "The year the truck was manufactured (commonsense evidence: The truck with earlier model year means this truck is newer.)"
        },
        "shipment": {
            "ship_id": "Unique identifier of the shipment",
            "cust_id": "A reference to the customer table that indicates which customer the shipment is for",
            "weight": "The number of pounds being transported on the shipment",
            "truck_id": "A reference to the truck table that indicates which truck is used in the shipment",
            "driver_id": "A reference to the driver table that indicates which driver transported the goods in the shipment",
            "city_id": "A reference to the city table that indicates the destination of the shipment",
            "ship_date": "the date the items were received by the driver (yyyy-mm-dd)"
        }
    },
    "trains": {
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        }
    },
    "authors": {
        "author": {
            "id": "Id of the author",
            "name": "Author Name",
            "affiliation": "Organization name with which the author is affiliated.  (the name of an organization with which an author can be affiliated)"
        },
        "conference": {
            "id": "Conference Id",
            "shortname": "Short name",
            "fullname": "Full name",
            "homepage": "Homepage URL of conference"
        },
        "journal": {
            "id": "Journal Id",
            "shortname": "Short name",
            "fullname": "Full name",
            "homepage": "Homepage URL of journal"
        },
        "paper": {
            "id": " Id of the paper",
            "title": "Title of the paper",
            "year": "Year of the paper (commonsense reasoning: if the year is \"0\", it means this paper is preprint, or not published)",
            "conferenceid": "Conference Id in which paper was published",
            "journalid": "Journal Id in which paper was published (commonsense reasoning: If a paper contain \"0\" in both ConferenceID and JournalId, it means this paper is preprint)",
            "keyword": "Keywords of the paper  (commonsense reasoning: Keywords should contain words and phrases that suggest what the topic is about. ; Similar keywords represent similar fields or sub-field. )"
        },
        "paperauthor": {
            "paperid": " Paper Id",
            "authorid": "Author Id (commonsense reasoning: A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair. )",
            "name": "Author Name (as written on paper)",
            "affiliation": "Author Affiliation (as written on paper) (the name of an organization with which an author can be affiliated)"
        }
    },
    "computer_student": {
        "course": {
            "course_id": "unique id number identifying courses",
            "courselevel": "course level (commonsense evidence:;  Level_300: basic or medium undergraduate courses.;  Level_400: high-level or harder undergraduate course.;  Level_500: professional or master/graduate courses)"
        },
        "person": {
            "p_id": "the unique number identifying each person",
            "professor": "whether the person is a professor (0: professor; 1: student)",
            "student": "whether the person is a student (0: professor; 1: student)",
            "hasposition": "whether the person has a position in the faculty (0: the person is not a faculty member; Common Sense evidence:; faculty_aff: affiliated faculty; faculty_eme: faculty employee)",
            "inphase": "the phase of qualification the person is undergoing (0: the person is not undergoing the phase of qualification)",
            "yearsinprogram": "the year of the program the person is at (0: the person is not in any programs; Common Sense evidence:; yearX means the person is on the Xth year of the program)"
        },
        "advisedby": {
            "p_id": "id number identifying each person",
            "p_id_dummy": "the id number identifying the advisor"
        },
        "taughtby": {
            "course_id": "the identification number identifying each course",
            "p_id": "the identification number identifying each person"
        }
    },
    "human_resources": {
        "location": {
            "locationid": "the unique id for location",
            "locationcity": "the location city",
            "address": "the detailed address of the location",
            "state": "the state abbreviation",
            "zipcode": "zip code of the location",
            "officephone": "the office phone number of the location"
        },
        "position": {
            "positionid": "the unique id for position",
            "positiontitle": "the position title",
            "minsalary": "minimum salary of this position ",
            "maxsalary": "maximum salary of this position "
        },
        "employee": {
            "ssn": "employee's ssn",
            "lastname": "employee's last name",
            "firstname": "employee's first name (commonsense evidence:; employee's full name is firstname lastname . )",
            "hiredate": "employee's hire date (yyyy-mm-dd)",
            "salary": "employee's salary (the unit is dollar per year)",
            "gender": "employee's gender",
            "performance": "employee's performance (Good / Average/ Poor)",
            "positionid": "the unique id for position",
            "locationid": "the unique id for location"
        }
    },
    "books": {
        "address_status": {
            "status_id": "the unique identifier of the status",
            "address_status": "the status of the address (commonsense evidence:; \tactive: the address is still in use; \tinactive: the address is not in use anymore)"
        },
        "author": {
            "author_id": "the unique identifier of the author",
            "author_name": "the name of the author"
        },
        "book_language": {
            "language_id": "the unique identifier of the language ",
            "language_code": "the language code (commonsense evidence:; A language code is a unique identifier for a specific language. It is typically used to identify a language in computing and other technical contexts. Some common language codes include \"en\" for English, \"fr\" for French, and \"es\" for Spanish. The specific codes used for each language can vary depending on the context and the system in which they are being used.)",
            "language_name": "the language name"
        },
        "country": {
            "country_id": "the unique identifier of the country",
            "country_name": "the country name"
        },
        "address": {
            "address_id": "the unique identifier of the address",
            "street_number": "the street number of the address (commonsense evidence:; The street number is typically used to identify a specific building or residence on a street, with higher numbers generally indicating a location further down the street from the starting point. For example, if a street starts at number 1 and goes up to number 100, a building with the number 50 would be closer to the starting point than a building with the number 75.)",
            "street_name": "the street name",
            "city": "the city where the address belongs",
            "country_id": "the id of the country where the address belongs  (commonsense evidence:; Maps to the country (country id). The full address of the customer is 'No.street_number street_name, city, country')"
        },
        "customer": {
            "customer_id": "the unique identifier of the customer",
            "first_name": "the first name of the customer",
            "last_name": "the last name of the customer (commonsense evidence:; A person's full name is the first name, middle name (if applicable), and last name. )",
            "email": "the email of the customer"
        },
        "customer_address": {
            "customer_id": "the id of the customer; Maps to customer(customer_id)",
            "address_id": "the id of the address; Maps to address(address_id)",
            "status_id": "the id of the address status (commonsense evidence:; A customer may have several addresses. If a customer has several addresses, the address that the status_id = 1 is the customer's current address that is in use. The other addresses with 2 as status_id is abandoned addresses. )"
        },
        "order_status": {
            "status_id": "the unique identifier of the order status",
            "status_value": "the status value (commonsense evidence:; The order statuses include order received, pending delivery, delivery in progress, delivered, canceled, and returned. )"
        },
        "publisher": {
            "publisher_id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "book": {
            "book_id": "the unique identifier of the book",
            "title": "the title of the book ",
            "isbn13": "the International Standard Book Number of the book (commonsense evidence:; An ISBN is a unique 13-digit number assigned to each book to identify it internationally. The ISBN13 of a book is the specific version of the ISBN that uses 13 digits. It is typically displayed on the back cover of a book, along with the barcode and other information.)",
            "language_id": "the id of the book language; Maps to book_language (language_id)",
            "num_pages": "the number of the pages",
            "publication_date": "the publication date of the book (commonsense evidence:; The publication date of a book can provide information about when the book was released to the public. This can be useful for understanding the context in which the book was written, as well as for determining how current or outdated the information in the book might be. Additionally, the publication date can provide insight into the age of the book and its potential value as a collectible.)",
            "publisher_id": "the id of the publisher; Maps to publisher (publisher_id)"
        },
        "book_author": {
            "book_id": "the id of the book; Maps to book(book_id)",
            "author_id": "the id of the author; Maps to author(author_id) (commonsense evidence:; Books with the same author id are written by the same author. )"
        },
        "shipping_method": {
            "method_id": "the unique identifier of the method",
            "method_name": "the method name",
            "cost": "the cost of the shipping method (commonsense evidence:; The main difference between the various shipping methods, such as standard, priority, express, and international, is the speed at which the item is delivered. Standard shipping is the slowest and least expensive option, while express and priority shipping are faster and more expensive. International shipping is for items that are being shipped to a destination outside of the country where they originated.)"
        },
        "cust_order": {
            "order_id": "the unique identifier of the customer order",
            "order_date": "the date of the order",
            "customer_id": "the id of the customer; Maps to customer(customer_Id) (commonsense evidence:; The number of orders ordered by the customer = the show-up times of the relative customer id in the table)",
            "shipping_method_id": "the id of the shipping method; Maps to shipping_method(method_id)",
            "dest_address_id": "the id of the destination address; Maps to address(address_id)"
        },
        "order_history": {
            "history_id": "the unique identifier of the order history",
            "order_id": "the id of the order; Maps to cust_order(order_id)",
            "status_id": "the id of the order; Maps to order_status(status_id) (commonsense evidence:; The order statuses include order received, pending delivery, delivery in progress, delivered, canceled, and returned.)",
            "status_date": "the date of the status updated "
        },
        "order_line": {
            "line_id": "the unique identifier of the order line",
            "order_id": "the id of the order; Maps to cust_order(order_id)",
            "book_id": "the id of the book; Maps to book(book_id)",
            "price": "the price of the order (commonsense evidence:; Even though the customer ordered the book with the same book id, the price could be different. The price of the order may be influenced by the shipping method, seasonal discount, and the number of books the customer ordered. )"
        }
    },
    "law_episode": {
        "episode": {
            "episode_id": "the unique identifier of the episode",
            "series": "the name of the series",
            "season": "a number indicating the season of the episode",
            "episode": "the sequential number of the episode within a specific season",
            "number_in_series": "the overall sequence number of episode in the entire series",
            "title": "the title of the episode",
            "summary": "a brief description of what happens in the episode",
            "air_date": "the date the episode was initially broadcast in the United States",
            "episode_image": "a link to an image from the episode",
            "rating": "the weighted average of the votes received for the episode (commonsense evidence: The higher rating means the episode has more positive viewer comments. )",
            "votes": "the total number of rating votes for the episode"
        },
        "keyword": {
            "episode_id": "the id of the episode",
            "keyword": "the keyword that is relevant for the episode"
        },
        "person": {
            "person_id": "the unique identifier for the person",
            "name": "the name of the person",
            "birthdate": "the date the person was born (if null, it means this birthdate of the person is not available)",
            "birth_name": "the name parents gave to the person shortly after birth",
            "birth_place": "the place where a person was born. (commonsense evidence: the birth place info is integrate if birth_name, birth_place, birth_region don't contain null value; the full birth place = birth_country +birth_region +birth_place)",
            "birth_region": "the geographical area describing where a person was born that is larger than the birth place",
            "birth_country": "the name of the country where the person was born (commonsense evidence: can ask questions about its corresponding continent: e.g.: ; USA --> North America)",
            "height_meters": "how tall the person is in meters",
            "nickname": "the nickname the person goes by"
        },
        "award": {
            "award_id": "the unique identifier for the award nomination",
            "organization": "the name of the organization that grants the award",
            "year": "the year of the nomination for  the award",
            "award_category": "the class of the award",
            "award": "the specific award",
            "series": "the name of the Law & Order series that has been nominated",
            "episode_id": "the id of the episode that has been nominated",
            "person_id": "the id of the person that has been nominated",
            "role": "the role that has been nominated",
            "result": "the nomination result (Nominee / Winner; commonsense evidence: 'Winner' means that the award was actually received. )"
        },
        "credit": {
            "episode_id": "the id of the episode to which the credit information pertains",
            "person_id": "the id of the person to which the credit information pertains",
            "category": "the kind of credit being recognized",
            "role": "the role for which the person is being recognized (If the credit is for an actor, this is the name of the character he or she portrayed (Dan Florek plays Donald Craven). Otherwise, this is the production role (producer, sound editor).)",
            "credited": "whether the credit was displayed in the credits at the end of the episode (commonsense evidence: A person may fill a role in an episode, but not show up in the on-screen credits. In this case, the work is said to be \"uncredited.\")"
        },
        "vote": {
            "episode_id": "the id of the episode",
            "stars": "a number between 1 and 10 indicating how much the viewer enjoyed the episode (commonsense evidence: The higher the number, the more the episode was enjoyed)",
            "votes": "The total number of viewers that gave the specific episode the number of stars indicated in the \"stars\" column",
            "percent": "The percent of viewers that gave the specific episode the number of stars indicated in the \"stars\" column"
        }
    },
    "codebase_comments": {
        "method": {
            "fullcomment": "full comment of this method",
            "summary": "summary of the method",
            "apicalls": "linearized sequenced of API calls",
            "commentisxml": "whether the comment is XML format or not (commonsense evidence:; ; 0: the comment for this method is not XML format.; 1: the comment for this method is XML format.)",
            "sampledat": "the time of sampling",
            "solutionid": "id number of solutions",
            "lang": "language code of method",
            "nametokenized": "tokenized name"
        },
        "methodparameter": {
            "id": "unique id number identifying method parameters",
            "methodid": "",
            "type": "type of the method",
            "name": "name of the method (commonsense evidence:; ; if the name is not a word like \"H\", \"z\", it means this method is not well-discriminative.)"
        },
        "repo": {
            "id": "unique id to identify repositories",
            "url": "github address of repository",
            "stars": "stars this repository has received",
            "forks": "forks that the repository has received",
            "watchers": "how many watchers of this repository",
            "processedtime": "how much processed time of downloading this repository"
        },
        "solution": {
            "id": "unique id to identify this solution",
            "repoid": "id of repository",
            "path": "path of this solution",
            "processedtime": "processed time",
            "wascompiled": "whether this solution needs to be compiled or not (; commonsense evidence:; 0: this solution needs to be compiled if user wants to implement it.; 1: this solution can be implemented without needs of compilation)"
        }
    },
    "public_review_platform": {
        "attributes": {
            "attribute_id": "unique number identifying the attribute",
            "attribute_name": "the name of the attribute"
        },
        "categories": {
            "category_id": "",
            "category_name": ""
        },
        "compliments": {
            "compliment_id": "",
            "compliment_type": ""
        },
        "days": {
            "day_id": "the unique id identifying the day of the week",
            "day_of_week": "indicate the day of the week"
        },
        "years": {
            "year_id": "the unique number identifying the year",
            "actual_year": "actual year"
        },
        "business_attributes": {
            "attribute_id": "id number identifying the attribute",
            "business_id": "id number identifying the business",
            "attribute_value": "sort of the attributes for each business (commonsense evidence: ; None, No or FALSE means the business does not have the attribute.)"
        },
        "business_categories": {
            "business_id": "id number identifying the business",
            "category_id": "id number identifying the categories"
        },
        "business_hours": {
            "business_id": "id number identifying the business",
            "day_id": "id number identifying each day of the week",
            "opening_time": "opening time of the business",
            "closing_time": "closing time of the business (commonsense evidence: ; how much time does this business open: closing_time - opening_time)"
        },
        "checkins": {
            "business_id": "id number identifying the business",
            "day_id": "id number identifying each day of the week",
            "label_time_0": "indicates times of checkins on a business (label_time_0: 12:00 a.m. ; label_time_23: 23:00 p.m. ; commonsense evidence: If the label_time recorded \"None\" for check-in on one day, then it means the business is closed on that day.)",
            "label_time_1": "",
            "label_time_2": "",
            "label_time_3": "",
            "label_time_4": "",
            "label_time_5": "",
            "label_time_6": "",
            "label_time_7": "",
            "label_time_8": "",
            "label_time_9": "",
            "label_time_10": "",
            "label_time_11": "",
            "label_time_12": "",
            "label_time_13": "",
            "label_time_14": "",
            "label_time_15": "",
            "label_time_16": "",
            "label_time_17": "",
            "label_time_18": "",
            "label_time_19": "",
            "label_time_20": "",
            "label_time_21": "",
            "label_time_22": "",
            "label_time_23": ""
        },
        "elite": {
            "user_id": "id number identifying the users",
            "year_id": "id number identifying the year"
        },
        "reviews": {
            "business_id": "the number identifying the business",
            "user_id": "the number identifying the user who comments on this business",
            "review_stars": "review on this business (5  Great experience ; 4  Good experience ; 3  Average experience ; 2  Bad experience ; 1 - Terrible experience)",
            "review_votes_funny": "the amount of funny votes that the user received for the review (commonsense evidence: If the reviews receive an Uber number of votes for funny, they will also receive an Uber, High or Medium number of votes for useful and cool.)",
            "review_votes_useful": "how many useful votes that the user received for the review",
            "review_votes_cool": "how many cool votes that the user received for the review",
            "review_length": "The length of the review written by the user"
        },
        "tips": {
            "business_id": "the number identifying the business",
            "user_id": "the number identifying the user who comments on this business",
            "likes": "how many likes of this tips (commonsense evidence: more likes mean this tip is more valuable)",
            "tip_length": "length of the tip"
        },
        "users_compliments": {
            "compliment_id": "the id number indicating the compliment",
            "user_id": "the id number indicating the user",
            "number_of_compliments": "how many compliments a user has received from other users (commonsense evidence: more number_of_compliments indicates this user is more welcome or he / she is high-quality user)"
        },
        "business": {
            "business_id": " unique number identifying the business",
            "active": "whether the business is still actively running until now (commonsense reasoning:; � \"True\": the business is still running ; � \"False\": the business is closed or not running now)",
            "city": "The city where the business is located",
            "state": "The state where the business is located",
            "stars": "ratings of the business (5 � Great experience ; 4 � Good experience ; 3 � Average experience ; 2 � Bad experience ; 1 - Terrible experience ; commonsense evidence: ; � the rating of >3 stars referring to \"wonderful experience\" or positive comments and vice versa)",
            "review_count": "the total number of reviews the users have written for a business (commonsense evidence: ; � If a business has a low total review count and a high star rating of >3, it means there is a low veracity of reviews. ; � higher review count and with high star rating of > 3 means this business is more popular or more appealing to users.)"
        },
        "users": {
            "user_id": "the unique id number identifying which user",
            "user_yelping_since_year": "the time when the user join Yelp",
            "user_average_stars": "the average ratings of all review",
            "user_votes_funny": "total number of funny votes sent by the user",
            "user_votes_useful": "how many useful votes created by the user",
            "user_votes_cool": "how many cool votes created by the user",
            "user_review_count": "total number of reviews the user has written",
            "user_fans": "total number of fans / followers the user has (commonsense evidence: Users with Uber number of fans indicate that they have sent an Uber number of cool, useful and funny votes.)"
        }
    },
    "ice_hockey_draft": {
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        }
    },
    "sales_in_weather": {
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        }
    },
    "talkingdata": {
        "app_all": {
            "app_id": ""
        },
        "app_events": {
            "event_id": "the id of events",
            "app_id": "the id of app users (each app_id represents for an user)",
            "is_installed": "whether this app is installed or not ( 0: no;  1: yes: installed)",
            "is_active": "whether this user is active or not"
        },
        "app_events_relevant": {
            "event_id": "",
            "app_id": "",
            "is_installed": "",
            "is_active": ""
        },
        "app_labels": {
            "app_id": "id of the app user",
            "label_id": "id of labels represents which behavior category that each user belongs to "
        },
        "events": {
            "event_id": "unique id number referring to the event",
            "device_id": "id number referring the device",
            "timestamp": "the time of the event",
            "longitude": "longitude  (commonsense evidence:; the location / coordinate = (longitude, latitude))",
            "latitude": "latitude"
        },
        "events_relevant": {
            "event_id": "",
            "device_id": "",
            "timestamp": "",
            "longitude": "",
            "latitude": ""
        },
        "gender_age": {
            "device_id": "unique number of devices",
            "gender": "gender of the user who uses this device",
            "age": "age of the user who uses this device ( M: male;;  F: female)",
            "group": "group of the ages"
        },
        "gender_age_test": {
            "device_id": ""
        },
        "gender_age_train": {
            "device_id": "",
            "gender": "",
            "age": "",
            "group": ""
        },
        "label_categories": {
            "label_id": "unique id of label",
            "category": "category of the label"
        },
        "phone_brand_device_model2": {
            "device_id": "the id number of the device",
            "phone_brand": "phone brand (commonsense evidence:; phone_brand has duplicated values since some device models belong to the same brand)",
            "device_model": "device model (commonsense evidence:; phone_brand has duplicated values since some device models belong to the same brand)"
        },
        "sample_submission": {
            "device_id": "",
            "f23-": "",
            "f24-26": "",
            "f27-28": "",
            "f29-32": "",
            "f33-42": "",
            "f43+": "",
            "m22-": "",
            "m23-26": "",
            "m27-28": "",
            "m29-31": "",
            "m32-38": "",
            "m39+": ""
        }
    },
    "cars": {
        "country": {
            "origin": "the unique identifier for the origin country",
            "country": "the origin country of the car"
        },
        "price": {
            "id": "unique ID for each car ",
            "price": "price of the car in USD"
        },
        "data": {
            "id": "unique ID for each car ",
            "mpg": "mileage of the car in miles per gallon (commonsense evidence: The car with higher mileage is more fuel-efficient. )",
            "cylinders": "the number of cylinders present in the car",
            "displacement": "engine displacement in cubic mm (commonsense evidence: sweep volume = displacement / no_of cylinders; )",
            "horsepower": "horse power associated with the car (commonsense evidence: horse power is the metric used to indicate the power produced by a car's engine - the higher the number, the more power is sent to the wheels and, in theory, the faster it will go. )",
            "weight": "weight of the car in lbs (commonsense evidence: A bigger, heavier vehicle provides better crash protection than a smaller)",
            "acceleration": "acceleration of the car in miles per squared hour",
            "model": "the year when the car model was introduced in the market (commonsense evidence: 0 --> 1970)",
            "car_name": "name of the car"
        },
        "production": {
            "id": "the id of the car",
            "model_year": "year when the car model was introduced in the market",
            "country": "country id to which the car belongs (Japan --> Asia ; USA --> North America)"
        }
    },
    "craftbeer": {
        "breweries": {
            "id": "unique ID of the breweries",
            "name": "name of the breweries",
            "city": "city",
            "state": "state"
        },
        "beers": {
            "id": "unique id number of beers",
            "brewery_id": "id number of the breweries",
            "abv": "alcohol by volume (Alcohol by VolumeABV is the most common measurement of alcohol content in beer; it simply indicates how much of the total volume of liquid in a beer is made up of alcohol. )",
            "ibu": "International Bitterness Units (IBU stands for International Bitterness Units, a scale to gauge the level of a beer's bitterness. More specifically, IBUs measure the parts per million of is humulone from hops in a beer, which gives beer bitterness.)",
            "name": "name of beers",
            "style": "style / sorts of beers",
            "ounces": "ounces"
        }
    },
    "citeseer": {
        "cites": {
            "cited_paper_id": "cited_paper_id is the ID of the paper being cited (cited_paper_id is the ID of the paper being cited)",
            "citing_paper_id": "citing_paper_id stands for the paper which contains the citation (citing_paper_id stands for the paper which contains the citation)"
        },
        "paper": {
            "paper_id": "unique string ID of the paper (unique string ID of the paper)",
            "class_label": ""
        },
        "content": {
            "paper_id": "unique string ID of the paper (unique string ID of the paper)",
            "word_cited_id": "rtype (whether each word in the vocabulary is present (indicated by 1) or absent (indicated by 0) in the paper)"
        }
    },
    "book_publishing_company": {
        "authors": {
            "au_id": "unique number identifying authors",
            "au_lname": "author last name",
            "au_fname": "author first name",
            "phone": "phone number",
            "address": "address",
            "city": "city ",
            "state": "state ",
            "zip": "zip code",
            "contract": "contract status (commonsense evidence:; 0: not on the contract; 1: on the contract)"
        },
        "jobs": {
            "job_id": "unique id number identifying the jobs",
            "job_desc": "job description (commonsense evidence:; staff should be mentioned)",
            "min_lvl": "min job level",
            "max_lvl": "max job level (commonsense evidence:; level range for jobs mentioned in job_desc is (min_lvl, max_lvl))"
        },
        "publishers": {
            "pub_id": "unique id number identifying publisher",
            "pub_name": "publisher name",
            "city": "city ",
            "state": "state",
            "country": "country"
        },
        "employee": {
            "emp_id": "unique number identifying employees ",
            "fname": "first name of employees",
            "minit": "middle name",
            "lname": "last name",
            "job_id": "number identifying jobs",
            "job_lvl": "job level (commonsense evidence:; higher value means job level is higher)",
            "pub_id": "id number identifying publishers",
            "hire_date": "hire date"
        },
        "pub_info": {
            "pub_id": "unique id number identifying publications",
            "logo": "logo of publications",
            "pr_info": "publisher's information"
        },
        "stores": {
            "stor_id": "unique id number of stores",
            "stor_name": "",
            "stor_address": "",
            "city": "city name",
            "state": "state code",
            "zip": "zip code"
        },
        "discounts": {
            "discounttype": "discount type",
            "stor_id": "store id",
            "lowqty": "low quantity (quantity floor) (commonsense evidence: ; The minimum quantity to enjoy the discount)",
            "highqty": "high quantity (max quantity) (commonsense evidence: ; The maximum quantity to enjoy the discount)",
            "discount": "discount"
        },
        "titles": {
            "title_id": "title id",
            "title": "title",
            "type": "type of titles",
            "pub_id": "publisher id",
            "price": "price",
            "advance": "pre-paid amount",
            "royalty": "royalty",
            "ytd_sales": "year to date sales",
            "notes": "notes if any (commonsense evidence:; had better understand notes contents and put some of them into questions if any)",
            "pubdate": "publication date"
        },
        "roysched": {
            "title_id": "unique id number identifying title",
            "lorange": "low range",
            "hirange": "high range",
            "royalty": "royalty"
        },
        "sales": {
            "stor_id": "id number identifying stores",
            "ord_num": "id number identifying the orders",
            "ord_date": "the date of the order",
            "qty": "quantity of sales ",
            "payterms": "payments",
            "title_id": "id number identifying titles"
        },
        "titleauthor": {
            "au_id": "author id",
            "title_id": "title id",
            "au_ord": "author ordering",
            "royaltyper": "royaltyper"
        }
    },
    "social_media": {
        "location": {
            "locationid": "unique id of the location",
            "country": "the country",
            "state": "the state",
            "statecode": "state code",
            "city": "the city"
        },
        "user": {
            "userid": "the unique id of the user",
            "gender": "user's gender (Male / Female / Unknown)"
        },
        "twitter": {
            "tweetid": "the unique id of the tweet",
            "weekday": "the weekday that the tweet has been posted",
            "hour": "the hour that the tweet has been posted",
            "day": "the day that the tweet has been posted",
            "lang": "the language of the tweet",
            "isreshare": "whether the tweet is reshared (commonsense evidence:; A reshared tweet is when someone reshares or forwards a post to their own Twitter ; \ttrue: the tweet is reshared; \tfalse: the tweet isn't reshared)",
            "reach": "the reach of the tweet (commonsense evidence:; reach counts the number of unique users who have seen your tweet)",
            "retweetcount": "the retweet count",
            "likes": "the number of likes ",
            "klout": "the klout of the tweet",
            "sentiment": "the sentiment of the tweet (commonsense evidence:; \t>0: the sentiment of the tweet is positive. ; \t=0: the sentiment of the tweet is neutral.; \t<0: the sentiment of the tweet is negative. )",
            "text": "the text of the tweet",
            "locationid": "the location id of the poster",
            "userid": "the user id of the poster"
        }
    },
    "simpson_episodes": {
        "episode": {
            "episode_id": "A unique identifier for episodes",
            "season": "the season of the episode",
            "episode": "the episode number of the episode",
            "number_in_series": "the number in series",
            "title": "the title of the episode",
            "summary": "the summary of the episode",
            "air_date": "the air date of the episode (YYYY-MM-DD)",
            "episode_image": "the image of episode",
            "rating": "the rating of episode (0.0 - 10.0; commonsense evidence:; Higher ratings mean higher quality and better response.;  excellent: 7.0 < rating <= 10.0;  average: 5.0 < rating <= 7.0 ;  bad: 0.0 < rating <= 5.0; not bad: average, excellent)",
            "votes": "the votes of episode (commonsense evidence:; Higher votes mean more audience supports (or popular).)"
        },
        "person": {
            "name": "the name of the crew",
            "birthdate": "the birth date of the crew (YYYY-MM-DD)",
            "birth_name": "the birth name of the crew",
            "birth_place": "the birth place of the crew",
            "birth_region": "the birth region of the crew",
            "birth_country": "the birth country of the crew",
            "height_meters": "the height of the crew (the unit is meter)",
            "nickname": "the nickname of the crew"
        },
        "award": {
            "award_id": "the unique id for the award",
            "organization": "the organization that holds the award",
            "year": "year of award",
            "award_category": "the category of the award",
            "award": "the name of the award",
            "person": "the person who gets the award",
            "role": "the role of the honoree",
            "episode_id": "S stands for 'Season' and E stands for 'Episode'",
            "season": "the season of the awarded work",
            "song": "the theme song of the awarded work",
            "result": "the final award result (commonsense evidence:;  Nominee: the prospective recipient of the award. The nominee are people who were nominated but didn't win the award. ;  Winner: the people who finally won the award)"
        },
        "character_award": {
            "award_id": "A unique identifier for the award",
            "character": "the name of the awarded character"
        },
        "credit": {
            "episode_id": "A unique identifier for episodes",
            "category": "the category of the credit",
            "person": "the name of cast and crew members",
            "role": "the role of the person"
        },
        "keyword": {
            "episode_id": "A unique identifier for episodes",
            "keyword": "the keywords of episode"
        },
        "vote": {
            "episode_id": "A unique identifier for episodes",
            "stars": "the star score of the episode (1-10; commonsense evidence:; Star classification is a type of rating scale. The lowest star is 1 which means the worst, and the highest star is 10 which means the best. )",
            "votes": "the number of votes of the star score",
            "percent": "the percent of the vote number of the star score (commonsense evidence:; percent = the number of votes for the star / the total amount of votes for all stars )"
        }
    },
    "regional_sales": {
        "customers": {
            "customerid": "unique id number indicating which customer",
            "customer names": "the name of the customer"
        },
        "products": {
            "productid": "unique id number representing each product",
            "product name": "name of the product"
        },
        "regions": {
            "statecode": "the unique code identifying the state",
            "state": "full state name",
            "region": "the region where the state is located in"
        },
        "sales team": {
            "salesteamid": "unique sales team id",
            "sales team": "sales team names",
            "region": "the region where the state is located in"
        },
        "store locations": {
            "storeid": "unique store id",
            "city name": "City Name",
            "county": "full county name",
            "statecode": "state code",
            "state": "full state name",
            "type": "type of the store (City; Town; CDP (customer data platform); Unified Government; Consolidated Government; Other; Township; Urban County ; Borough; Metropolitan Government)",
            "latitude": "Latitude",
            "longitude": "Longitude (commonsense evidence:; coordinates or detailed position: (Latitude, Longitude))",
            "areacode": "",
            "population": "Population",
            "household income": "Household Income",
            "median income": "Median Income",
            "land area": "Land Area",
            "water area": "Water Area",
            "time zone": "Time Zone"
        },
        "sales orders": {
            "ordernumber": "the unique number identifying the order",
            "sales channel": "Sales Channel ( In-Store;  Online;  Distributor;  Wholesale)",
            "warehousecode": "Warehouse Code (commonsense evidence:; if the warehouse code is the same, it means this product is shipped from the same ware house)",
            "procureddate": "Procured Date (commonsense evidence:; date: month/date/year, 17--> 2017)",
            "orderdate": "Order Date",
            "shipdate": "Ship Date",
            "deliverydate": "Delivery Date (commonsense evidence:; the difference \"DeliveryDate - OrderDate\" is smaller, it means faster delivery)",
            "currencycode": "Currency Code (USD)",
            "_salesteamid": "Sales Team ID",
            "_customerid": "_Customer ID",
            "_storeid": "_Store ID",
            "_productid": "_Product ID",
            "order quantity": "Order Quantity (commonsense evidence:; 1 - 8:; higher means order quantity is higher or customer needs more)",
            "discount applied": "Discount Applied (commonsense evidence:; 0.2: 20% discount)",
            "unit price": "",
            "unit cost": " (commonsense evidence:; net profit = Unit Price - Unit Cost)"
        }
    },
    "music_platform_2": {
        "runs": {
            "run_at": "The date and time of the podcast review creation.",
            "max_rowid": "The id of max row of this run.",
            "reviews_added": "The number of reviews added in this run."
        },
        "podcasts": {
            "podcast_id": "The unique id of the podcast ",
            "itunes_id": "The unique id of the itunes.",
            "slug": "The slug of the podcast. (commonsense evidence: ; It usually has the same name with the \"title\" column. )",
            "itunes_url": "The iTunes url of the podcast. (commonsense evidence: ; Can visit the webpage of the podcast by clicking the itunes_url.)",
            "title": "The title of the podcast. (commonsense evidence: ; It usually has a very similar name to the \"slug\" column. )"
        },
        "reviews": {
            "podcast_id": "The unique id of the podcast ",
            "title": "The title of the podcast review. (commonsense evidence: ; This usually is the abstract of the whole review.)",
            "content": "The content of the podcast review. (commonsense evidence: ; This usually is the detailed explanation of the podcast review title.)",
            "rating": "The rating of the podcast review. (commonsense evidence: ; Allowed values: 0 to 5. ; This rating is highly related with \"title\" and \"content\".)",
            "author_id": "The author id of the podcast review.",
            "created_at": "The date and time of the podcast review creation. (In the format of \"Date time\". e.g., 2018-05-09T18:14:32-07:00)"
        },
        "categories": {
            "podcast_id": "The unique id of the podcast ",
            "category": "category of the podcast (commonsense evidence: ; This usually represents the topic of the podcast.)"
        }
    },
    "movie_3": {
        "film_text": {
            "film_id": "unique id number identifying the film",
            "title": "title of the film",
            "description": "main content of the film"
        },
        "actor": {
            "actor_id": "unique id number identifying the actor",
            "first_name": "First name of the actor",
            "last_name": "Last name of the actor",
            "last_update": "The time of the latest update"
        },
        "address": {
            "address_id": "unique id number identifying the address",
            "address": "The first address line",
            "address2": "the second address line (commonsense evidence:; address2 is the additional address if any)",
            "district": "",
            "city_id": "",
            "postal_code": " (a postal code is a series of letters or digits or both, sometimes including spaces or punctuation, included in a postal address for the purpose of sorting mail.)",
            "phone": "phone number",
            "last_update": "The time of the latest update"
        },
        "category": {
            "category_id": "unique id number identifying the category",
            "name": "name of the category",
            "last_update": "The time of the latest update"
        },
        "city": {
            "city_id": "unique id number identifying the city",
            "city": "name of the city",
            "country_id": "number identifying the country which the city belongs to",
            "last_update": "The time of the latest update"
        },
        "country": {
            "country_id": "unique id number identifying the country",
            "country": "number identifying the country (commonsense evidence:;  Africa: (Algeria, Angola, Cameroon, Chad, Congo, The Democratic Republic of the, Egypt, Ethiopia, Gambia...);  Asia: (Afghanistan, Armenia, Azerbaijan, ; Bahrain, Bangladesh, Brunei, Cambodia, China, Hong Kong, India, Indonesia, Iran, Iraq, Israel...);  Oceania (American Samoa, Australia, French Polynesia...);  North America (Anguilla, Canada, Dominican Republic, Ecuador, Greenland...);  South America (Argentina, Bolivia, Brazil, Chile, ; Colombia, Ecuador, French Guiana....);  Europe (Austria, Belarus, Bulgaria, Czech Republic, Estonia, Faroe Islands, Finland, France, Germany, Greece, Holy See (Vatican City State), Hungary, Italy...); details: https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; question can mention i.e., Europe instead of Austria, etc.)",
            "last_update": "The time of the latest update"
        },
        "customer": {
            "customer_id": "unique id number identifying the country",
            "store_id": "unique id number identifying the store",
            "first_name": "First name of the customer",
            "last_name": "Last name of the customer",
            "email": "Email address of the customer",
            "address_id": "Address id number of the customer.",
            "active": "Wether the customer is active or not. (1: active; 0: not active)",
            "create_date": "The date when the record is created.",
            "last_update": "The time of the latest update"
        },
        "film": {
            "film_id": "unique id number identifying the film",
            "title": "title of the film",
            "description": "main content of the film",
            "release_year": "the year when the film is released",
            "language_id": "the language id of the film",
            "original_language_id": "the original language id of the film",
            "rental_duration": "how long this film can be rent at once (commonsense evidence:; days; price / day = rental_rate / retal_duration)",
            "rental_rate": "the rate of renting this film (higher -> expensive)",
            "length": "Duration time of the film screening (minutes)",
            "replacement_cost": "cost of replacing this film",
            "rating": "The Motion Picture Association film rating (commonsense evidence:; G ?General Audiences; PG ? Parental Guidance Suggested; PG-13 ? Parents Strongly Cautioned; R ? Restricted; NC-17 ? Adults Only)",
            "special_features": "features of this film",
            "last_update": "The time of the latest update"
        },
        "film_actor": {
            "actor_id": "unique id number identifying the actor",
            "film_id": "id number identifying the film",
            "last_update": "The time of the latest update"
        },
        "film_category": {
            "film_id": "unique id number identifying the film",
            "category_id": "id number identifying the category",
            "last_update": "The time of the latest update"
        },
        "inventory": {
            "inventory_id": "unique id number identifying the inventory",
            "film_id": "unique id number identifying the film",
            "store_id": " id of the store",
            "last_update": "the last update time of the film"
        },
        "language": {
            "language_id": "unique id number identifying the language",
            "name": "name of the language",
            "last_update": "The time of the latest update"
        },
        "payment": {
            "payment_id": "unique id number identifying the payment",
            "customer_id": "unique id number identifying the customer",
            "staff_id": "unique id number identifying the staff",
            "rental_id": "unique id number identifying the rental",
            "amount": "unique id number identifying the amount",
            "payment_date": "the date when the payment ocurs",
            "last_update": "The time of the latest update"
        },
        "rental": {
            "rental_id": "unique id number identifying the rental",
            "rental_date": "date when the rental occurs",
            "inventory_id": "id number identifying the inventory",
            "customer_id": "id number identifying the customer",
            "return_date": "date when the rental returns",
            "staff_id": "id number identifying the staff",
            "last_update": "The time of the latest update"
        },
        "staff": {
            "staff_id": "unique id number identifying the staff",
            "first_name": "First name of the actor",
            "last_name": "Last name of the actor (full name = (first name, last name))",
            "address_id": "id number identifying the address",
            "picture": "",
            "email": "",
            "store_id": "id number identifying the store",
            "active": "Whether the staff is active or not. (1: active; 0: not active)",
            "username": "username to login the staff",
            "password": "password to login the staff",
            "last_update": "The time of the latest update"
        },
        "store": {
            "store_id": "unique id number identifying the store",
            "manager_staff_id": "id number identifying the manager staff",
            "address_id": "id number identifying the address",
            "last_update": "The time of the latest update"
        }
    },
    "shakespeare": {
        "chapters": {
            "id": "unique id number identifying the chapter",
            "act": "An act is a major division of a theatre work, including a play, film, opera, or musical theatre (commonsense evidence:; An act can consist of one or more scenes)",
            "scene": "A scene is a dramatic part of a story, at a specific time and place, between specific characters.",
            "description": "textual description of the chapter.",
            "work_id": "id number identifying the work"
        },
        "characters": {
            "id": "unique id number identifying the characters",
            "charname": "character name",
            "abbrev": "abbreviation. An abbreviation is a shortened form of a word or phrase.",
            "description": "description of the character."
        },
        "paragraphs": {
            "id": "unique id number identifying the paragraphs",
            "paragraphnum": "unique id number identifying the paragraph number",
            "plaintext": "main content of the paragraphs",
            "character_id": "unique id number identifying the mentioned character",
            "chapter_id": "unique id number identifying the related chapter (commonsense evidence:; if number of the paragraphs is > 150, then it means this is a long chapter)"
        },
        "works": {
            "id": "unique id number identifying the work",
            "title": "title of the work ( commonsense evidence:; the short title or abbreviated title; )",
            "longtitle": "full title of the work",
            "date": "date of the work",
            "genretype": "the type of the genere"
        }
    },
    "retail_world": {
        "categories": {
            "categoryid": "the unique id for the category",
            "categoryname": "the category name",
            "description": "the detailed description of the category"
        },
        "customers": {
            "customerid": "the unique id for customers",
            "customername": "the customer name",
            "contactname": "the contact person's name representing the company",
            "address": "the address of the customer",
            "city": "the city where the customer is located",
            "postalcode": "the postal code",
            "country": "the country"
        },
        "employees": {
            "employeeid": "the unique id for employees",
            "lastname": "the employee's last name",
            "firstname": "the employee's first name (commonsense evidence:; the employee's full name is 'first_name last_name'. ; )",
            "birthdate": "the birth date of the employee",
            "photo": "the photo of the employee",
            "notes": "some additional information of the employee"
        },
        "shippers": {
            "shipperid": "the unique id for shippers",
            "shippername": "the shipped company name",
            "phone": "the phone of the company"
        },
        "suppliers": {
            "supplierid": "the unique id for suppliers",
            "suppliername": "the supplier name",
            "contactname": "the contact person's name representing the company",
            "address": "the address of the supplier",
            "city": "the city where the supplier is located",
            "postalcode": "the postal code",
            "country": "the country",
            "phone": "the phone number"
        },
        "products": {
            "productid": "the unique id for products",
            "productname": "the name of the product",
            "supplierid": "the unique id for supplier",
            "categoryid": "the unique id for the product category",
            "unit": "the unit of the product",
            "price": "the price"
        },
        "orders": {
            "orderid": "the unique id for orders",
            "customerid": "the unique id for customers",
            "employeeid": "the unique id for employees",
            "orderdate": "the order date",
            "shipperid": "the id of the shipper"
        },
        "orderdetails": {
            "orderdetailid": "id of the order detail",
            "orderid": "the unique id for orders",
            "productid": "the unique id for products",
            "quantity": "the quantity of the ordered products"
        }
    },
    "food_inspection": {
        "businesses": {
            "business_id": "the unique id of the business ",
            "name": "the name of the eatery",
            "address": "the eatery address",
            "city": "the city where the eatery is located in",
            "postal_code": "the postal code of the eatery",
            "latitude": "the latitude of the position",
            "longitude": "the longitude of the position (commonsense evidence:; the distance between eatery A and eatery B = \\sqrt{(latitude_A-latitude_B)^2 + (longitude_A-longitude_B)^2})",
            "phone_number": "the phone number of the eatery",
            "tax_code": "the tax code of the eatery",
            "business_certificate": "the business certificate number",
            "application_date": "the application date of the eatery",
            "owner_name": "the owner's name",
            "owner_address": "the owner's address",
            "owner_city": "the city where the owner is located",
            "owner_state": "the state where the owner is located",
            "owner_zip": "the zip code of the owner"
        },
        "inspections": {
            "business_id": "the unique id of the business ",
            "score": "the inspection score (commonsense evidence:; The scores range from 1 to 100, where 100 means that the establishment meets all required standards. )",
            "date": "the inspection date",
            "type": "the inspection type"
        },
        "violations": {
            "business_id": "the unique id of the business ",
            "date": "the date of the violation",
            "violation_type_id": "the unique type id of the violation",
            "risk_category": "risk category; High / Moderate / Low risk (commonsense evidence:; High risks have more safety and health hazards than low risks)",
            "description": "the description of the violation"
        }
    },
    "movielens": {
        "users": {
            "userid": "unique identifier number of users",
            "age": "age (1: 1-18 years old; ; 18: 18-25 years old; ; 25: 25-35 years old; ; 35: 35-45 years old; ; 45: 45-50 years old; ; 50: 50-56 years old; ; 56: over 56 years old)",
            "u_gender": "user gender (M / F: Male / Female)"
        },
        "directors": {
            "directorid": "unique identification number of actors directors",
            "avg_revenue": "average revenue (higher value is the higher, lower is the lower)"
        },
        "actors": {
            "actorid": "unique identificator number of actors",
            "a_gender": "actor gender (M: male;; F: female)",
            "a_quality": "actor quality (higher is better, lower is the worse)"
        },
        "movies": {
            "movieid": "unique identifier number of movies",
            "year": "year (4: newest;; ; 1: oldest; ; higher value means newer published date)",
            "isenglish": "is English",
            "country": "country",
            "runningtime": ""
        },
        "movies2actors": {
            "movieid": "identifier number of movies",
            "actorid": "identifier number of actors",
            "cast_num": "cast number"
        },
        "movies2directors": {
            "movieid": "identifier number of movies",
            "directorid": "identifier number of directors",
            "genre": "genre of movies"
        },
        "u2base": {
            "userid": "identifier number of users",
            "movieid": "identifier number of movie",
            "rating": "ratings of movies (higher value refers to higher satisfactory, each value is the rating of movies left by users.)"
        }
    },
    "menu": {
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        }
    },
    "disney": {
        "characters": {
            "movie_title": "unique title of the movie",
            "release_date": "The release date of the movie.",
            "hero": "The main character of the movie.  (commonsense evidence:; ; round role)",
            "villian": "The villain of the movie. (a character whose evil actions or motives are important to the plot. )",
            "song": "A song associated with the movie."
        },
        "director": {
            "name": "unique movie name",
            "director": "the name of the director (one director may have multiple movies.; ; more movies --> this director is more productive)"
        },
        "movies_total_gross": {
            "movie_title": "movie title",
            "release_date": "release date",
            "genre": "genre of the movie",
            "mpaa_rating": "Motion Picture Association of America of the disney movie (commonsense evidence:; â¢ G: general audience; â¢ PG: mature audiences or parental guidance suggested; â¢ R: restricted: no children under 17 allowed without parents or adult guardians; â¢ PG-13: PARENTS STRONGLY CAUTIONED. Some material may be inappropriate for children under 13; movies need accompany with parents: PG, PG-13, PG-17;; if \"Not rated\" or null, it means this film can show only gets permissions by theatre management; if the film can show without need of permissions of theatre management, the MPAA_rating should not be \"Not rated\" or null)",
            "total_gross": "The total gross of the movie. (commonsense evidence:; more total_gross--> more popular movie)",
            "inflation_adjusted_gross": "The inflation-adjusted gross of the movie. (commonsense evidence:; estimated inflation rate = inflation_adjusted_gross / total_gross;; the current gross = inflation_adjusted_gross)"
        },
        "revenue": {
            "year": "The year the movie was released.",
            "studio entertainment[ni 1]": "The studio entertainment segment of the Walt Disney Company.",
            "disney consumer products[ni 2]": "The consumer products segment of the Walt Disney Company.",
            "disney interactive[ni 3][rev 1]": "The interactive segment of the Walt Disney Company. ",
            "walt disney parks and resorts": "The parks and resorts segment of the Walt Disney Company.",
            "disney media networks": "The media networks segment of the Walt Disney Company.",
            "total": "The total box office gross for the movie."
        },
        "voice-actors": {
            "character": "The unique name of the character. ",
            "voice-actor": "The name of the voice actor.",
            "movie": "The name of the movie."
        }
    },
    "chicago_crime": {
        "community_area": {
            "community_area_no": "unique community area number",
            "community_area_name": "community area name",
            "side": "district ",
            "population": "population of the community"
        },
        "district": {
            "district_no": "unique number identifying the district",
            "district_name": " name of the district",
            "address": "Street address of the police district building",
            "zip_code": "ZIP code of the police district building",
            "commander": "Name of the district's commanding officer (commonsense evidence:; ; the person who should be responsible for the crime case. )",
            "email": "Email address to contact district administrators",
            "phone": "Main telephone number for the district",
            "fax": "Fax number for the district",
            "tty": "Number of the district teletype machine. (A teletype machine is a device that lets people who are deaf, hard of hearing, or speech-impaired use the telephone to communicate, by allowing them to type text messages.)",
            "twitter": "The district twitter handle.  (Twitter is a social networking service on which users post and interact with brief messages known as \"tweets\")"
        },
        "fbi_code": {
            "fbi_code_no": "unique code made by fbi to classify the crime cases",
            "title": "Short description of the kind of crime",
            "description": "Detailed description of the kind of crime",
            "crime_against": "States who the crime is against.  (Values are Persons, Property, Society, or \"Persons and Society\")"
        },
        "iucr": {
            "iucr_no": "Unique identifier for the incident classification",
            "primary_description": "The general description of the incident classification (commonsense evidence:; ; It's the general description )",
            "secondary_description": "The specific description of the incident classification (commonsense evidence:; ; It's the specific description )",
            "index_code": "Uses values \"I\" and \"N\" to indicate crimes  (commonsense evidence:; ; â¢ \"Indexed\" (severe, such as murder, rape, arson, and robbery); ; â¢ \"Non-Indexed\" (less severe, such as vandalism, weapons violations, and peace disturbance) )"
        },
        "neighborhood": {
            "neighborhood_name": "The neighborhood name as used in everyday communication",
            "community_area_no": "The community area in which most of the neighborhood is located"
        },
        "ward": {
            "ward_no": "",
            "alderman_first_name": "",
            "alderman_last_name": "",
            "alderman_name_suffix": "",
            "ward_office_address": "",
            "ward_office_zip": "",
            "ward_email": "",
            "ward_office_phone": "",
            "ward_office_fax": "",
            "city_hall_office_room": "",
            "city_hall_office_phone": "",
            "city_hall_office_fax": "",
            "population": ""
        },
        "crime": {
            "report_no": "unique Numeric identifier of the crime report.",
            "case_number": "Case number assigned to the reported crime. (commonsense evidence: ; ; There is usually one case number for any reported crime except in the case of multiple homicide where a single report will produce one case number for each victim; ; if case_number appears > 1, it means this is a multiple homicide)",
            "date": "Date of the occurrence of the incident being reported",
            "block": "A redacted address indicating in which city block the incident occurred",
            "iucr_no": "Illinois Uniform Crime Reporting code: a four digit code used to classify criminal incidents when taking reports.",
            "location_description": "A description of the kind of area where incident occurred",
            "arrest": "A true/false value indicating if an arrest has been made",
            "domestic": "A true/false value indicating if the incident is as case of domestic violence",
            "beat": "",
            "district_no": "A number indicating the geographic subdivision of the police district where the incident occurred",
            "ward_no": "A two digit number identifying the legislative district (ward) where the incident occurred.",
            "community_area_no": "A number identifying one of 77 geographic areas where the incident occurred",
            "fbi_code_no": "A code identifying the type of crime reported according to the classification scheme used by the FBI.",
            "latitude": "The latitude where incident is reported to have occurred.",
            "longitude": "The longitude where incident is reported to have occurred. (commonsense evidence: ; ; The precise location / coordinate: combines the longitude and latitude for plotting purposes. (latitude, longitude))"
        }
    },
    "mondial_geo": {
        "borders": {
            "country1": "a country code",
            "country2": "a country code",
            "length": "length of the border between country1 and country2"
        },
        "city": {
            "name": "name of city",
            "country": "the code of the country where it belongs to",
            "province": "the name of the province where it belongs to",
            "population": "population of the city",
            "longitude": "geographic longitude",
            "latitude": "geographic latitude"
        },
        "continent": {
            "name": "name of the continent",
            "area": "total area of the continent."
        },
        "country": {
            "name": "the country name",
            "code": "country code",
            "capital": "the name of the capital,",
            "province": "the province where the capital belongs to,",
            "area": "the total area,",
            "population": "the population number."
        },
        "desert": {
            "name": "the name of the desert",
            "area": "the total area of the desert",
            "longitude": "Longitude",
            "latitude": "Latitude (commonsense evidence:; ; coordinate: (Longitude, Latitude))"
        },
        "economy": {
            "country": "the country code",
            "gdp": "gross domestic product",
            "agriculture": "percentage of agriculture of the GDP",
            "service": "percentage of services of the GDP,",
            "industry": "percentage of industry of the GDP",
            "inflation": "inflation rate (per annum),"
        },
        "encompasses": {
            "country": "a country code",
            "continent": "the continent name.",
            "percentage": "how much of the area of a country belongs to the continent (%)"
        },
        "ethnicgroup": {
            "country": "the country code",
            "name": "name of the language",
            "percentage": "percentage of the language in this country. (%)"
        },
        "geo_desert": {
            "desert": "the name of the desert",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_estuary": {
            "river": "the name of the river",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_island": {
            "island": "the name of the island",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_lake": {
            "lake": "the name of the lake",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_mountain": {
            "mountain": "the name of the mountain",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_river": {
            "river": "the name of the river",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_sea": {
            "sea": "the name of the sea",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "geo_source": {
            "river": "the name of the river",
            "country": "the country code where it is located",
            "province": "the province of this country"
        },
        "island": {
            "name": "the name of the island",
            "islands": "the group of islands where it belongs to",
            "area": "the area of the island",
            "height": "the maximal elevation of the island",
            "type": " the type of the island",
            "longitude": "Longitude",
            "latitude": "Latitude"
        },
        "islandin": {
            "island": "",
            "sea": "",
            "lake": "",
            "river": ""
        },
        "ismember": {
            "country": "",
            "organization": "",
            "type": ""
        },
        "lake": {
            "name": "the name of the lake",
            "area": "the total area of the lake",
            "depth": " the depth of the lake",
            "altitude": "the altitude (above sea level) of the lake",
            "type": "the type of the lake",
            "river": "the river that flows out of the lake",
            "longitude": "longitude of lake ",
            "latitude": "latitude of lake "
        },
        "language": {
            "country": "the country code",
            "name": "name of the language",
            "percentage": "percentage of the language in this country (%)"
        },
        "located": {
            "city": "the name of the city",
            "province": "the province where the city belongs to",
            "country": "the country code where the city belongs to",
            "river": " the river where it is located at",
            "lake": "the lake where it is located at",
            "sea": "the sea where it is located at (Note that for a given city, there can be several lakes/seas/rivers where it is located at.)"
        },
        "locatedon": {
            "city": "the name of the city",
            "province": " the province where the city belongs to",
            "country": "the country code where the city belongs to",
            "island": " the island it is (maybe only partially) located on"
        },
        "mergeswith": {
            "sea1": "the name of the mountain",
            "sea2": "the country code where it is located"
        },
        "mountain": {
            "name": "the name of the mountain",
            "mountains": "the mountains where it belongs to",
            "height": " the maximal elevation of the summit of the mountain",
            "type": " the sea where it finally flows to ((note that at most one out of {river,lake,sea} can be non-null)",
            "longitude": "the length of the river",
            "latitude": "the longitude of its source"
        },
        "mountainonisland": {
            "mountain": "the name of the mountain",
            "island": "the name of the island"
        },
        "organization": {
            "abbreviation": " its abbreviation",
            "name": "the full name of the organization",
            "city": "the city where the headquarters are located",
            "country": " the code of the country where the headquarters are located",
            "province": "the name of the province where the headquarters are located,",
            "established": "date of establishment"
        },
        "politics": {
            "country": "the country code",
            "independence": "date of independence (Commonsense evidence:; ; if the value is null or empty, it means this country is not independent)",
            "dependent": " the country code where the area belongs to",
            "government": "type of government"
        },
        "population": {
            "country": "the country code",
            "population_growth": "population growth rate (per annum)",
            "infant_mortality": " infant mortality (per thousand)"
        },
        "province": {
            "name": "the name of the administrative division",
            "country": " the country code where it belongs to",
            "population": "the population of the province",
            "area": "the total area of the province,",
            "capital": "the name of the capital (if null, doesn't have capital)",
            "capprov": "the name of the province where the capital belongs to (commonsense evidence:; ; note that capprov is not necessarily equal to name)"
        },
        "religion": {
            "country": "the country code",
            "name": "name of the religion",
            "percentage": "percentage of the language in this country (%)"
        },
        "river": {
            "name": "the name of the river",
            "river": "the river where it finally flows to",
            "lake": "the lake where it finally flows to",
            "sea": " the sea where it finally flows to ((note that at most one out of {river,lake,sea} can be non-null)",
            "length": "the length of the river",
            "sourcelongitude": "the longitude of its source",
            "sourcelatitude": "the latitude of its source",
            "mountains": "the mountains where its source is located",
            "sourcealtitude": " the elevation (above sea level) of its source",
            "estuarylongitude": "the coordinates of its estuary",
            "estuarylatitude": "the latitude of its estuary"
        },
        "sea": {
            "name": "the name of the sea",
            "depth": "the maximal depth of the sea"
        },
        "target": {
            "country": "",
            "target": ""
        }
    },
    "olympics": {
        "city": {
            "id": "the unique identifier of the city",
            "city_name": "the name of the city"
        },
        "games": {
            "id": "the unique identifier of the game",
            "games_year": "the year of the game",
            "games_name": "the name of the game (commonsense evidence:; games_name is 'games_year season')",
            "season": "the season of the game (commonsense evidence:; The Olympics are held every four years and include both summer and winter games. The summer games include a wide range of sports, such as athletics, swimming, and gymnastics, while the winter games feature sports that are played on ice or snow, such as ice hockey, figure skating, and skiing.)"
        },
        "games_city": {
            "games_id": "the id of the game; Maps to games(id)",
            "city_id": "the id of the city that held the game; Maps to city(id)"
        },
        "medal": {
            "medal_name": "the name of the medal"
        },
        "noc_region": {
            "noc": "the NOC code of the region (commonsense evidence:; A NOC code is a number used by the International Olympic Committee (IOC) to identify each of the national Olympic committees (NOCs) from around the world. )",
            "region_name": "the name of the region"
        },
        "person": {
            "id": "the unique identifier of the person",
            "full_name": "the full name of the person (commonsense evidence:; A person's full name is the complete name that they are known by, which typically includes their first name, middle name (if applicable), and last name. )",
            "gender": "the gender of the person (commonsense evidence:; M stands for male and F stands for female. )",
            "height": "the height of the person",
            "weight": "the weight of the person (commonsense evidence:; The unit of height is cm, and the unit of weight is kg. If the height or the weight of the person is 0, it means his/her height or weight is missing. )"
        },
        "games_competitor": {
            "games_id": "the id of the game; Maps to games(id)",
            "person_id": "the id of the person; Maps to person(id) (commonsense evidence:; The times a person participated in the Olympics games could be calculated by grouping by person_id. )",
            "age": "the age of the person when he/she participated in the game (commonsense evidence:; If person A's age was 22 when he participated in game A and his age was 24 when he participated in game B, it means that game A was held two years earlier than game B.)"
        },
        "person_region": {
            "person_id": "the id of the person; Maps to person(id)",
            "region_id": "the id of the noc region; Maps to noc_region(id)"
        },
        "sport": {
            "id": "the unique identifier of the sport",
            "sport_name": "the name of the sport"
        },
        "event": {
            "id": "the unique identifier of the event",
            "sport_id": "the id of the sport; Maps to sport(id) (commonsense evidence:; There may be different events for the same sport in Olympics. )",
            "event_name": "the name of the event"
        },
        "competitor_event": {
            "event_id": "the id of the event; Maps to event(id)",
            "competitor_id": "the id of the competitor; Maps to games_competitor(id) (commonsense evidence:; The number of competitors who participated in a specific event could be calculated by grouping by event_id. )",
            "medal_id": "the id of the medal; Maps to medal(id) (commonsense evidence:; For a specific event, the competitor whose medal_id = 1 is the champion, the competitor whose medal_id = 2 is the runner-up, and the competitor whose medal_id = 3 got third place. )"
        }
    },
    "food_inspection_2": {
        "employee": {
            "employee_id": "the unique id for the employee",
            "first_name": "first name of the employee",
            "last_name": "last name of the employee (commonsense evidence: full name: first name + last_name)",
            "address": "physical street address of the employee",
            "city": "city of the employee's address",
            "state": "state of the customer's address",
            "zip": "postal code of the employee's address",
            "phone": "telephone number to reach the customer",
            "title": "career title of the employee ( Sanitarian ;  Supervisor ;  Division Manager)",
            "salary": "the salary of the employee (us dollars / year; commonsense evidence: monthly salary: salary / 12)",
            "supervisor": "the employee id of the employee's supervisor"
        },
        "establishment": {
            "license_no": "the license number of the facility",
            "dba_name": "the dba name of the facility (commonsense evidence: DBA stands for doing business as. It's also referred to as your business's assumed, trade or fictitious name.)",
            "aka_name": "the aka name of the facility (commonsense evidence: the aka name is used to indicate another name that a person or thing has or uses)",
            "facility_type": "the facility type (commonsense evidence: can ask some questions about its categories, for i.e.:  ;  \"Restaurant\" and \"Cafeteria\" refers to restaurants ;  PASTRY school and \"CULINARY ARTS SCHOOL\" belongs to \"Education\" or \"School\". Please design this and mention your evidence in the commonsense part of questions, thanks)",
            "risk_level": "the risk level of the facility (commonsense evidence: Facilities with higher risk level have more serious food safety issues)",
            "address": "physical street address of the facility",
            "city": "city of the facility's address",
            "state": "state of the facility's address",
            "zip": "postal code of the facility's address",
            "latitude": "the latitude of the facility",
            "longitude": "the longitude of the facility (commonsense evidence: location = POINT(latitude, longitude))",
            "ward": "the ward number of the facility (commonsense evidence: Ward number is the number assigned by the local authorities to identify the population count in each town, village and district usually for electoral purposes or to extract property and locality details)"
        },
        "inspection": {
            "inspection_id": "the unique id for the inspection",
            "inspection_date": "the date of the inspection (yyyy-mm-dd)",
            "inspection_type": "the type of the inspection",
            "results": "the inspection results ( Pass ;  Pass w/ Conditions ;  Fail ;  Out of Business ;  Business Not Located ;  No Entry ;  Not Ready ; commonsense evidence: the quality is verified: Pass + Pass w/ Conditions)",
            "employee_id": "the id of the employee who is responsible for the inspection",
            "license_no": "the license number of the facility that is inspected",
            "followup_to": "the id of inspections that this inspection is following up (commonsense evidence: 'No data' means the inspection has no followup.; if followup_to has value: ;  it's the parent inspection id, and this value represents child inspection id  ;  the entire inspection: followup_to + inspection_id)"
        },
        "inspection_point": {
            "point_id": "the unique id for the inspection point",
            "description": "the specific description of the inspection results",
            "category": "the inspection category",
            "code": "the sanitary operating requirement code (commonsense evidence: Each code stands for an operating requirement)",
            "fine": "the fines for food safety problems (commonsense evidence: The fine of more serious food safety problems will be higher. ;  Minor: 100 ;  Serious: 250 ;  Critical: 500)",
            "point_level": "point level (Critical / Serious/ Minor)"
        },
        "violation": {
            "inspection_id": "the unique id for the inspection",
            "point_id": "the inspection point id",
            "fine": "the fine of the violation (commonsense evidence: The fine of more serious food safety problems will be higher. ;  Minor: 100 ;  Serious: 250 ;  Critical: 500)",
            "inspector_comment": "the comment of the inspector"
        }
    },
    "address": {
        "cbsa": {
            "cbsa": "the code of the cbsa officer",
            "cbsa_name": "the name and the position of the cbsa officer ",
            "cbsa_type": "the office type of the officer"
        },
        "state": {
            "abbreviation": "the abbreviation of the state name",
            "name": "the state name"
        },
        "congress": {
            "cognress_rep_id": "the representative id of congress representatives",
            "last_name": "the last name of the congress representative",
            "cid": "the unique identifier for the congress representative",
            "party": "the party of the representative",
            "state": "the state that the representative is from",
            "abbreviation": "the abbreviation of the state",
            "house": "the house that the representative is from",
            "district": "the id of the district that the representative represents  (commonsense evidence: The state is divided into different districts. The districts under the same state will be numbered uniformly. ; 'NA' means that the state is not divided into districts. )",
            "land_area": "the land area of the district"
        },
        "zip_data": {
            "zip_code": "the zip code of the postal point",
            "city": "the city where the postal point locates",
            "state": "the state of the city",
            "multi_county": "whether the country that the city belongs to is multi_country (commonsense evidence: The meaning of multi_country is consisting of or involving multiple countries.)",
            "type": "the type of the postal point",
            "time_zone": "the time zone of the postal point location",
            "daylight_savings": "whether the location implements daylight savings (commonsense evidence: Daylight saving is the practice of advancing clocks (typically by one hour) during warmer months so that darkness falls at a later clock time. As a result, there is one 23-hour day in late winter or early spring and one 25-hour day in autumn.)",
            "latitude": "the latitude of the postal point location",
            "longitude": "the longitude of the postal point location",
            "elevation": "the elevation of the postal point location",
            "state_fips": "state-level FIPS code",
            "county_fips": "country-level FIPS code (commonsense evidence: FIPS codes are numbers that uniquely identify geographic areas. The number of digits in FIPS codes varies depending on the level of geography.)",
            "region": "the region where the postal point locates ",
            "division": "the division of the organization ",
            "population_2020": "the population of the residential area in 2020 (commonsense evidence: 'No data' means that the postal point is not affiliated with any organization. Or the organization has no division. )",
            "population_2010": "the population of the residential area in 2010",
            "households": "the number of the households in the residential area",
            "avg_house_value": "the average house value in the residential area",
            "avg_income_per_household": "the average income per household in the residential area",
            "persons_per_household": "the number of persons per household residential area",
            "white_population": "the population of white people in the residential area",
            "black_population": "the population of black people in the residential area",
            "hispanic_population": "the population of Hispanic people in the residential area",
            "asian_population": "the population of Asian people in the residential area",
            "american_indian_population": "the population of American Indian people in the residential area",
            "hawaiian_population": "the population of Hawaiian people in the residential area",
            "other_population": "the population of other races in the residential area",
            "male_population": "the population of males in the residential area",
            "female_population": "the population of females in the residential area",
            "median_age": "the median age of the residential area (commonsense evidence: gender ratio in the residential area = male_population / female_population if female_population != 0)",
            "male_median_age": "the male median age in the residential area",
            "female_median_age": "the female median age in the residential area",
            "residential_mailboxes": "the number of residential mailboxes in the residential area",
            "business_mailboxes": "the number of business mailboxes in the residential area",
            "total_delivery_receptacles": "the total number of delivery receptacles",
            "businesses": "the number of businesses in the residential area",
            "1st_quarter_payroll": "the total wages reported in the 1st quarter payroll report of the residential area",
            "annual_payroll": "the total wages reported in the annual payroll report of the residential area",
            "employees": "the number of employees in the residential area (commonsense evidence: Employers must submit periodic payroll reports to the Internal Revenue Service and state taxing authority. The report is used by employers to report wage information.)",
            "water_area": "the water area of the residential area",
            "land_area": "the land area of the residential area",
            "single_family_delivery_units": "the number of single-family delivery units in the residential area",
            "multi_family_delivery_units": "the number of single-family delivery units in the residential area (commonsense evidence: A single-family unit can be described as a single unit that accommodates only one family or tenant at a time on rent.; )",
            "total_beneficiaries": "the total number of beneficiaries of the postal service (commonsense evidence: multi-family units are usually under a greater surface area with the capacity to accommodate more than one tenant or multiple families on rent at the same time)",
            "retired_workers": "the number of retired workers in the residential area",
            "disabled_workers": "the number of disabled workers in the residential area",
            "parents_and_widowed": "the number of parents and widowed in the residential area",
            "spouses": "the number of spouses in the residential area",
            "children": "the number of children in the residential area",
            "over_65": "the number of people whose age is over 65 in the residential area",
            "monthly_benefits_all": "all benefit payments by month  (commonsense evidence: no. of over_65 can refer to elders. Higher means more elders; if the ratio: over_65 / children is higher: the aging is more serious.)",
            "monthly_benefits_retired_workers": "monthly benefit payments for retired workers (usd)",
            "monthly_benefits_widowed": "monthly benefit payments for retired workers",
            "cbsa": "the code of the cbsa officer"
        },
        "alias": {
            "zip_code": "the zip code of the alias",
            "alias": "the alias of the city"
        },
        "area_code": {
            "zip_code": "the zip code of the area",
            "area_code": "the code of the area"
        },
        "avoid": {
            "zip_code": "the zip code of the bad alias",
            "bad_alias": "the bad alias"
        },
        "country": {
            "zip_code": "the zip code of the state in the country",
            "county": "the country ",
            "state": "the state of the country"
        },
        "zip_congress": {
            "zip_code": "the zip code of the district",
            "district": "the district"
        }
    },
    "beer_factory": {
        "customers": {
            "customerid": "the unique id for the customer",
            "first": "the first name of the customer",
            "last": "the last name of the customer",
            "streetaddress": "the address of the customer",
            "city": "the city where the customer lives",
            "state": "the state code (commonsense evidence: please refer to https://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971; and mention its corresponding state name in the question. i.e. New York-- NY)",
            "zipcode": "the zip code",
            "email": "the customer's email",
            "phonenumber": "the customer's phone number",
            "firstpurchasedate": "the first purchase date of the customer (yyyy-mm-dd)",
            "subscribedtoemaillist": "whether the customer subscribe to the email list (commonsense evidence:;  'true' means the user permits the company to send regular emails to them. )",
            "gender": "the customer's gender"
        },
        "geolocation": {
            "locationid": "the id of the location",
            "latitude": "the latitude of the location",
            "longitude": "the longitude of the location (commonsense evidence:; precise location / coordinate = POINT(latitude, longitude))"
        },
        "location": {
            "locationid": "the unique id for the location",
            "locationname": "the name of the location",
            "streetaddress": "the street address",
            "city": "the city where the location locates",
            "state": "the state code",
            "zipcode": "the zip code of the location"
        },
        "rootbeerbrand": {
            "brandid": "the unique id for the brand",
            "brandname": "the brand name",
            "firstbrewedyear": "the first brewed year of the brand (commonsense evidence:; brand with earlier first brewed year has a much longer brewed history)",
            "breweryname": "the brewery name",
            "city": "the city where the brewery locates",
            "state": "the state code",
            "country": "the country where the brewery locates (commonsense evidence:; can find its corresponding continent. e.g., U.S.--> North America )",
            "description": "the description of the brand",
            "canesugar": "whether the drink contains cane sugar",
            "cornsyrup": "whether the drink contains the corn syrup",
            "honey": "whether the drink contains the honey  (commonsense evidence:; if the beer has honey, it means this beer is sweeter or has sweetness)",
            "artificialsweetener": "whether the drink contains the artificial sweetener  (commonsense evidence:; if the beer has artificial sweetener, it means this beer is sweeter or has sweetness)",
            "caffeinated": "whether the drink is caffeinated",
            "alcoholic": "whether the drink is alcoholic",
            "availableincans": "whether the drink is available in cans",
            "availableinbottles": "whether the drink is available in bottles",
            "availableinkegs": "whether the drink is available in kegs",
            "website": "the website of the brand",
            "facebookpage": "the facebook page of the brand (commonsense evidence:; if not, it means this brand doesn't advertise on facebook)",
            "twitter": "the twitter of the brand (commonsense evidence:; if not, it means this brand doesn't advertise on twitter)",
            "wholesalecost": "the wholesale cost",
            "currentretailprice": "the current retail price (commonsense evidence:; The unit profit available to wholesalers = current retail price - wholesale cost)"
        },
        "rootbeer": {
            "rootbeerid": "the unique id for the root beer",
            "brandid": "the brand id",
            "containertype": "the type of the container",
            "locationid": "the location id of the selling company ",
            "purchasedate": "the purchase date of the root beer"
        },
        "rootbeerreview": {
            "customerid": "the id of the customer",
            "brandid": "the id of the brand",
            "starrating": "the star rating of the root beer (commonsense evidence:; root beer with higher star rating has higher market evaluation and acceptance)",
            "reviewdate": "the review date (yyyy-mm-dd)",
            "review": "the specific review content"
        },
        "transaction": {
            "transactionid": "the unique id for the transaction",
            "creditcardnumber": "the number of the credit card used for payment",
            "customerid": "the customer id",
            "transactiondate": "the transaction date (yyyy-mm-dd)",
            "creditcardtype": "the credit card type",
            "locationid": "the location id of the selling company ",
            "rootbeerid": "the root beer id",
            "purchaseprice": "the unit purchase price of the root beer (us dollars)"
        }
    },
    "movie_platform": {
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "hockey": {
        "awardsmisc": {
            "name": "unique name of awards (unique name of awards)",
            "id": "id number of players or coaches, etc.",
            "award": "awarder (not useful)",
            "year": "year of the award",
            "lgid": "league abbreviated name"
        },
        "hof": {
            "year": "year of hall of fame",
            "hofid": "hall of fame id",
            "name": "name",
            "category": "category"
        },
        "teams": {
            "year": "year",
            "lgid": "league ID number",
            "tmid": "team ID",
            "franchid": "Franchise ID",
            "confid": "Conference ID (see abbrev.csv for details)",
            "divid": "Division ID (see abbrev.csv for details)",
            "rank": "Final standing",
            "playoff": "playoff results",
            "g": "games",
            "w": "wins",
            "l": "loses",
            "t": "ties",
            "otl": "Overtime losses",
            "pts": "points",
            "sow": "Shootout wins",
            "sol": "Shootout loses",
            "gf": "Goals for",
            "ga": "goals against",
            "name": "Full team name",
            "pim": "Penalty minutes",
            "benchminor": "Bench minors (minutes) (commonsense evidence: ; A bench minor penalty is a minor penalty committed by a player or coach that is not on the ice. It is like a minor penalty in that it calls for the offending player to serve two minutes in the penalty box.)",
            "ppg": "Power play goals",
            "ppc": "Power play chances (commonsense evidence: ; power play percentage (PP%) = PPG / PPC)",
            "sha": "Shorthanded goals against",
            "pkg": "Power play goals against",
            "pkc": "Penalty kill chances",
            "shf": "Shorthanded goals for"
        },
        "coaches": {
            "coachid": "number identifying coaches (number identifying coaches)",
            "year": "In which year did the coach teach this team",
            "tmid": "team abbreviated name",
            "lgid": "league abbreviated name",
            "stint": "stint",
            "g": "number of games",
            "w": "number of wins (commonsense evidence: ; winning rates = wins / (wins + loses))",
            "l": "number of loses",
            "t": "number of ties",
            "postg": "number of post-season games",
            "postw": "number of post-season wins",
            "postl": "number of post-season loses",
            "postt": "number of post-season ties"
        },
        "awardscoaches": {
            "coachid": "string ID of the coach",
            "award": "awards that the coach achieve",
            "year": "year of award",
            "lgid": "league abbreviated name",
            "note": ""
        },
        "master": {
            "playerid": "id number identifying the player",
            "coachid": "coach id number (commonsense evidence:; if a person has both playerID and coachID, it means this person becomes coach after retirement.)",
            "hofid": "hall of fame id",
            "firstname": "first name",
            "lastname": "last name",
            "namenote": "note about name",
            "namegiven": "Given name",
            "namenick": "Nickname  ((multiple entries separated by \"/\"))",
            "height": "height",
            "weight": "weight",
            "shootcatch": "Shooting hand (or catching hand for goalies) (commonsense evidence: ; Shooting hand (or catching hand for goalies); L: left hand; R: right hand; if null or 'empty', it means this player is good at both left and right hand)",
            "legendsid": "ID at Legends Of Hockey",
            "ihdbid": "ID at the Internet Hockey Database",
            "hrefid": "ID at Hockey-Reference.com",
            "firstnhl": "First NHL season",
            "lastnhl": "Last NHL season",
            "firstwha": "First WHA season",
            "lastwha": "Last WHA season",
            "pos": " (commonsense evidence:; LW: left winger; RW: right winger; C: center; G: goalie; D: defenseman; W: winger; F: forward; the player with W (winger) means he can play the role as both LW (left winger) and RW (right winger); some players have two positions, which will be shown as \"L/D\". It means that LW + D --> left winger and defenseman)",
            "birthyear": "birth Year",
            "birthmon": "birth Month",
            "birthday": "birth Day (commonsense evidence:; the entire / detail birth date in this table is \"year\" / \"month\" / \"date\")",
            "birthcountry": "birth Country",
            "birthstate": "birth State",
            "birthcity": "birth city",
            "deathyear": "death year",
            "deathmon": "death month",
            "deathday": "death day",
            "deathcountry": "death country",
            "deathstate": "death state",
            "deathcity": "death city"
        },
        "awardsplayers": {
            "playerid": "string ID of players (unique string ID of the player)",
            "award": "award name",
            "year": "year of award",
            "lgid": "league abbreviated name",
            "note": "note if needed",
            "pos": "position of players (commonsense evidence: ; LW: left winger; RW: right winger; C: center; G: goalie; D: defenseman; W: winger; F: forward; ; the player with W (winger) means he can play the role as both LW (left winger) and RW (right winger))"
        },
        "combinedshutouts": {
            "year": "year",
            "month": "month",
            "date": "day (commonsense evidence: ; the entire date in this table is \"year\" / \"month\" / \"date\")",
            "tmid": "team abbreviated name",
            "oppid": "Team ID of opponent",
            "idgoalie1": "ID of first goalie",
            "idgoalie2": "ID of second goalie"
        },
        "goalies": {
            "playerid": "id number identifying the player (number identifying players)",
            "year": "year (2005-06 listed as \"2005\")",
            "stint": "order of appearance in a season (commonsense evidence: ; the entire date in this table is \"year\" / \"month\" / \"date\")",
            "tmid": "team abbreviated name",
            "lgid": "league abbreviated name",
            "gp": "Games played",
            "min": "Minutes of appearance",
            "w": "wins",
            "l": "loses",
            "t/ol": "Ties / overtime losses",
            "eng": "Empty net goals (commonsense evidence: ; An empty net goal happens when a team scores against their opponent who has pulled their goalie. Since there is no goalie in the net, the net is considered empty\" )",
            "sho": "Shutouts (commonsense evidence: ; In ice hockey, a shutout (SHO) is credited to a goaltender who successfully stops the other team from scoring during the entire game.)",
            "ga": "Goals against (commonsense evidence: ; Goals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.)",
            "sa": "Shots against (commonsense evidence: ; Shot Against are the number of shots recorded while the goalie is on the ice)",
            "postgp": "Postseason games played",
            "postmin": "Postseason minutes",
            "postw": "Postseason wins",
            "postl": "Postseason loses",
            "postt": "Postseason ties",
            "posteng": "Postseason empty net goals (commonsense evidence: ; An empty net goal happens when a team scores against their opponent who has pulled their goalie. Since there is no goalie in the net, the net is considered empty\" )",
            "postsho": "Postseason Shutouts (commonsense evidence: ; In ice hockey, a shutout (SHO) is credited to a goaltender who successfully stops the other team from scoring during the entire game.)",
            "postga": "Postseason Goals against (commonsense evidence: ; Goals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.)",
            "postsa": "Postseason Shots against (commonsense evidence: ; Shot Against are the number of shots recorded while the goalie is on the ice.)"
        },
        "goaliessc": {
            "playerid": "id number identifying the player (number identifying players)",
            "year": "year (2005-06 listed as \"2005\")",
            "tmid": "team abbreviated name",
            "lgid": "league abbreviated name",
            "gp": "Games played",
            "min": "Minutes of appearance",
            "w": "Wins",
            "l": "Loses",
            "t": "Ties",
            "sho": "Shutouts (commonsense evidence:; In ice hockey, a shutout (SHO) is credited to a goaltender who successfully stops the other team from scoring during the entire game.)",
            "ga": "Goals against (commonsense evidence:; Goals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.)"
        },
        "goaliesshootout": {
            "playerid": "",
            "year": "year (2005-06 listed as \"2005\")",
            "stint": "stint",
            "tmid": "team abbreviated name",
            "w": "Wins",
            "l": "Loses",
            "sa": "Shots against (commonsense evidence: ; Shot Against are the number of shots recorded while the goalie is on the ice.)",
            "ga": "Goals against (commonsense evidence: ; Goals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.)"
        },
        "scoring": {
            "playerid": "player ID",
            "year": "play year",
            "stint": "Stint (order of appearance in a season)",
            "tmid": "team id",
            "lgid": "league id",
            "pos": "position (commonsense evidence:; LW: left winger; RW: right winger; C: center; G: goalie; D: defenseman; W: winger; F: forward; the player with W (winger) means he can play the role as both LW (left winger) and RW (right winger); some players have two positions, which will be shown as \"L/D\". It means that LW + D --> left winger and defenseman)",
            "gp": "game played",
            "g": "goals",
            "a": "assists",
            "pts": "points",
            "pim": "Penalty minutes",
            "+/-": "Plus / minus (commonsense evidence:; The plus minus stat is used to determine how often a player is on the ice when a goal is scored for the team versus against the team. A positive plus minus means that the player has been on for more goals scored than against, while a negative number means they have been on for more against.; In another words, higher \"+ / -\" means more importance to the team, lower means less importance)",
            "ppg": "Power play goals (commonsense evidence:; When a team with more players on the ice scores a goal it is known as a power play goal. Many goals are scored in power play situations as the team is able to keep possession of the puck and have more scoring chances.)",
            "ppa": "Power play assists",
            "shg": "Shorthanded goals (commonsense evidence: ; Sometimes the team with fewer players on the ice known as the short-handed team will score a goal.)",
            "sha": "Shorthanded assists",
            "gwg": "Game-winning goals (commonsense evidence: ; A game-winning goal (GWG) is the goal scored to put the winning team in excess of the losing team's final score.; commonsense evidence:; if a player gets more GWG, it means this player is more trustworthy in the critical moment.)",
            "gtg": "Game-tying goals (A game-tying goal (GWG) is the goal scored to put the winning team in the ties of the losing team's final score)",
            "sog": "Shots on goal (commonsense evidence:; a shot that enters the goal or would have entered the goal if it had not been blocked by the goalkeeper or another defensive player.)",
            "postgp": "Postseason games played",
            "postg": "Postseason goals",
            "posta": "Postseason assists",
            "postpts": "Postseason points",
            "postpim": "Postseason penalty minutes",
            "post+/-": "Postseason Plus / minus",
            "postppg": "Postseason power play goals",
            "postppa": "Postseason power play assists",
            "postshg": "Postseason Shorthanded goals",
            "postsha": "Postseason Shorthanded assists",
            "postgwg": "Postseason game-winning goals",
            "postsog": "Postseason shots on goal"
        },
        "scoringsc": {
            "playerid": "id number identifying the player (number identifying the player)",
            "year": "year (2005-06 listed as \"2005\")",
            "tmid": "team abbreviated name",
            "lgid": "league abbreviated name",
            "pos": "position",
            "gp": "Games played",
            "g": "goals",
            "a": "assists",
            "pts": "points",
            "pim": "Penalty minutes"
        },
        "scoringshootout": {
            "playerid": "id number identifying the player (number identifying the player)",
            "year": "year (2005-06 listed as \"2005\")",
            "stint": "stint",
            "tmid": "team abbreviated name",
            "s": "shots",
            "g": "goals",
            "gdg": "game deciding goals"
        },
        "scoringsup": {
            "playerid": "string ID of players (unique string ID of the player)",
            "year": "",
            "ppa": "Power play assists",
            "sha": "Shorthanded assists"
        },
        "seriespost": {
            "year": "year",
            "round": "round  (see abbrev.csv for details)",
            "series": "series (used for the NHL designations)",
            "tmidwinner": "Team ID of winner",
            "lgidwinner": "League ID of winner",
            "tmidloser": "Team ID of winner",
            "lgidloser": "league id of loser",
            "w": "wins ",
            "l": "loses",
            "t": "ties ",
            "goalswinner": "goals for winner",
            "goalsloser": "goals for loser",
            "note": "note (Note: EX = exhibition, ND = no decision, TG = total-goals series)"
        },
        "teamsplits": {
            "year": "year",
            "lgid": "league ID number",
            "tmid": "team ID",
            "hw": "home wins",
            "hl": "home loses",
            "ht": "home ties",
            "hotl": "Home overtime losses",
            "rw": "Road wins",
            "rl": "Road loses",
            "rt": "Road ties",
            "rotl": "road overtime loses",
            "sepw": "September wins",
            "sepl": "September loses",
            "sept": "September ties",
            "sepol": "September overtime loses",
            "octw": "October wins",
            "octl": "October loses",
            "octt": "October ties",
            "octol": "October overtime loses",
            "novw": "November wins",
            "novl": "November loses",
            "novt": "November ties",
            "novol": "November overtime loses",
            "decw": "December wins",
            "decl": "December loses",
            "dect": "December ties",
            "decol": "December overtime loses",
            "janw": "January wins",
            "janl": "January loses",
            "jant": "January ties",
            "janol": "January overtime loses",
            "febw": "February wins",
            "febl": "February loses",
            "febt": "February ties",
            "febol": "February overtime loses",
            "marw": "March wins",
            "marl": "March loses",
            "mart": "March ties",
            "marol": "March overtime loses",
            "aprw": "April wins",
            "aprl": "April loses",
            "aprt": "April ties",
            "aprol": "April overtime loses"
        },
        "teamvsteam": {
            "year": "year",
            "lgid": "league ID number",
            "tmid": "team ID",
            "oppid": "opponent ID",
            "w": "wins",
            "l": "loses",
            "t": "ties",
            "otl": "overtime loses"
        },
        "teamshalf": {
            "year": "year",
            "lgid": "league ID number",
            "tmid": "team ID",
            "half": "First or second half of season",
            "rank": "Final standing for the half",
            "g": "Games",
            "w": "wins",
            "l": "loses",
            "t": "ties",
            "gf": "goals for",
            "ga": "goal against"
        },
        "teamspost": {
            "year": "year",
            "lgid": "league ID number",
            "tmid": "team ID",
            "g": "Games",
            "w": "wins",
            "l": "loses",
            "t": "ties",
            "gf": "goals for",
            "ga": "goals against",
            "pim": "penalty minutes",
            "benchminor": "Bench minors (minutes)",
            "ppg": "Power play goals",
            "ppc": "Power play chances",
            "sha": "Shorthanded goals against",
            "pkg": "Power play goals against",
            "pkc": "Penalty kill chances",
            "shf": "Shorthanded goals for"
        },
        "teamssc": {
            "year": "year",
            "lgid": "league ID number",
            "tmid": "team ID",
            "g": "Games",
            "w": "wins",
            "l": "loses",
            "t": "ties",
            "gf": "goals for",
            "ga": "goals against",
            "pim": "penalty minutes"
        },
        "abbrev": {
            "type": "type of hockey games",
            "code": "abbreviated codes",
            "fullname": "full names of code"
        }
    },
    "university": {
        "country": {
            "id": "unique id number identifying country",
            "country_name": "the name of the country"
        },
        "ranking_system": {
            "id": "unique id number identifying ranking system",
            "system_name": "id number identifying ranking system"
        },
        "ranking_criteria": {
            "id": "unique id number identifying ranking criteria",
            "ranking_system_id": "id number identifying ranking system",
            "criteria_name": "name of the criteria"
        },
        "university": {
            "id": "unique id number identifying university",
            "country_id": "the country where the university locates",
            "university_name": "name of the university"
        },
        "university_ranking_year": {
            "university_id": "the id of the university",
            "ranking_criteria_id": "the id of the ranking criteria",
            "year": "ranking year",
            "score": "ranking score"
        },
        "university_year": {
            "university_id": "id of the university",
            "year": "",
            "num_students": "the total number of students for the year",
            "student_staff_ratio": " (commonsense evidence: student_staff_ratio = number of students / number of staff)",
            "pct_international_students": "the percentage of international students among all students (commonsense evidence: pct_international_student = number of interbational students / number of students)",
            "pct_female_students": "the percentage of female students (commonsense evidence: pct_female_students = number of female students / number of students)"
        }
    },
    "student_loan": {
        "bool": {
            "name": ""
        },
        "person": {
            "name": "student's name"
        },
        "disabled": {
            "name": "the name of the disabled students"
        },
        "enlist": {
            "name": "the name of the enlisted students",
            "organ": "the organization that the student enlisted in "
        },
        "longest_absense_from_school": {
            "name": "student's name",
            "month": "the duration of absence (commonsense evidence:; 0 means that the student has never been absent. )"
        },
        "male": {
            "name": "student's name who are male (commonsense evidence:; the students who are not in this list are female.)"
        },
        "no_payment_due": {
            "name": "student's name ",
            "bool": "whether the student has payment dues (commonsense evidence:; \tneg: the student doesn't have payment due; \tpos: the student has payment due)"
        },
        "unemployed": {
            "name": "student who is unemployed"
        },
        "enrolled": {
            "name": "",
            "school": "",
            "month": ""
        }
    },
    "movie": {
        "actor": {
            "actorid": "the unique id for the actor",
            "name": "actor's name",
            "date of birth": "actor's birth date",
            "birth city": "actor's birth city",
            "birth country": "actor's birth country",
            "height (inches)": "actor's height (the unit is inch)",
            "biography": "actor's biography",
            "gender": "actor's gender",
            "ethnicity": "actor's ethnicity",
            "networth": "actor's networth (commonsense evidence:; The actor with more networth is richer. )"
        },
        "movie": {
            "movieid": "the unique id for the movie",
            "title": "the title of the movie",
            "mpaa rating": "MPAA rating of the movie (commonsense evidence:; MPAA rating is the movie rating for parents to use as a guide to determine the appropriateness of a film's content for children and teenagers. ;  rated G: General audiences  All ages admitted;  rated PG: Parental guidance suggested  Some material may not be suitable for pre-teenagers;  rated R: Restricted  Under 17 requires accompanying parent or adult guardian;  rated X: No one under 17 admitted)",
            "budget": "the budget of the movie (the unit is dollar)",
            "gross": "the gross of the movie",
            "release date": "release date (yyyy-mm-dd)",
            "genre": "the genre of the movie",
            "runtime": "the runtime of the movie",
            "rating": "the rating of the movie (0.0 - 10.0; commonsense evidence:; Higher ratings mean higher quality and better response. )",
            "rating count": "the number of the ratings",
            "summary": "the summary of the movie"
        },
        "characters": {
            "movieid": "the unique id for the movie",
            "actorid": "the unique id for the actor",
            "character name": "the name of the character",
            "creditorder": "order of the character in the credit list ",
            "pay": "the salary of the character",
            "screentime": "the screentime of the character (commonsense evidence:; Screentime is directly proportional to the importance of the characters. )"
        }
    },
    "video_games": {
        "genre": {
            "id": "the unique identifier of the game genre",
            "genre_name": "the game genre (commonsense evidence:; The game genre can have a significant effect on the game. The genre refers to the category or type of game, such as action, adventure, strategy, or role-playing. The genre can determine the general style and gameplay of the game, as well as the expectations of the players. The genre can also affect the audience for the game, as different genres may appeal to different groups of players.)"
        },
        "game": {
            "id": "the unique identifier of the game",
            "genre_id": "the id of the game genre (commonsense evidence:; If game A and game B have the same genre, the user who likes game A may also like game B. )",
            "game_name": "the name of the game"
        },
        "platform": {
            "id": "the unique identifier of the game platform",
            "platform_name": "the name of the platform (commonsense evidence:; The game platform, or the platform on which a game is played, can have a significant effect on the game. The platform can determine what hardware and software the game can run on, as well as the technical capabilities of the game. The platform can also affect the audience for the game, as different platforms may attract different groups of players.)"
        },
        "publisher": {
            "id": "the unique identifier of the game publisher",
            "publisher_name": "the name of the publisher (commonsense evidence:; The publisher is the company or organization that finances, produces, and distributes the game. The publisher can influence the development of the game by providing resources, guidance, and support to the game's development team. The publisher can also affect the marketing and distribution of the game, as they are responsible for promoting the game and making it available to players. )"
        },
        "game_publisher": {
            "id": "the unique identifier of the game publisher",
            "game_id": "the id of the game",
            "publisher_id": "the id of the publisher (commonsense evidence:; If game A and game B were published by the same publisher, the user who likes game A may also like game B if the user is a fan of the publisher company.)"
        },
        "game_platform": {
            "id": "the unique identifier of the record",
            "game_publisher_id": "the id of the game publisher",
            "platform_id": "the id of the platform",
            "release_year": "the release year of the game"
        },
        "region": {
            "id": "the unique identifier of the region",
            "region_name": "the region name"
        },
        "region_sales": {
            "region_id": "the id of the region",
            "game_platform_id": "the id of the game platform",
            "num_sales": "the number of sales in this region (commonsense evidence:; The number of games sold in the region = num_sales * 100000.; The game platform with higher num_sales is more popular in the region. )"
        }
    },
    "donor": {
        "essays": {
            "projectid": "unique project identifier",
            "teacher_acctid": "teacher id that created a project",
            "title": "title of the project",
            "short_description": "short description of a project",
            "need_statement": "need statement of a project",
            "essay": "complete project essay"
        },
        "projects": {
            "projectid": "project's unique identifier",
            "teacher_acctid": "teacher's unique identifier (teacher that created a project)",
            "schoolid": "school's identifier (school where teacher works)",
            "school_ncesid": "Public National Center for Ed Statistics id",
            "school_latitude": "latitude of school ",
            "school_longitude": "longitude of school ",
            "school_city": "city where the school is located",
            "school_state": "state where the school is located",
            "school_zip": "zipcode of school",
            "school_metro": "metro where the school is located",
            "school_district": "district where the school is located",
            "school_county": "country where the school is located",
            "school_charter": "whether it is a public charter school or not (no private schools in the dataset)",
            "school_magnet": "whether a public magnet school or not",
            "school_year_round": "whether it is a public year round school or not",
            "school_nlns": "whether it is a public Nonleafy Normal Stature school or not",
            "school_kipp": "whether it is a public Knowledge Power Program school or not",
            "school_charter_ready_promise": "whether it is a public ready promise school or not",
            "teacher_prefix": "teacher's gender (commonsense evidence:; if the value is equal to \"Dr. \", it means this teacher acquired P.h.D or doctor degree.)",
            "teacher_teach_for_america": "Teach for America or not",
            "teacher_ny_teaching_fellow": "New York teaching fellow or not ( t: true;  f: false; commonsense evidence:; if true: it means that this teacher is a New York teacher)",
            "primary_focus_subject": "main subject for which project materials are intended",
            "primary_focus_area": "main subject area for which project materials are intended",
            "secondary_focus_subject": "secondary subject",
            "secondary_focus_area": "secondary subject area",
            "resource_type": "main type of resources requested by a project",
            "poverty_level": "school's poverty level (commonsense evidence:; highest: 65%+ free of reduced lunch; high: 40-64%; moderate: 10-39%low: 0-9%)",
            "grade_level": "grade level for which project materials are intended",
            "fulfillment_labor_materials": " cost of fulfillment (commonsense evidence:; higher means higher cost, or need more labors)",
            "total_price_excluding_optional_support": "project cost excluding optional tip that donors give to DonorsChoose.org while funding a project",
            "total_price_including_optional_support": "project cost including optional tip that donors give to DonorsChoose.org while funding a project (commonsense evidence:; cost of optional tip = total_price_including_optional_support -total_price_excluding_optional_support)",
            "students_reached": "number of students impacted by a project (if funded)",
            "eligible_double_your_impact_match": " project was eligible for a 50% off offer by a corporate partner (logo appears on a project, like Starbucks or Disney)",
            "eligible_almost_home_match": "project was eligible for a $100 boost offer by a corporate partner",
            "date_posted": "data a project went live on the site"
        },
        "donations": {
            "donationid": "unique donation identifier",
            "projectid": "project identifier that received the donation",
            "donor_acctid": "donor that made a donation",
            "donor_city": "donation city",
            "donor_state": "donation state",
            "donor_zip": "donation zip code",
            "is_teacher_acct": "whether donor is also a teacher (commonsense evidence:;  f: false, it means this donor is not a teacher;  t: true, it means this donor is a teacher)",
            "donation_timestamp": "the time of donation",
            "donation_to_project": "amount to project, excluding optional support (tip)",
            "donation_optional_support": "amount of optional support",
            "donation_total": "donated amount (commonsense evidence:; donated amount = donation_to_project + donation_optional_support)",
            "dollar_amount": "donated amount in US dollars",
            "donation_included_optional_support": "whether optional support (tip) was included for DonorsChoose.org (commonsense evidence:;  f: false, optional support (tip) was not included for DonorsChoose.org;  t: true, optional support (tip) was included for DonorsChoose.org)",
            "payment_method": "what card/payment option was used",
            "payment_included_acct_credit": "whether a portion of a donation used account credits redemption (commonsense evidence:;  f: false, a portion of a donation didn't use account credits redemption;  t: true, a portion of a donation used account credits redemption)",
            "payment_included_campaign_gift_card": "whether a portion of a donation included corporate sponsored gift card (commonsense evidence:;  f: false, a portion of a donation included corporate sponsored gift card;  t: true, a portion of a donation included corporate sponsored gift card)",
            "payment_included_web_purchased_gift_card": "whether a portion of a donation included citizen purchased gift card (ex: friend buy a gift card for you) ( f: false;  t: true)",
            "payment_was_promo_matched": "whether a donation was matched 1-1 with corporate funds (commonsense evidence:;  f: false, a donation was not matched 1-1 with corporate funds;  t: true, a donation was matched 1-1 with corporate funds)",
            "via_giving_page": "donation given via a giving / campaign page (example: Mustaches for Kids)",
            "for_honoree": "donation made for an honoree (commonsense evidence:;  f: false, this donation is not made for an honoree;  t: true, this donation is made for an honoree)",
            "donation_message": "donation comment/message. "
        },
        "resources": {
            "resourceid": "unique resource id",
            "projectid": "project id that requested resources for a classroom",
            "vendorid": "vendor id that supplies resources to a project",
            "vendor_name": "vendor name",
            "project_resource_type": "type of resource",
            "item_name": "resource name",
            "item_number": "resource item identifier",
            "item_unit_price": "unit price of the resource",
            "item_quantity": "number of a specific item requested by a teacher"
        }
    },
    "bike_share_1": {
        "station": {
            "id": "unique ID for each station",
            "name": "Station name",
            "lat": "latitude (commonsense evidence:; Can represent the location of the station when combined with longitude.)",
            "long": "longitude (commonsense evidence:; Can represent the location of the station when combined with ; latitude.)",
            "dock_count": "number of bikes the station can hold",
            "city": "",
            "installation_date": "installation date"
        },
        "status": {
            "station_id": "station id",
            "bikes_available": "number of available bikes (commonsense evidence:; 0 means no bike can be borrowed.)",
            "docks_available": "number of available docks (commonsense evidence:; 0 means no bike can be returned to this station.)",
            "time": ""
        },
        "trip": {
            "id": "",
            "duration": "The duration of the trip in seconds. (commonsense evidence:; duration = end_date - start_date )",
            "start_date": "start date",
            "start_station_name": "The name of the start station (commonsense evidence:; It represents the station name the bike borrowed from.)",
            "start_station_id": "The ID of the start station",
            "end_date": "end date",
            "end_station_name": "The name of the end station (commonsense evidence:; It represents the station name the bike returned to.)",
            "end_station_id": "The ID of the end station",
            "bike_id": "The ID of the bike",
            "subscription_type": "subscription type (Allowed input: Subscriber, Customer.)",
            "zip_code": "zip code"
        },
        "weather": {
            "date": "",
            "max_temperature_f": "max temperature in Fahrenheit degree (commonsense evidence:; It represents the hottest temperature.)",
            "mean_temperature_f": "mean temperature in Fahrenheit degree",
            "min_temperature_f": "min temperature in Fahrenheit degree (commonsense evidence:; It represents the coldest temperature.)",
            "max_dew_point_f": "max dew point in Fahrenheit degree ",
            "mean_dew_point_f": "mean dew point in Fahrenheit degree ",
            "min_dew_point_f": "min dew point in Fahrenheit degree ",
            "max_humidity": "max humidity",
            "mean_humidity": "mean humidity",
            "min_humidity": "min humidity",
            "max_sea_level_pressure_inches": "max sea level pressure in inches",
            "mean_sea_level_pressure_inches": "mean sea level pressure in inches",
            "min_sea_level_pressure_inches": "min sea level pressure in inches",
            "max_visibility_miles": "max visibility in miles",
            "mean_visibility_miles": "mean visibility in miles",
            "min_visibility_miles": "min visibility in miles",
            "max_wind_speed_mph": "max wind Speed in mph",
            "mean_wind_speed_mph": "mean wind Speed in mph",
            "max_gust_speed_mph": "max gust Speed in mph",
            "precipitation_inches": "precipitation in inches",
            "cloud_cover": "cloud cover",
            "events": " (Allowed input: [null], Rain, other)",
            "wind_dir_degrees": "wind direction degrees",
            "zip_code": "zip code"
        }
    },
    "superstore": {
        "people": {
            "customer id": "the id of the customers",
            "customer name": "the name of the customers",
            "segment": "the segment that the customers belong to (commonsense evidence: ;  consumer ;  home office: synonym: headquarter. ;  corporate)",
            "country": "the country of people",
            "city": "the city of people",
            "state": "the state of people (commonsense evidence: please mention its full name in the question, by referring to ; https://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971; e.g., New York --> NY)",
            "postal code": "the postal code",
            "region": "the region of people ( Central: ;  East: ;  West: ;  South: )"
        },
        "product": {
            "product id": "the id of products",
            "product name": "the name of products",
            "category": "the categories of products ( Furniture ;  Office Supplies ;  Technology)",
            "sub-category": "the sub-categories of products ( Bookcases ;  Chairs ;  Furnishings ;  Tables ;  Appliances ;  Art ;  Binders ;  Envelopes ;  Fasteners ;  Labels ;  Paper ;  Storage ;  Supplies ;  Accessories ;  Copiers ;  Machines ;  Phones )",
            "region": "the region of products ( Central: ;  East: ;  West: ;  South:)"
        },
        "central_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd; commonsense evidence: ; 'shipment time' refers to the time interval between order_date and ship_date.)",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest.)",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount))",
            "profit": "the profit that the company got by selling the product (commonsense evidence:; total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative)"
        },
        "east_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd; commonsense evidence: 'shipment time' refers to the time interval between order_date and ship_date. )",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest.; )",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount))",
            "profit": "the profit that the company got by selling the product (commonsense evidence: total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative; )"
        },
        "south_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd ; commonsense evidence: 'shipment time' refers to the time interval between order_date and ship_date. )",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest. )",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount); )",
            "profit": "the profit that the company got by selling the product (commonsense evidence: total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative; )"
        },
        "west_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd; commonsense evidence: 'shipment time' refers to the time interval between order_date and ship_date. )",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest. )",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount))",
            "profit": "the profit that the company got by selling the product (commonsense evidence: total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative)"
        }
    },
    "music_tracker": {
        "torrents": {
            "groupname": "release title",
            "totalsnatched": "number of times the release has been downloaded",
            "artist": "artist / group name",
            "groupyear": "release year",
            "releasetype": "release type (e.g., album, single, mixtape)",
            "groupid": "Unique release identifier from What.CD. Used to ensure no releases are duplicates.",
            "id": "unique identifier (essentially an index)"
        },
        "tags": {
            "index": "index",
            "id": "release identifier which can be matched with id field in the torrents table",
            "tag": "tag"
        }
    },
    "genes": {
        "classification": {
            "geneid": "unique identifier number of genes",
            "localization": "location"
        },
        "genes": {
            "geneid": "identifier number of genes",
            "class": "class",
            "complex": "Complex",
            "phenotype": "Phenotype (?: means: doesn't exit the phenotype)",
            "motif": "Motif",
            "chromosome": "Chromosome",
            "function": "Function",
            "localization": ""
        },
        "interactions": {
            "geneid1": "identifier number of genes",
            "geneid2": "identifier number of genes",
            "type": "Type",
            "expression_corr": "Expression correlation score (range: (0,1); ; if the value is the positive then it's \"positively correlated\"; ; if the value is the negative then it's \"negatively correlated\"; ; if the value is very high positively, it means two genes are highly correlated)"
        }
    },
    "world_development_indicators": {
        "country": {
            "countrycode": "unique code identifying countries",
            "shortname": "Short names of countries ",
            "tablename": "table names of countries",
            "longname": "long or full name of countries",
            "alpha2code": "2 digit code of countries ",
            "currencyunit": "Currency Unit used in this country",
            "specialnotes": "Special Notes",
            "region": "region that country belongs to ",
            "incomegroup": "income level of countries ",
            "wb2code": "world bank to code",
            "nationalaccountsbaseyear": "the year used as the base period for constant price calculations in the country's national accounts",
            "nationalaccountsreferenceyear": "National Accounts Reference Year",
            "snapricevaluation": "SNA Price Valuation",
            "lendingcategory": "Lending category (• IDA: International Development Associations: (IDA) is the part of the World Bank that helps the world's poorest countries.; • IBRD: The International Bank for Reconstruction and Development (IBRD) is a global development cooperative owned by 189 member countries.; • Blend: Blend is the cloud banking infrastructure powering billions of dollars in financial transactions every day.)",
            "othergroups": "other groups (• HIPC: Heavily Indebted Poor Countries; • Euro Area: The euro area consists of those Member States of the European Union that have adopted the euro as their currency.)",
            "systemofnationalaccounts": "System Of National Accounts",
            "alternativeconversionfactor": "Alternative conversion factor is the underlying annual exchange rate used for the World Bank Atlas method",
            "pppsurveyyear": "purchasing power parity survey year",
            "balanceofpaymentsmanualinuse": "Balance Of Payments Manual In Use",
            "externaldebtreportingstatus": "External Debt Reporting Status (• Actual; • Preliminary; • Estimate; commonsense reasoning:; If ExternalDebtReportingStatus='Actual', it means this external debt reporting is real and actual, and finished; if 'Estimate', it means external debt reporting is finished by estimation.; if 'preliminary', it means this external debt reporting is not finished)",
            "systemoftrade": "System Of Trade",
            "governmentaccountingconcept": "Government Accounting Concept",
            "imfdatadisseminationstandard": "IMF Standards for Data Dissemination",
            "latestpopulationcensus": "Latest Population Census",
            "latesthouseholdsurvey": "",
            "sourceofmostrecentincomeandexpendituredata": "Source Of Most Recent Income And Expenditure Data",
            "vitalregistrationcomplete": "Vital Registration Complete",
            "latestagriculturalcensus": "Latest Agricultural Census",
            "latestindustrialdata": "Latest Industrial Data",
            "latesttradedata": "Latest Trade Data",
            "latestwaterwithdrawaldata": "Latest Water Withdrawal Data"
        },
        "series": {
            "seriescode": "unique code identifying series",
            "topic": "topic of series",
            "indicatorname": "Indicator Name",
            "shortdefinition": "Short Definition of series",
            "longdefinition": "Long Definition of series ",
            "unitofmeasure": "Unit Of Measure",
            "periodicity": "Periodicity",
            "baseperiod": "a period of business or economic activity used as a basis or reference point especially for indexing, calculating, estimating, or adjudicating prices, taxes, compensation, income, and production",
            "othernotes": "Other Notes",
            "aggregationmethod": "Aggregation Method",
            "limitationsandexceptions": "Limitations And Exceptions",
            "notesfromoriginalsource": "Notes From Original Source",
            "generalcomments": "General Comments",
            "source": "source of this data",
            "statisticalconceptandmethodology": "Statistical Concept And Methodology",
            "developmentrelevance": "Development Relevance",
            "relatedsourcelinks": "Related Source Links",
            "otherweblinks": "Other Web Links",
            "relatedindicators": "Related Indicators",
            "licensetype": "License Type"
        },
        "countrynotes": {
            "countrycode": "code identifying unique countries",
            "seriescode": "Series code of countries",
            "description": "description"
        },
        "footnotes": {
            "countrycode": "code identifying unique countries",
            "seriescode": "Series code of countries",
            "year": "Year",
            "description": "Description of country footnotes"
        },
        "indicators": {
            "countryname": "code identifying unique countries",
            "countrycode": "Series code of countries",
            "indicatorname": "indicator name",
            "indicatorcode": "indicator code",
            "year": "year",
            "value": "value"
        },
        "seriesnotes": {
            "seriescode": "code identifying the series",
            "year": "year",
            "description": "Description of series"
        }
    },
    "movies_4": {
        "country": {
            "country_id": "the unique identifier of the country",
            "country_iso_code": "the ISO code (commonsense evidence:; ISO codes are typically used to identify countries and their subdivisions, and there are different types of ISO codes depending on the specific application. Here we use ISO 3166 code to identify countries. )",
            "country_name": "the name of the country"
        },
        "department": {
            "department_id": "the unique identifier of the department",
            "department_name": "the name of the department"
        },
        "gender": {
            "gender_id": "the unique identifier of the gender",
            "gender": "the gender (commonsense evidence:; female/ male/ unspecified )"
        },
        "genre": {
            "genre_id": "the unique identifier of the genre",
            "genre_name": "the genre"
        },
        "keyword": {
            "keyword_id": "the unique identifier of the keyword",
            "keyword_name": "the keyword"
        },
        "language": {
            "language_id": "the unique identifier of the language",
            "language_code": "the code of the language (commonsense evidence:; Here we use ISO 639 codes to identify the language. )",
            "language_name": "the language name"
        },
        "language_role": {
            "role_id": "the unique identifier of the language id",
            "language_role": "the language role (commonsense evidence:; In the context of language roles in a movie or other audio-visual production, \"original\" and \"spoken\" refer to the languages in which the movie was originally produced, and the languages spoken by the characters in the movie, respectively.)"
        },
        "movie": {
            "movie_id": "the unique identifier of the movie",
            "title": "the title of the movie",
            "budget": "the budget for the movie (commonsense evidence:; If a movie has higher popularity, it means that it is well-liked by a large number of people. This can be determined by looking at the movie's ratings and reviews, as well as the box office performance and overall buzz surrounding the film. Higher popularity often translates to more success for the movie, both financially and critically.)",
            "homepage": "the homepage of the movie",
            "overview": "the overview of the movie",
            "popularity": "the popularity of the movie (commonsense evidence:; If a movie has higher popularity, it means that it is well-liked by a large number of people. This can be determined by looking at the movie's ratings and reviews, as well as the box office performance and overall buzz surrounding the film. Higher popularity often translates to more success for the movie, both financially and critically.)",
            "release_date": "the release date of the movie",
            "revenue": "the revenue of the movie (commonsense evidence:; A higher vote average indicates that a greater proportion of people who have seen the movie have given it positive ratings.)",
            "runtime": "the runtime of the movie",
            "movie_status": "the status of the movie; The only value of this column is 'Released'. ",
            "tagline": "the tagline of the movie",
            "vote_average": "the average vote for the movie (commonsense evidence:; A higher vote average indicates that a greater proportion of people who have seen the movie have given it positive ratings.)",
            "vote_count": "the vote count for the movie (commonsense evidence:; If a movie has a higher vote average and vote count, it means that it has been well-received by audiences and critics. A higher vote count means that more people have rated the movie, which can indicate a greater level of interest in the film.)"
        },
        "movie_genres": {
            "movie_id": "the id of the movie ; Maps to movie(movie_id)",
            "genre_id": "the id of the movie genre; Maps to genre(genre_id)"
        },
        "movie_languages": {
            "movie_id": "the id of the movie ; Maps to movie(movie_id)",
            "language_id": "the id of the movie language; Maps to language(language_id)",
            "language_role_id": "the id of the role's language"
        },
        "person": {
            "person_id": "the unique identifier of the person",
            "person_name": "the name of the person"
        },
        "movie_crew": {
            "movie_id": "the id of the movie that the crew worked for; Maps to movie(movie_id)",
            "person_id": "the id of the crew; Maps to person(person_id)",
            "department_id": "the id of the crew's department; Maps to department(department_id)",
            "job": "the job of the crew (commonsense evidence:; A movie may involve several crews with the same job title. )"
        },
        "production_company": {
            "company_id": "the unique identifier of the company",
            "company_name": "the name of the company"
        },
        "production_country": {
            "movie_id": "the unique identifier of the movie",
            "country_id": "the id of the country"
        },
        "movie_cast": {
            "movie_id": "the id of the movie; Maps to movie(movie_id)",
            "person_id": "the id of the person; Maps to person(person_id)",
            "character_name": "the character name",
            "gender_id": "the id of the cast's gender; Maps to gender(gender_id)",
            "cast_order": "the cast order of the cast (commonsense evidence:; The cast order of a movie or television show refers to the sequence in which the actors and actresses are listed in the credits. This order is typically determined by the relative importance of each actor's role in the production, with the main actors and actresses appearing first, followed by the supporting cast and extras. )"
        },
        "movie_keywords": {
            "movie_id": "the id of the movie ; Maps to movie(movie_id)",
            "keyword_id": "the id of the movie keyword; Maps to keyword(keyword_id) (commonsense evidence:; A movie may have many keywords. Audience could get the genre of the movie according to the movie keywords. )"
        },
        "movie_company": {
            "movie_id": "the id of the movie ; Maps to movie(movie_id)",
            "company_id": "the id of the company that produced the movie; Maps to production_company(company_id) (commonsense evidence:; If movies with different movie_id have the same company_id, it means these movies were made by the same company. )"
        }
    }
}