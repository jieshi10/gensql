{
    "toxicology_ext": {
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "student_club_ext": {
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "superhero_ext": {
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "debit_card_specializing_ext": {
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "financial_ext": {
        "account": {
            "account_id": "the id of the account",
            "district_id": "location of branch",
            "frequency": "frequency of the acount",
            "date": "the creation date of the account (in the form YYMMDD)"
        },
        "card": {
            "card_id": "id number of credit card",
            "disp_id": "disposition id",
            "type": "type of credit card (\"junior\": junior class of credit card; ; \"classic\": standard class of credit card; ; \"gold\": high-level credit card)",
            "issued": "the date when the credit card issued  (in the form YYMMDD)"
        },
        "client": {
            "client_id": "the unique number",
            "gender": " (F：female ; M：male )",
            "birth_date": "birth date",
            "district_id": "location of branch"
        },
        "disp": {
            "disp_id": "unique number of identifying this row of record",
            "client_id": "id number of client",
            "account_id": "id number of account",
            "type": "type of disposition (\"OWNER\" : \"USER\" : \"DISPONENT\"; commonsense evidence:; the account can only have the right to issue permanent orders or apply for loans)"
        },
        "district": {
            "district_id": "location of branch",
            "a2": "district_name",
            "a3": "region",
            "a4": "",
            "a5": "municipality < district < region",
            "a6": "municipality < district < region",
            "a7": "municipality < district < region",
            "a8": "municipality < district < region",
            "a9": " (not useful)",
            "a10": "ratio of urban inhabitants",
            "a11": "average salary",
            "a12": "unemployment rate 1995",
            "a13": "unemployment rate 1996",
            "a14": "no. of entrepreneurs per 1000 inhabitants",
            "a15": "no. of committed crimes 1995",
            "a16": "no. of committed crimes 1996"
        },
        "loan": {
            "loan_id": "the id number identifying the loan data",
            "account_id": "the id number identifying the account",
            "date": "the date when the loan is approved",
            "amount": "approved amount (unit：US dollar)",
            "duration": "loan duration (unit：month)",
            "payments": "monthly payments (unit：month)",
            "status": "repayment status ('A' stands for contract finished, no problems;; 'B' stands for contract finished, loan not paid;; 'C' stands for running contract, OK so far;; 'D' stands for running contract, client in debt)"
        },
        "order": {
            "order_id": "identifying the unique order",
            "account_id": "id number of account",
            "bank_to": "bank of the recipient",
            "account_to": "account of the recipient (each bank has unique two-letter code)",
            "amount": "debited amount",
            "k_symbol": "purpose of the payment (\"POJISTNE\" stands for insurance payment; \"SIPO\" stands for household payment; \"LEASING\" stands for leasing; \"UVER\" stands for loan payment)"
        },
        "trans": {
            "trans_id": "transaction id",
            "account_id": "",
            "date": "date of transaction",
            "type": "+/- transaction (\"PRIJEM\" stands for credit; \"VYDAJ\" stands for withdrawal)",
            "operation": "mode of transaction (\"VYBER KARTOU\": credit card withdrawal; \"VKLAD\": credit in cash; \"PREVOD Z UCTU\" :collection from another bank; \"VYBER\": withdrawal in cash; \"PREVOD NA UCET\": remittance to another bank)",
            "amount": "amount of money (Unit：USD)",
            "balance": "balance after transaction (Unit：USD)",
            "k_symbol": " (\"POJISTNE\": stands for insurrance payment; \"SLUZBY\": stands for payment for statement; \"UROK\": stands for interest credited; \"SANKC. UROK\": sanction interest if negative balance; \"SIPO\": stands for household; \"DUCHOD\": stands for old-age pension; \"UVER\": stands for loan payment)",
            "bank": " (each bank has unique two-letter code)",
            "account": ""
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "circuits": {
            "circuitid": "unique identification number of the circuit ",
            "circuitref": "circuit reference name "
        },
        "constructorresults": {
            "constructorresultsid": "constructor Results Id",
            "raceid": "race id",
            "constructorid": "constructor id",
            "points": "points",
            "status": "status"
        },
        "constructorstandings": {
            "points": "how many points acquired in each race "
        },
        "results": {
            "resultid": "the unique identification number identifying race result ",
            "raceid": "the identification number identifying the race "
        },
        "player_attributes": {
            "id": "the unique id for players",
            "player_fifa_api_id": "the id of the player fifa api",
            "player_api_id": "the id of the player api",
            "date": "date (e.g. 2016-02-18 00:00:00)",
            "overall_rating": "the overall rating of the player (commonsense reasoning: ; The rating is between 0-100 which is calculated by FIFA.;  Higher overall rating means the player has a stronger overall strength.)",
            "potential": "potential of the player (commonsense reasoning: ; The potential score is between 0-100 which is calculated by FIFA.;  Higher potential score means that the player has more potential)",
            "preferred_foot": "the player's preferred foot when attacking (right/ left)",
            "attacking_work_rate": "the player's attacking work rate (commonsense reasoning: ;  high: implies that the player is going to be in all of your attack moves;  medium: implies that the player will select the attack actions he will join in;  low: remain in his position while the team attacks )",
            "defensive_work_rate": "the player's defensive work rate (commonsense reasoning: ;  high: remain in his position and defense while the team attacks ;  medium: implies that the player will select the defensive actions he will join in;  low: implies that the player is going to be in all of your attack moves instead of defensing)",
            "crossing": "the player's crossing score  (commonsense reasoning: ; Cross is a long pass into the opponent's goal towards the header of sixth-yard teammate.;  The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.;  Higher potential score means that the player performs better in crossing actions. )",
            "finishing": "the player's finishing rate (0-100 which is calculated by FIFA)",
            "heading_accuracy": "the player's heading accuracy (0-100 which is calculated by FIFA)",
            "short_passing": "the player's short passing score (0-100 which is calculated by FIFA)",
            "volleys": "the player's volley score (0-100 which is calculated by FIFA)",
            "dribbling": "the player's dribbling score (0-100 which is calculated by FIFA)",
            "curve": "the player's curve score (0-100 which is calculated by FIFA)",
            "free_kick_accuracy": "the player's free kick accuracy (0-100 which is calculated by FIFA)",
            "long_passing": "the player's long passing score (0-100 which is calculated by FIFA)",
            "ball_control": "the player's ball control score (0-100 which is calculated by FIFA)",
            "acceleration": "the player's acceleration score (0-100 which is calculated by FIFA)",
            "sprint_speed": "the player's sprint speed;  (0-100 which is calculated by FIFA)",
            "agility": "the player's agility (0-100 which is calculated by FIFA)",
            "reactions": "the player's reactions score (0-100 which is calculated by FIFA)",
            "balance": "the player's balance score (0-100 which is calculated by FIFA)",
            "shot_power": "the player's shot power (0-100 which is calculated by FIFA)",
            "jumping": "the player's jumping score (0-100 which is calculated by FIFA)",
            "stamina": "the player's stamina score (0-100 which is calculated by FIFA)",
            "strength": "the player's strength score (0-100 which is calculated by FIFA)",
            "long_shots": "the player's long shots score (0-100 which is calculated by FIFA)",
            "aggression": "the player's aggression score (0-100 which is calculated by FIFA)",
            "interceptions": "the player's interceptions score (0-100 which is calculated by FIFA)",
            "positioning": "the player's ; positioning score;  (0-100 which is calculated by FIFA)",
            "vision": "the player's vision score;  (0-100 which is calculated by FIFA)",
            "penalties": "the player's penalties score;  (0-100 which is calculated by FIFA)",
            "marking": "the player's markingscore (0-100 which is calculated by FIFA)",
            "standing_tackle": "the player's standing tackle score (0-100 which is calculated by FIFA)",
            "sliding_tackle": "the player's sliding tackle score (0-100 which is calculated by FIFA)",
            "gk_diving": "the player's goalkeep diving score (0-100 which is calculated by FIFA)",
            "gk_handling": "the player's goalkeep diving score (0-100 which is calculated by FIFA)",
            "gk_kicking": "the player's goalkeep kicking score (0-100 which is calculated by FIFA)",
            "gk_positioning": "the player's goalkeep positioning score (0-100 which is calculated by FIFA)",
            "gk_reflexes": "the player's goalkeep reflexes score (0-100 which is calculated by FIFA)"
        },
        "player": {
            "id": "the unique id for players",
            "player_api_id": "the id of the player api",
            "player_name": "player name",
            "player_fifa_api_id": "the id of the player fifa api",
            "birthday": "the player's birthday (e.g. 1992-02-29 00:00:00 ; commonsense reasoning: ; Player A is older than player B means that A's birthday is earlier than B's)",
            "height": "the player's height",
            "weight": "the player's weight"
        },
        "league": {
            "id": "the unique id for leagues",
            "country_id": "the unique id for countries",
            "name": "league name"
        },
        "country": {
            "id": "the unique id for countries",
            "name": "country name"
        },
        "team": {
            "id": "the unique id for teams",
            "team_api_id": "the id of the team api",
            "team_fifa_api_id": "the id of the team fifa api",
            "team_long_name": "the team's long name",
            "team_short_name": "the team's short name"
        },
        "team_attributes": {
            "id": "the unique id for teams",
            "team_fifa_api_id": "the id of the team fifa api",
            "team_api_id": "the id of the team api",
            "date": "Date (e.g. 2010-02-22 00:00:00)",
            "buildupplayspeed": "the speed in which attacks are put together  (the score which is between 1-00 to measure the team's attack speed)",
            "buildupplayspeedclass": "the speed class (commonsense reasoning: ;  Slow: 1-33;  Balanced: 34-66;  Fast: 66-100)",
            "buildupplaydribbling": "the tendency/ frequency of dribbling",
            "buildupplaydribblingclass": "the dribbling class (commonsense reasoning: ;  Little: 1-33;  Normal: 34-66;  Lots: 66-100)",
            "buildupplaypassing": "affects passing distance and support from teammates",
            "buildupplaypassingclass": "the passing class (commonsense reasoning: ;  Short: 1-33;  Mixed: 34-66;  Long: 66-100)",
            "buildupplaypositioningclass": "A team's freedom of movement in the 1st two thirds of the pitch (Organised / Free Form)",
            "chancecreationpassing": "Amount of risk in pass decision and run support",
            "chancecreationpassingclass": "the chance creation passing class (commonsense reasoning: ;  Safe: 1-33;  Normal: 34-66;  Risky: 66-100)",
            "chancecreationcrossing": "The tendency / frequency of crosses into the box",
            "chancecreationcrossingclass": "the chance creation crossing class (commonsense reasoning: ;  Little: 1-33;  Normal: 34-66;  Lots: 66-100)",
            "chancecreationshooting": "The tendency / frequency of shots taken",
            "chancecreationshootingclass": "the chance creation shooting class (commonsense reasoning: ;  Little: 1-33;  Normal: 34-66;  Lots: 66-100)",
            "chancecreationpositioningclass": "A teams freedom of movement in the final third of the pitch (Organised / Free Form)",
            "defencepressure": "Affects how high up the pitch the team will start pressuring",
            "defencepressureclass": "the defence pressure class (commonsense reasoning: ;  Deep: 1-33;  Medium: 34-66;  High: 66-100)",
            "defenceaggression": "Affect the teams approach to tackling the ball possessor",
            "defenceaggressionclass": "the defence aggression class (commonsense reasoning: ;  Contain: 1-33;  Press: 34-66;  Double: 66-100)",
            "defenceteamwidth": "Affects how much the team will shift to the ball side",
            "defenceteamwidthclass": "the defence team width class (commonsense reasoning: ;  Narrow: 1-33;  Normal: 34-66;  Wide: 66-100)",
            "defencedefenderlineclass": "Affects the shape and strategy of the defence (Cover/ Offside Trap)"
        },
        "match": {
            "id": "the unique id for matches",
            "country_id": "country id",
            "league_id": "league id",
            "season": "the season of the match",
            "stage": "the stage of the match",
            "date": "the date of the match (e.g. 2008-08-17 00:00:00)",
            "match_api_id": "the id of the match api",
            "home_team_api_id": "the id of the home team api",
            "away_team_api_id": "the id of the away team api",
            "home_team_goal": "the goal of the home team",
            "away_team_goal": "the goal of the away team",
            "home_player_x1": "",
            "home_player_x2": "",
            "home_player_x3": "",
            "home_player_x4": "",
            "home_player_x5": "",
            "home_player_x6": "",
            "home_player_x7": "",
            "home_player_x8": "",
            "home_player_x9": "",
            "home_player_x10": "",
            "home_player_x11": "",
            "away_player_x1": "",
            "away_player_x2": "",
            "away_player_x3": "",
            "away_player_x4": "",
            "away_player_x5": "",
            "away_player_x6": "",
            "away_player_x7": "",
            "away_player_x8": "",
            "away_player_x9": "",
            "away_player_x10": "",
            "away_player_x11": "",
            "home_player_y1": "",
            "home_player_y2": "",
            "home_player_y3": "",
            "home_player_y4": "",
            "home_player_y5": "",
            "home_player_y6": "",
            "home_player_y7": "",
            "home_player_y8": "",
            "home_player_y9": "",
            "home_player_y10": "",
            "home_player_y11": "",
            "away_player_y1": "",
            "away_player_y2": "",
            "away_player_y3": "",
            "away_player_y4": "",
            "away_player_y5": "",
            "away_player_y6": "",
            "away_player_y7": "",
            "away_player_y8": "",
            "away_player_y9": "",
            "away_player_y10": "",
            "away_player_y11": "",
            "home_player_1": "",
            "home_player_2": "",
            "home_player_3": "",
            "home_player_4": "",
            "home_player_5": "",
            "home_player_6": "",
            "home_player_7": "",
            "home_player_8": "",
            "home_player_9": "",
            "home_player_10": "",
            "home_player_11": "",
            "away_player_1": "",
            "away_player_2": "",
            "away_player_3": "",
            "away_player_4": "",
            "away_player_5": "",
            "away_player_6": "",
            "away_player_7": "",
            "away_player_8": "",
            "away_player_9": "",
            "away_player_10": "",
            "away_player_11": "",
            "goal": "the goal of the match",
            "shoton": "the shot on goal of the match (commonsense reasoning: ; A shot on goal is a shot that enters the goal or would have entered the goal if it had not been blocked by the goalkeeper or another defensive player.; )",
            "shotoff": "the shot off goal of the match, which is the opposite of shot on",
            "foulcommit": "the fouls occurred in the match",
            "card": "the cards given in the match",
            "cross": "Balls sent into the opposition team's area from a wide position in the match",
            "corner": "Ball goes out of play for a corner kick in the match",
            "possession": "The duration from a player taking over the ball in the match",
            "b365h": "",
            "b365d": "",
            "b365a": "",
            "bwh": "",
            "bwd": "",
            "bwa": "",
            "iwh": "",
            "iwd": "",
            "iwa": "",
            "lbh": "",
            "lbd": "",
            "lba": "",
            "psh": "",
            "psd": "",
            "psa": "",
            "whh": "",
            "whd": "",
            "wha": "",
            "sjh": "",
            "sjd": "",
            "sja": "",
            "vch": "",
            "vcd": "",
            "vca": "",
            "gbh": "",
            "gbd": "",
            "gba": "",
            "bsh": "",
            "bsd": "",
            "bsa": ""
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "all_prevalences": {
            "item": "the prevalent disease",
            "population type": "the population type - LIVING",
            "occurrences": "the number of occurrences",
            "population count": "the number of the counted populations ",
            "prevalence rate": "the prevalence rate (commonsense evidence: prevalence rate = occurrences / population_count)",
            "prevalence percentage": "the prevalence percentage (commonsense evidence: prevalence rate = occurrences / population_count * 100)"
        },
        "patients": {
            "patient": "the unique id for the patient",
            "birthdate": "the birth date of the patient",
            "deathdate": "the death date of the patient (commonsense evidence: ;  the age of the patient = death year - birth year ;  if null, it means this patient is still alive)",
            "ssn": "the social security number of the patient",
            "drivers": "the driver number of the patient (commonsense evidence: if not, this patient doesn't have driving license)",
            "passport": "the passport number (commonsense evidence: if not, this patient cannot go abroad, vice versa)",
            "prefix": "the prefix",
            "first": "the first name",
            "last": "the last name (commonsense evidence: full name = first + last)",
            "suffix": "the suffix of the patient (commonsense evidence: if suffix = PhD, JD, MD, it means this patient has doctoral degree. Otherwise, this patient is not.)",
            "maiden": "the maiden name of the patient (commonsense evidence: Only married women have the maiden name)",
            "marital": "the marital status of the patient (commonsense evidence: ;  M: married ;  S: single)",
            "race": "the race of the patient",
            "ethnicity": "the ethnicity of the patient",
            "gender": "the gender of the patient",
            "birthplace": "the birth place",
            "address": "the specific address"
        },
        "encounters": {
            "id": "the unique id of the encounter",
            "date": "the date of the encounter (yyyy-mm-dd)",
            "patient": "the patient id",
            "code": "the code of the care plan ",
            "description": "the description of the care plan",
            "reasoncode": "the reason code",
            "reasondescription": "the description of the reason why the patient needs the care plan"
        },
        "allergies": {
            "start": "the start date of the allergy  (mm/dd/yy)",
            "stop": "the stop date of the allergy (mm/dd/yy; commonsense evidence: allergy period = stop - start)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the allergy ",
            "description": "the description of the allergy "
        },
        "careplans": {
            "id": "the unique id of the care plan",
            "start": "the start date of the care plan (yyyy-mm-dd)",
            "stop": "the stop date of the care plan (yyyy-mm-dd; commonsense evidence: care plan period:; stop - start)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the care plan ",
            "description": "the description of the care plan",
            "reasoncode": "the reason code",
            "reasondescription": "the description of the reason why the patient needs the care plan"
        },
        "conditions": {
            "start": "the start date of the allergy  (mm/dd/yy)",
            "stop": "the stop date of the allergy (mm/dd/yy)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the condition ",
            "description": "the description of the patient condition"
        },
        "immunizations": {
            "date": "the date of the immunization (yyyy-mm-dd)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the immunization ",
            "description": "the description of the immunization"
        },
        "medications": {
            "start": "the start date of the care plan (yyyy-mm-dd)",
            "stop": "the stop date of the care plan (yyyy-mm-dd; commonsense evidence: Time of taking medicine)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the medication",
            "description": "the description of the medication",
            "reasoncode": "the reason code",
            "reasondescription": "the description of the reason why the patient take the medication"
        },
        "observations": {
            "date": "the date of the observation (yyyy-mm-dd)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the observation type",
            "description": "the description of the observation",
            "value": "the observation value",
            "units": "the units of the observation value (commonsense evidence: DESCRIPTION + VALUE + UNITS could be a fact:; e.g.: body height of patient xxx is 166.03 cm:; body height is in DESCRIPTION ; 166.03 is in VALUE ; cm is in UNITS)"
        },
        "procedures": {
            "date": "the date of the procedure (yyyy-mm-dd)",
            "patient": "the patient id",
            "encounter": "the medical encounter id",
            "code": "the code of the procedure",
            "description": "the description of the procedure",
            "reasoncode": "the code of the reason",
            "reasondescription": "the description of the reason why the patient take the procedure"
        },
        "claims": {
            "id": "the unique id of the claim",
            "patient": "the patient id",
            "billableperiod": "the start date of the billable (yyyy-mm-dd)",
            "organization": "the claim organization",
            "encounter": "the medical encounter id",
            "diagnosis": "the diagnosis",
            "total": "the length of the billable period"
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "ingredient": {
            "ingredient_id": "the unique identifier for the ingredient",
            "category": "the category of the ingredient",
            "name": "the name of the ingredient",
            "plural": "the plural suffix of the ingredient"
        },
        "recipe": {
            "recipe_id": "the unique identifier for the recipe",
            "title": "the title of the recipe",
            "subtitle": "the subtitle of the recipe",
            "servings": "the number of people the recipe can serve",
            "yield_unit": "the unit of the yield for the recipe",
            "prep_min": "the preparation minute of the recipe",
            "cook_min": "the cooked minute of the recipe",
            "stnd_min": "the stand minute of the price (commonsense evidence: The stand minute stands for the time to take the dish away from the heat source. ; the total time of the recipe = prep_min + cook_min + stnd_min)",
            "source": "the source of the recipe",
            "intro": "the introduction of the recipe",
            "directions": "the directions of the recipe"
        },
        "nutrition": {
            "recipe_id": "the id of the recipe",
            "protein": "the protein content in the recipe",
            "carbo": "the carbo content in the recipe",
            "alcohol": "the alcohol content in the recipe",
            "total_fat": "the total fat content in the recipe (commonsense evidence: higher --> higher possibility to gain weight)",
            "sat_fat": "the saturated fat content in the recipe (commonsense evidence: unsaturated fat = total_fat - saturated fat)",
            "cholestrl": "the cholesterol content in the recipe",
            "sodium": "the sodium content in the recipe (commonsense evidence:; Salt/Sodium-Free - Less than 5 mg of sodium per serving; Very Low Sodium - 35 mg of sodium or less per serving; Low Sodium -140 mg of sodium or less per serving; Reduced Sodium - At least 25% less sodium than the regular product; Light in Sodium or Lightly Salted - At least 50% less sodium than the regular product; No-Salt-Added or Unsalted - No salt is added during processing - but these products may not be salt/sodium-free unless stated)",
            "iron": "the iron content in the recipe (commonsense evidence: if iron > 20mg, it will lead to  ;  constipation ;  feeling sick ;  being sick ;  stomach pain ; question could mention any of functions listed before.)",
            "vitamin_c": "the vitamin c content in the recipe (commonsense evidence: Vitamin C, also known as ascorbic acid, if the VC is higher, it will:;  helping to protect cells and keeping them healthy ;  maintaining healthy skin, blood vessels, bones and cartilage ;  helping with wound healing ; question could mention any of functions listed before.)",
            "vitamin_a": "the vitamin a content in the recipe (commonsense evidence:; higher --> beneficial to ;  helping your body's natural defense against illness and infection (the immune system) work properly ;  helping vision in dim light ;  keeping skin and the lining of some parts of the body, such as the nose, healthy ; question could mention any of functions listed before.)",
            "fiber": "the fiber a content in the recipe",
            "pcnt_cal_carb": "percentage of carbo in total nutrient composition",
            "pcnt_cal_fat": "percentage of fat in total nutrient composition",
            "pcnt_cal_prot": "percentage of protein in total nutrient composition",
            "calories": "the calories of the recipe"
        },
        "quantity": {
            "quantity_id": "the unique identifier for the quantity",
            "recipe_id": "the id of the recipe",
            "ingredient_id": "the id of the ingredient",
            "max_qty": "the max quantity of the ingredient",
            "min_qty": "the min quantity of the ingredient (commonsense evidence: If max_qty equals to min_qty, it means that the ingredient must be rationed. )",
            "unit": "the unit of the ingredient",
            "preparation": " (commonsense evidence: 'No data' means the ingredient doesn't need preprocessing. )",
            "optional": "whether the ingredient is optional "
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "langs": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's the Catalan language.; )",
            "lang": "language name  (commonsense evidence:;  ca means Catalan language.)",
            "locale": "The locale of the language",
            "pages": "total pages of Wikipedia in this language",
            "words": "total number of words in this pages"
        },
        "pages": {
            "pid": "page id of Wikipedia about Catalan language",
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language)",
            "page": "wikipedia page id",
            "revision": "wikipedia revision page id",
            "title": "The title of this Catalan language Wikipedia page",
            "words": "number of different words in this page"
        },
        "words": {
            "wid": "The word id of the Catalan language (The value is unique.)",
            "word": "The word itself",
            "occurrences": "The occurrences of the specific word"
        },
        "langs_words": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language.)",
            "wid": "The word id of the Catalan language",
            "occurrences": "repetitions of this word in this language (it's INTEGER and DEFAULT is 0.)"
        },
        "pages_words": {
            "pid": "page id of Wikipedia about Catalan language",
            "wid": "The word id of the Catalan language (The value is unique.)",
            "occurrences": "times of this word appears into this page"
        },
        "biwords": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language.; )",
            "w1st": "The word id of the first word of the biwords pair.  (The value is unique.)",
            "w2nd": "The word id of the second word of the biwords pair.  (The value is unique.)",
            "occurrences": "times of this pair appears in this language/page"
        },
        "author": {
            "id": "Id of the author",
            "name": "Author Name",
            "affiliation": "Organization name with which the author is affiliated.  (the name of an organization with which an author can be affiliated)"
        },
        "conference": {
            "id": "Conference Id",
            "shortname": "Short name",
            "fullname": "Full name",
            "homepage": "Homepage URL of conference"
        },
        "journal": {
            "id": "Journal Id",
            "shortname": "Short name",
            "fullname": "Full name",
            "homepage": "Homepage URL of journal"
        },
        "paper": {
            "id": " Id of the paper",
            "title": "Title of the paper",
            "year": "Year of the paper (commonsense reasoning: if the year is \"0\", it means this paper is preprint, or not published)",
            "conferenceid": "Conference Id in which paper was published",
            "journalid": "Journal Id in which paper was published (commonsense reasoning: If a paper contain \"0\" in both ConferenceID and JournalId, it means this paper is preprint)",
            "keyword": "Keywords of the paper  (commonsense reasoning: Keywords should contain words and phrases that suggest what the topic is about. ; Similar keywords represent similar fields or sub-field. )"
        },
        "paperauthor": {
            "paperid": " Paper Id",
            "authorid": "Author Id (commonsense reasoning: A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair. )",
            "name": "Author Name (as written on paper)",
            "affiliation": "Author Affiliation (as written on paper) (the name of an organization with which an author can be affiliated)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "breweries": {
            "id": "unique ID of the breweries",
            "name": "name of the breweries",
            "city": "city",
            "state": "state"
        },
        "beers": {
            "id": "unique id number of beers",
            "brewery_id": "id number of the breweries",
            "abv": "alcohol by volume (Alcohol by VolumeABV is the most common measurement of alcohol content in beer; it simply indicates how much of the total volume of liquid in a beer is made up of alcohol. )",
            "ibu": "International Bitterness Units (IBU stands for International Bitterness Units, a scale to gauge the level of a beer's bitterness. More specifically, IBUs measure the parts per million of is humulone from hops in a beer, which gives beer bitterness.)",
            "name": "name of beers",
            "style": "style / sorts of beers",
            "ounces": "ounces"
        },
        "characters": {
            "movie_title": "unique title of the movie",
            "release_date": "The release date of the movie.",
            "hero": "The main character of the movie.  (commonsense evidence:; ; round role)",
            "villian": "The villain of the movie. (a character whose evil actions or motives are important to the plot. )",
            "song": "A song associated with the movie."
        },
        "director": {
            "name": "unique movie name",
            "director": "the name of the director (one director may have multiple movies.; ; more movies --> this director is more productive)"
        },
        "movies_total_gross": {
            "movie_title": "movie title",
            "release_date": "release date",
            "genre": "genre of the movie",
            "mpaa_rating": "Motion Picture Association of America of the disney movie (commonsense evidence:; â¢ G: general audience; â¢ PG: mature audiences or parental guidance suggested; â¢ R: restricted: no children under 17 allowed without parents or adult guardians; â¢ PG-13: PARENTS STRONGLY CAUTIONED. Some material may be inappropriate for children under 13; movies need accompany with parents: PG, PG-13, PG-17;; if \"Not rated\" or null, it means this film can show only gets permissions by theatre management; if the film can show without need of permissions of theatre management, the MPAA_rating should not be \"Not rated\" or null)",
            "total_gross": "The total gross of the movie. (commonsense evidence:; more total_gross--> more popular movie)",
            "inflation_adjusted_gross": "The inflation-adjusted gross of the movie. (commonsense evidence:; estimated inflation rate = inflation_adjusted_gross / total_gross;; the current gross = inflation_adjusted_gross)"
        },
        "revenue": {
            "year": "The year the movie was released.",
            "studio entertainment[ni 1]": "The studio entertainment segment of the Walt Disney Company.",
            "disney consumer products[ni 2]": "The consumer products segment of the Walt Disney Company.",
            "disney interactive[ni 3][rev 1]": "The interactive segment of the Walt Disney Company. ",
            "walt disney parks and resorts": "The parks and resorts segment of the Walt Disney Company.",
            "disney media networks": "The media networks segment of the Walt Disney Company.",
            "total": "The total box office gross for the movie."
        },
        "voice-actors": {
            "character": "The unique name of the character. ",
            "voice-actor": "The name of the voice actor.",
            "movie": "The name of the movie."
        },
        "torrents": {
            "groupname": "release title",
            "totalsnatched": "number of times the release has been downloaded",
            "artist": "artist / group name",
            "groupyear": "release year",
            "releasetype": "release type (e.g., album, single, mixtape)",
            "groupid": "Unique release identifier from What.CD. Used to ensure no releases are duplicates.",
            "id": "unique identifier (essentially an index)"
        },
        "tags": {
            "index": "index",
            "id": "release identifier which can be matched with id field in the torrents table",
            "tag": "tag"
        }
    },
    "card_games_ext": {
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "codebase_community_ext": {
        "badges": {
            "id": "the badge id",
            "userid": "the unique id of the user",
            "name": "the badge name the user obtained",
            "date": "the date that the user obtained the badge"
        },
        "comments": {
            "id": "the comment Id",
            "postid": "the unique id of the post",
            "score": "rating score (commonsense evidence:; The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment. )",
            "text": "the detailed content of the comment",
            "creationdate": "the creation date of the comment",
            "userid": "the id of the user who post the comment",
            "userdisplayname": "user's display name"
        },
        "posthistory": {
            "id": "the post history id",
            "posthistorytypeid": "the id of the post history type",
            "postid": "the unique id of the post",
            "revisionguid": "the revision globally unique id of the post",
            "creationdate": "the creation date of the post",
            "userid": "the user who post the post",
            "text": "the detailed content of the post",
            "comment": "comments of the post",
            "userdisplayname": "user's display name"
        },
        "postlinks": {
            "id": "the post link id",
            "creationdate": "the creation date of the post link",
            "postid": "the post id",
            "relatedpostid": "the id of the related post",
            "linktypeid": "the id of the link type"
        },
        "posts": {
            "id": "the post id",
            "posttypeid": "the id of the post type",
            "acceptedanswerid": "the accepted answer id of the post ",
            "creaiondate": "the creation date of the post",
            "score": "the score of the post",
            "viewcount": "the view count of the post (commonsense evidence:; Higher view count means the post has higher popularity)",
            "body": "the body of the post",
            "owneruserid": "the id of the owner user",
            "lasactivitydate": "the last activity date",
            "title": "the title of the post",
            "tags": "the tag of the post",
            "answercount": "the total number of answers of the post",
            "commentcount": "the total number of comments of the post",
            "favoritecount": "the total number of favorites of the post (commonsense evidence:; more favorite count refers to more valuable posts. )",
            "lasteditoruserid": "the id of the last editor",
            "lasteditdate": "the last edit date",
            "communityowneddate": "the community owned date",
            "parentid": "the id of the parent post (commonsense evidence:; If the parent id is null, the post is the root post. Otherwise, the post is the child post of other post. )",
            "closeddate": "the closed date of the post (commonsense evidence:; if ClosedDate is null or empty, it means this post is not well-finished; if CloseDate is not null or empty, it means this post has well-finished.)",
            "ownerdisplayname": "the display name of the post owner",
            "lasteditordisplayname": "the display name of the last editor"
        },
        "tags": {
            "id": "the tag id",
            "tagname": "the name of the tag",
            "count": "the count of posts that contain this tag (more counts --> this tag is more popular)",
            "excerptpostid": "the excerpt post id of the tag",
            "wikipostid": "the wiki post id of the tag"
        },
        "users": {
            "id": "the user id",
            "reputation": "the user's reputation (commonsense evidence:; The user with higher reputation has more influence. )",
            "creationdate": "the creation date of the user account",
            "displayname": "the user's display name",
            "lastaccessdate": "the last access date of the user account",
            "websiteurl": "the website url of the user account",
            "location": "user's location",
            "aboutme": "the self introduction of the user",
            "views": "the number of views ",
            "upvotes": "the number of upvotes",
            "downvotes": "the number of downvotes",
            "accountid": "the unique id of the account",
            "age": "user's age ( teenager: 13-18;  adult: 19-65;  elder: > 65)",
            "profileimageurl": "the profile image url"
        },
        "votes": {
            "id": "the vote id",
            "postid": "the id of the post that is voted",
            "votetypeid": "the id of the vote type",
            "creationdate": "the creation date of the vote",
            "userid": "the id of the voter",
            "bountyamount": "the amount of bounty"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        }
    },
    "california_schools_ext": {
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "thrombosis_prediction_ext": {
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "alignment": {
            "id": "the unique identifier of the alignment",
            "alignment": "the alignment of the superhero (commonsense evidence:; Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:; Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.; Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.; \tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.)"
        },
        "attribute": {
            "id": "the unique identifier of the attribute",
            "attribute_name": "the attribute (commonsense evidence:; A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. )"
        },
        "colour": {
            "id": "the unique identifier of the color",
            "colour": "the color of the superhero's skin/eye/hair/etc"
        },
        "gender": {
            "id": "the unique identifier of the gender",
            "gender": "the gender of the superhero"
        },
        "publisher": {
            "id": "the unique identifier of the publisher",
            "publisher_name": "the name of the publisher"
        },
        "race": {
            "id": "the unique identifier of the race",
            "race": "the race of the superhero (commonsense evidence:; In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics)"
        },
        "superhero": {
            "id": "the unique identifier of the superhero",
            "superhero_name": "the name of the superhero",
            "full_name": "the full name of the superhero (commonsense evidence:; The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\")",
            "gender_id": "the id of the superhero's gender",
            "eye_colour_id": "the id of the superhero's eye color",
            "hair_colour_id": "the id of the superhero's hair color",
            "skin_colour_id": "the id of the superhero's skin color",
            "race_id": "the id of the superhero's race",
            "publisher_id": "the id of the publisher",
            "alignment_id": "the id of the superhero's alignment",
            "height_cm": "the height of the superhero (commonsense evidence:; The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. )",
            "weight_kg": "the weight of the superhero (commonsense evidence:; The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.)"
        },
        "hero_attribute": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "attribute_id": "the id of the attribute; Maps to attribute(id)",
            "attribute_value": "the attribute value (commonsense evidence:; If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.)"
        },
        "superpower": {
            "id": "the unique identifier of the superpower",
            "power_name": "the superpower name"
        },
        "hero_power": {
            "hero_id": "the id of the hero; Maps to superhero(id)",
            "power_id": "the id of the power; Maps to superpower(id) (commonsense evidence:; In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.)"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "height_info": {
            "height_id": "the unique height id",
            "height_in_cm": "height in cm (e.g. 180 --> the height is 180 cm)",
            "height_in_inch": "height in inch"
        },
        "weight_info": {
            "weight_id": "the unique weight id",
            "weight_in_kg": "weight in kg (e.g. 70: -->70 kg)",
            "weight_in_lbs": "weight in lbs"
        },
        "playerinfo": {
            "eliteid": "the unique number identifying the players who attended the draft",
            "playername": "the name of the player",
            "birthdate": "the birthdate of the player",
            "birthyear": "the birth year of the player",
            "birthmonth": "the birth month of the player",
            "birthday": "the birthday of the player",
            "birthplace": "the player of the birthplace",
            "nation": "the nation of the player (commonsense evidence: can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent; e.g.: Slovakia --> Europe)",
            "height": "the id number identifying heights",
            "weight": "the id number identifying weights",
            "position_info": "position information of the player (commonsense evidence: There are six different positions in hockey: ; left wing,  ; right wing,  ; center,  ; left defenseman, ; right defenseman ; goalie. ; Left wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.)",
            "shoots": " (commonsense evidence: ;  L: Left-shooted ;  R: Right-shooted ;  '-': no preference)",
            "draftyear": "draft year",
            "draftround": "draft round",
            "overall": "overall orders of draft picks",
            "overallby": "drafted by which team",
            "css_rank": "Central Scouting Service ranking (commonsense evidence: higher rank refers to higher prospects for the draft)",
            "sum_7yr_gp": "Total NHL games played in players first 7 years of NHL career (commonsense evidence: higher --> more attendance in the first 7 years)",
            "sum_7yr_toi": "Total NHL Time on Ice in players first 7 years of NHL career (commonsense evidence: higher --> more playing time in the first 7 years of career)",
            "gp_greater_than_0": "Played a game or not in players first 7 years of NHL career ( yes ;  no)"
        },
        "seasonstatus": {
            "eliteid": "the id number of the players",
            "season": "season when players are playing",
            "team": "which team the player belong to",
            "league": "league",
            "gametype": "type of games ( Regular season  playoffs (post season))",
            "gp": "number of games",
            "g": "Goals in Draft Year",
            "a": "Assists in Draft Year",
            "p": "Points in Draft Year (commonsense evidence: higher --> more valuable)",
            "pim": "Penalty Minutes in Draft Year (commonsense evidence: higher --> This player has committed more rule violations.)",
            "plusminus": "Goal Differential in Draft Year (Goal Differential)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        }
    },
    "formula_1_ext": {
        "circuits": {
            "circuitid": "unique identification number of the circuit ",
            "circuitref": "circuit reference name "
        },
        "constructorresults": {
            "constructorresultsid": "constructor Results Id",
            "raceid": "race id",
            "constructorid": "constructor id",
            "points": "points",
            "status": "status"
        },
        "constructorstandings": {
            "points": "how many points acquired in each race "
        },
        "results": {
            "resultid": "the unique identification number identifying race result ",
            "raceid": "the identification number identifying the race "
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "event": {
            "event_id": "A unique identifier for the event",
            "event_name": "event name",
            "event_date": "The date the event took place or is scheduled to take place (e.g. 2020-03-10T12:00:00)",
            "type": "The kind of event, such as game, social, election",
            "notes": "A free text field for any notes about the event",
            "location": "Address where the event was held or is to be held or the name of such a location",
            "status": "One of three values indicating if the event is in planning, is opened, or is closed (Open/ Closed/ Planning)"
        },
        "major": {
            "major_id": "A unique identifier for each major",
            "major_name": "major name",
            "department": "The name of the department that offers the major",
            "college": "The name college that houses the department that offers the major"
        },
        "zip_code": {
            "zip_code": "The ZIP code itself. A five-digit number identifying a US post office.",
            "type": "The kind of ZIP code (commonsense evidence: ; � Standard: the normal codes with which most people are familiar ; � PO Box: zip codes have post office boxes ; � Unique: zip codes that are assigned to individual organizations.)",
            "city": "The city to which the ZIP pertains",
            "county": "The county to which the ZIP pertains",
            "state": "The name of the state to which the ZIP pertains",
            "short_state": "The abbreviation of the state to which the ZIP pertains"
        },
        "attendance": {
            "link_to_event": "The unique identifier of the event which was attended (References the Event table)",
            "link_to_member": "The unique identifier of the member who attended the event (References the Member table)"
        },
        "budget": {
            "budget_id": "A unique identifier for the budget entry",
            "category": "The area for which the amount is budgeted, such as, advertisement, food, parking",
            "spent": "The total amount spent in the budgeted category for an event. (the unit is dollar. This is summarized from the Expense table)",
            "remaining": "A value calculated as the amount budgeted minus the amount spent (the unit is dollar ; commonsense evidence: If the remaining < 0, it means that the cost has exceeded the budget.)",
            "amount": "The amount budgeted for the specified category and event (the unit is dollar ; commonsense evidence:; some computation like: amount = spent + remaining )",
            "event_status": "the status of the event (Closed / Open/ Planning ; commonsense evidence: ;  Closed: It means that the event is closed. The spent and the remaining won't change anymore.;  Open: It means that the event is already opened. The spent and the remaining will change with new expenses.;  Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. )",
            "link_to_event": "The unique identifier of the event to which the budget line applies. (References the Event table)"
        },
        "expense": {
            "expense_id": "unique id of income",
            "expense_description": "A textual description of what the money was spend for",
            "expense_date": "The date the expense was incurred (e.g. YYYY-MM-DD)",
            "cost": "The dollar amount of the expense (the unit is dollar)",
            "approved": "A true or false value indicating if the expense was approved (true/ false)",
            "link_to_member": "The member who incurred the expense",
            "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  (References the Budget table)"
        },
        "income": {
            "income_id": "A unique identifier for each record of income",
            "date_received": "the date that the fund received",
            "amount": "amount of funds (the unit is dollar)",
            "source": "A value indicating where the funds come from such as dues, or the annual university allocation",
            "notes": "A free-text value giving any needed details about the receipt of funds",
            "link_to_member": "link to member"
        },
        "member": {
            "member_id": "unique id of member",
            "first_name": "member's first name",
            "last_name": "member's last name (commonsense evidence: ; full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.)",
            "email": "member's email",
            "position": "The position the member holds in the club",
            "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered (commonsense evidence: usually the student ordered t-shirt with lager size has bigger body shape )",
            "phone": "The best telephone at which to contact the member",
            "zip": "the zip code of the member's hometown",
            "link_to_major": "The unique identifier of the major of the member. References the Major table"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "divisions": {
            "division": "division id",
            "name": "name of the division",
            "country": "country of the division"
        },
        "matchs": {
            "div": "Division Id",
            "date": "Match Date (YYYY-MM-DD)",
            "hometeam": "Name of Home Team",
            "awayteam": "Name of Away Team",
            "fthg": "Final-time Home-team Goals",
            "ftag": "Final-time Away-team Goals",
            "ftr": "Final-time Results (commonsense evidence:; H stands for home victory, which means FTHG is higher than FTAG; ; A stands for away victory, which means FTAG is higher than FTHG; ; D stands for draft, which means FTHG equals to FTAG)",
            "season": "season of the match"
        },
        "city": {
            "id": "the unique id for the city",
            "name": "the name of the city",
            "countrycode": "the country code of the country that the city is belonged",
            "district": "the district where the city locates",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)"
        },
        "country": {
            "code": "the unique country code of the country",
            "name": "the country name",
            "continent": "the continent that the country locates",
            "region": "the region that the country locates",
            "surfacearea": "the surface area of the country",
            "indepyear": "the year that the country declared independence ",
            "population": "the number of the population in the area (commonsense evidence:; ; more population --> more crowded)",
            "lifeexpectancy": "the life expectancy at birth of the country (commonsense evidence:; ;  Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change)",
            "gnp": "the GNP of the country (commonsense evidence:; ;  GNP measures the total monetary value of the output produced by a country's residents. )",
            "gnpold": "Gross national product - old value.",
            "localname": "The country's local name",
            "governmentform": "The country's goverment form. (commonsense evidence:; ; Republic: governmentform contains \"Republic\")",
            "headofstate": "The head of state full name.",
            "capital": "The country's capital  (commonsense evidence:; ; if the capital is null, it means this country doesn't have a city where a region's government is located)",
            "code2": "The second country code."
        },
        "countrylanguage": {
            "countrycode": "The unique code for country ",
            "language": "Country language",
            "isofficial": "Information on whether the language is official in a given country (T / F)",
            "percentage": "Percentage of language use"
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "langs": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's the Catalan language.; )",
            "lang": "language name  (commonsense evidence:;  ca means Catalan language.)",
            "locale": "The locale of the language",
            "pages": "total pages of Wikipedia in this language",
            "words": "total number of words in this pages"
        },
        "pages": {
            "pid": "page id of Wikipedia about Catalan language",
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language)",
            "page": "wikipedia page id",
            "revision": "wikipedia revision page id",
            "title": "The title of this Catalan language Wikipedia page",
            "words": "number of different words in this page"
        },
        "words": {
            "wid": "The word id of the Catalan language (The value is unique.)",
            "word": "The word itself",
            "occurrences": "The occurrences of the specific word"
        },
        "langs_words": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language.)",
            "wid": "The word id of the Catalan language",
            "occurrences": "repetitions of this word in this language (it's INTEGER and DEFAULT is 0.)"
        },
        "pages_words": {
            "pid": "page id of Wikipedia about Catalan language",
            "wid": "The word id of the Catalan language (The value is unique.)",
            "occurrences": "times of this word appears into this page"
        },
        "biwords": {
            "lid": "language id  (commonsense evidence: ; lid=1 means it's Catalan language.; )",
            "w1st": "The word id of the first word of the biwords pair.  (The value is unique.)",
            "w2nd": "The word id of the second word of the biwords pair.  (The value is unique.)",
            "occurrences": "times of this pair appears in this language/page"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "breweries": {
            "id": "unique ID of the breweries",
            "name": "name of the breweries",
            "city": "city",
            "state": "state"
        },
        "beers": {
            "id": "unique id number of beers",
            "brewery_id": "id number of the breweries",
            "abv": "alcohol by volume (Alcohol by VolumeABV is the most common measurement of alcohol content in beer; it simply indicates how much of the total volume of liquid in a beer is made up of alcohol. )",
            "ibu": "International Bitterness Units (IBU stands for International Bitterness Units, a scale to gauge the level of a beer's bitterness. More specifically, IBUs measure the parts per million of is humulone from hops in a beer, which gives beer bitterness.)",
            "name": "name of beers",
            "style": "style / sorts of beers",
            "ounces": "ounces"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "lists": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_title": "Name of the list",
            "list_movie_number": "Number of movies added to the list",
            "list_update_timestamp_utc": "Last update timestamp for the list",
            "list_creation_timestamp_utc": "Creation timestamp for the list",
            "list_followers": "Number of followers on the list",
            "list_url": "URL to the list page on Mubi",
            "list_comments": "Number of comments on the list",
            "list_description": "List description made by the user",
            "list_cover_image_url": "",
            "list_first_image_url": "",
            "list_second_image_url": "",
            "list_third_image_url": ""
        },
        "movies": {
            "movie_id": "ID related to the movie on Mubi",
            "movie_title": "Name of the movie",
            "movie_release_year": "Release year of the movie",
            "movie_url": "URL to the movie page on Mubi",
            "movie_title_language": "By default, the title is in English. (Only contains one value which is 'en')",
            "movie_popularity": "Number of Mubi users who love this movie",
            "movie_image_url": "Image URL to the movie on Mubi",
            "director_id": "ID related to the movie director on Mubi",
            "director_name": "Full Name of the movie director"
        },
        "ratings_users": {
            "user_id": "ID related to the user rating the movie",
            "rating_date_utc": "Rating date for the movie rating. (YYYY-MM-DD)",
            "user_trialist": "whether the user was a trialist when he rated the movie (1 = the user was a trialist when he rated the movie;  0 = the user was not a trialist when he rated the movie)",
            "user_subscriber": "whether the user was a subscriber when he rated the movie (1 = the user was a subscriber when he rated the movie ; 0 = the user was not a subscriber when he rated the movie)",
            "user_avatar_image_url": "URL to the user profile image on Mubi",
            "user_cover_image_url": "URL to the user profile cover image on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie (1 = the user was eligible for trial when he rated the movie;  0 = the user was not eligible for trial when he rated the movie)"
        },
        "lists_users": {
            "user_id": "ID related to the user who created the list.",
            "list_id": "ID of the list on Mubi",
            "list_update_date_utc": "Last update date for the list (YYYY-MM-DD)",
            "list_creation_date_utc": "Creation date for the list (YYYY-MM-DD)",
            "user_trialist": "whether the user was a tralist when he created the list  (1 = the user was a trialist when he created the list;  0 = the user was not a trialist when he created the list)",
            "user_subscriber": "whether the user was a subscriber when he created the list  (1 = the user was a subscriber when he created the list ; 0 = the user was not a subscriber when he created the list)",
            "user_avatar_image_url": "User profile image URL on Mubi",
            "user_cover_image_url": "User profile cover image URL on Mubi",
            "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  (1 = the user was eligible for trial when he created the list ; 0 = the user was not eligible for trial when he created the list)"
        },
        "ratings": {
            "movie_id": "Movie ID related to the rating",
            "rating_id": "Rating ID on Mubi",
            "rating_url": "URL to the rating on Mubi",
            "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) (commonsense evidence:; The score is proportional to the user's liking.; The higher the score is, the more the user likes the movie)",
            "critic": "Critic made by the user rating the movie.  (If value = \"None\", the user did not write a critic when rating the movie.)",
            "critic_likes": "Number of likes related to the critic made by the user rating the movie",
            "critic_comments": "Number of comments related to the critic made by the user rating the movie",
            "user_id": "ID related to the user rating the movie",
            "user_subscriber": "",
            "user_eligible_for_trial": "",
            "user_has_payment_method": ""
        },
        "people": {
            "customer id": "the id of the customers",
            "customer name": "the name of the customers",
            "segment": "the segment that the customers belong to (commonsense evidence: ;  consumer ;  home office: synonym: headquarter. ;  corporate)",
            "country": "the country of people",
            "city": "the city of people",
            "state": "the state of people (commonsense evidence: please mention its full name in the question, by referring to ; https://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971; e.g., New York --> NY)",
            "postal code": "the postal code",
            "region": "the region of people ( Central: ;  East: ;  West: ;  South: )"
        },
        "product": {
            "product id": "the id of products",
            "product name": "the name of products",
            "category": "the categories of products ( Furniture ;  Office Supplies ;  Technology)",
            "sub-category": "the sub-categories of products ( Bookcases ;  Chairs ;  Furnishings ;  Tables ;  Appliances ;  Art ;  Binders ;  Envelopes ;  Fasteners ;  Labels ;  Paper ;  Storage ;  Supplies ;  Accessories ;  Copiers ;  Machines ;  Phones )",
            "region": "the region of products ( Central: ;  East: ;  West: ;  South:)"
        },
        "central_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd; commonsense evidence: ; 'shipment time' refers to the time interval between order_date and ship_date.)",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest.)",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount))",
            "profit": "the profit that the company got by selling the product (commonsense evidence:; total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative)"
        },
        "east_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd; commonsense evidence: 'shipment time' refers to the time interval between order_date and ship_date. )",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest.; )",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount))",
            "profit": "the profit that the company got by selling the product (commonsense evidence: total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative; )"
        },
        "south_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd ; commonsense evidence: 'shipment time' refers to the time interval between order_date and ship_date. )",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest. )",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount); )",
            "profit": "the profit that the company got by selling the product (commonsense evidence: total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative; )"
        },
        "west_superstore": {
            "row id": "the unique id for rows",
            "order id": "the unique identifier for the order",
            "order date": "the date of the order (yyyy-mm-dd)",
            "ship date": "the date of the shipment (yyyy-mm-dd; commonsense evidence: 'shipment time' refers to the time interval between order_date and ship_date. )",
            "ship mode": "the ship mode of the order (First Class / Second Class / Standard Class; commonsense evidence: Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest. )",
            "customer id": "the id of the customer",
            "region": "region of the customer's address",
            "product id": "the id of the product",
            "sales": "the sales of the product",
            "quantity": "the quantity of the product",
            "discount": "the discount of the product (commonsense evidence: original price = sales / (1- discount))",
            "profit": "the profit that the company got by selling the product (commonsense evidence: total cost of products =  sales / (1- discount) * quantity - profit; deficiency: if the value is negative)"
        }
    },
    "european_football_2_ext": {
        "player_attributes": {
            "id": "the unique id for players",
            "player_fifa_api_id": "the id of the player fifa api",
            "player_api_id": "the id of the player api",
            "date": "date (e.g. 2016-02-18 00:00:00)",
            "overall_rating": "the overall rating of the player (commonsense reasoning: ; The rating is between 0-100 which is calculated by FIFA.;  Higher overall rating means the player has a stronger overall strength.)",
            "potential": "potential of the player (commonsense reasoning: ; The potential score is between 0-100 which is calculated by FIFA.;  Higher potential score means that the player has more potential)",
            "preferred_foot": "the player's preferred foot when attacking (right/ left)",
            "attacking_work_rate": "the player's attacking work rate (commonsense reasoning: ;  high: implies that the player is going to be in all of your attack moves;  medium: implies that the player will select the attack actions he will join in;  low: remain in his position while the team attacks )",
            "defensive_work_rate": "the player's defensive work rate (commonsense reasoning: ;  high: remain in his position and defense while the team attacks ;  medium: implies that the player will select the defensive actions he will join in;  low: implies that the player is going to be in all of your attack moves instead of defensing)",
            "crossing": "the player's crossing score  (commonsense reasoning: ; Cross is a long pass into the opponent's goal towards the header of sixth-yard teammate.;  The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.;  Higher potential score means that the player performs better in crossing actions. )",
            "finishing": "the player's finishing rate (0-100 which is calculated by FIFA)",
            "heading_accuracy": "the player's heading accuracy (0-100 which is calculated by FIFA)",
            "short_passing": "the player's short passing score (0-100 which is calculated by FIFA)",
            "volleys": "the player's volley score (0-100 which is calculated by FIFA)",
            "dribbling": "the player's dribbling score (0-100 which is calculated by FIFA)",
            "curve": "the player's curve score (0-100 which is calculated by FIFA)",
            "free_kick_accuracy": "the player's free kick accuracy (0-100 which is calculated by FIFA)",
            "long_passing": "the player's long passing score (0-100 which is calculated by FIFA)",
            "ball_control": "the player's ball control score (0-100 which is calculated by FIFA)",
            "acceleration": "the player's acceleration score (0-100 which is calculated by FIFA)",
            "sprint_speed": "the player's sprint speed;  (0-100 which is calculated by FIFA)",
            "agility": "the player's agility (0-100 which is calculated by FIFA)",
            "reactions": "the player's reactions score (0-100 which is calculated by FIFA)",
            "balance": "the player's balance score (0-100 which is calculated by FIFA)",
            "shot_power": "the player's shot power (0-100 which is calculated by FIFA)",
            "jumping": "the player's jumping score (0-100 which is calculated by FIFA)",
            "stamina": "the player's stamina score (0-100 which is calculated by FIFA)",
            "strength": "the player's strength score (0-100 which is calculated by FIFA)",
            "long_shots": "the player's long shots score (0-100 which is calculated by FIFA)",
            "aggression": "the player's aggression score (0-100 which is calculated by FIFA)",
            "interceptions": "the player's interceptions score (0-100 which is calculated by FIFA)",
            "positioning": "the player's ; positioning score;  (0-100 which is calculated by FIFA)",
            "vision": "the player's vision score;  (0-100 which is calculated by FIFA)",
            "penalties": "the player's penalties score;  (0-100 which is calculated by FIFA)",
            "marking": "the player's markingscore (0-100 which is calculated by FIFA)",
            "standing_tackle": "the player's standing tackle score (0-100 which is calculated by FIFA)",
            "sliding_tackle": "the player's sliding tackle score (0-100 which is calculated by FIFA)",
            "gk_diving": "the player's goalkeep diving score (0-100 which is calculated by FIFA)",
            "gk_handling": "the player's goalkeep diving score (0-100 which is calculated by FIFA)",
            "gk_kicking": "the player's goalkeep kicking score (0-100 which is calculated by FIFA)",
            "gk_positioning": "the player's goalkeep positioning score (0-100 which is calculated by FIFA)",
            "gk_reflexes": "the player's goalkeep reflexes score (0-100 which is calculated by FIFA)"
        },
        "player": {
            "id": "the unique id for players",
            "player_api_id": "the id of the player api",
            "player_name": "player name",
            "player_fifa_api_id": "the id of the player fifa api",
            "birthday": "the player's birthday (e.g. 1992-02-29 00:00:00 ; commonsense reasoning: ; Player A is older than player B means that A's birthday is earlier than B's)",
            "height": "the player's height",
            "weight": "the player's weight"
        },
        "league": {
            "id": "the unique id for leagues",
            "country_id": "the unique id for countries",
            "name": "league name"
        },
        "country": {
            "id": "the unique id for countries",
            "name": "country name"
        },
        "team": {
            "id": "the unique id for teams",
            "team_api_id": "the id of the team api",
            "team_fifa_api_id": "the id of the team fifa api",
            "team_long_name": "the team's long name",
            "team_short_name": "the team's short name"
        },
        "team_attributes": {
            "id": "the unique id for teams",
            "team_fifa_api_id": "the id of the team fifa api",
            "team_api_id": "the id of the team api",
            "date": "Date (e.g. 2010-02-22 00:00:00)",
            "buildupplayspeed": "the speed in which attacks are put together  (the score which is between 1-00 to measure the team's attack speed)",
            "buildupplayspeedclass": "the speed class (commonsense reasoning: ;  Slow: 1-33;  Balanced: 34-66;  Fast: 66-100)",
            "buildupplaydribbling": "the tendency/ frequency of dribbling",
            "buildupplaydribblingclass": "the dribbling class (commonsense reasoning: ;  Little: 1-33;  Normal: 34-66;  Lots: 66-100)",
            "buildupplaypassing": "affects passing distance and support from teammates",
            "buildupplaypassingclass": "the passing class (commonsense reasoning: ;  Short: 1-33;  Mixed: 34-66;  Long: 66-100)",
            "buildupplaypositioningclass": "A team's freedom of movement in the 1st two thirds of the pitch (Organised / Free Form)",
            "chancecreationpassing": "Amount of risk in pass decision and run support",
            "chancecreationpassingclass": "the chance creation passing class (commonsense reasoning: ;  Safe: 1-33;  Normal: 34-66;  Risky: 66-100)",
            "chancecreationcrossing": "The tendency / frequency of crosses into the box",
            "chancecreationcrossingclass": "the chance creation crossing class (commonsense reasoning: ;  Little: 1-33;  Normal: 34-66;  Lots: 66-100)",
            "chancecreationshooting": "The tendency / frequency of shots taken",
            "chancecreationshootingclass": "the chance creation shooting class (commonsense reasoning: ;  Little: 1-33;  Normal: 34-66;  Lots: 66-100)",
            "chancecreationpositioningclass": "A teams freedom of movement in the final third of the pitch (Organised / Free Form)",
            "defencepressure": "Affects how high up the pitch the team will start pressuring",
            "defencepressureclass": "the defence pressure class (commonsense reasoning: ;  Deep: 1-33;  Medium: 34-66;  High: 66-100)",
            "defenceaggression": "Affect the teams approach to tackling the ball possessor",
            "defenceaggressionclass": "the defence aggression class (commonsense reasoning: ;  Contain: 1-33;  Press: 34-66;  Double: 66-100)",
            "defenceteamwidth": "Affects how much the team will shift to the ball side",
            "defenceteamwidthclass": "the defence team width class (commonsense reasoning: ;  Narrow: 1-33;  Normal: 34-66;  Wide: 66-100)",
            "defencedefenderlineclass": "Affects the shape and strategy of the defence (Cover/ Offside Trap)"
        },
        "match": {
            "id": "the unique id for matches",
            "country_id": "country id",
            "league_id": "league id",
            "season": "the season of the match",
            "stage": "the stage of the match",
            "date": "the date of the match (e.g. 2008-08-17 00:00:00)",
            "match_api_id": "the id of the match api",
            "home_team_api_id": "the id of the home team api",
            "away_team_api_id": "the id of the away team api",
            "home_team_goal": "the goal of the home team",
            "away_team_goal": "the goal of the away team",
            "home_player_x1": "",
            "home_player_x2": "",
            "home_player_x3": "",
            "home_player_x4": "",
            "home_player_x5": "",
            "home_player_x6": "",
            "home_player_x7": "",
            "home_player_x8": "",
            "home_player_x9": "",
            "home_player_x10": "",
            "home_player_x11": "",
            "away_player_x1": "",
            "away_player_x2": "",
            "away_player_x3": "",
            "away_player_x4": "",
            "away_player_x5": "",
            "away_player_x6": "",
            "away_player_x7": "",
            "away_player_x8": "",
            "away_player_x9": "",
            "away_player_x10": "",
            "away_player_x11": "",
            "home_player_y1": "",
            "home_player_y2": "",
            "home_player_y3": "",
            "home_player_y4": "",
            "home_player_y5": "",
            "home_player_y6": "",
            "home_player_y7": "",
            "home_player_y8": "",
            "home_player_y9": "",
            "home_player_y10": "",
            "home_player_y11": "",
            "away_player_y1": "",
            "away_player_y2": "",
            "away_player_y3": "",
            "away_player_y4": "",
            "away_player_y5": "",
            "away_player_y6": "",
            "away_player_y7": "",
            "away_player_y8": "",
            "away_player_y9": "",
            "away_player_y10": "",
            "away_player_y11": "",
            "home_player_1": "",
            "home_player_2": "",
            "home_player_3": "",
            "home_player_4": "",
            "home_player_5": "",
            "home_player_6": "",
            "home_player_7": "",
            "home_player_8": "",
            "home_player_9": "",
            "home_player_10": "",
            "home_player_11": "",
            "away_player_1": "",
            "away_player_2": "",
            "away_player_3": "",
            "away_player_4": "",
            "away_player_5": "",
            "away_player_6": "",
            "away_player_7": "",
            "away_player_8": "",
            "away_player_9": "",
            "away_player_10": "",
            "away_player_11": "",
            "goal": "the goal of the match",
            "shoton": "the shot on goal of the match (commonsense reasoning: ; A shot on goal is a shot that enters the goal or would have entered the goal if it had not been blocked by the goalkeeper or another defensive player.; )",
            "shotoff": "the shot off goal of the match, which is the opposite of shot on",
            "foulcommit": "the fouls occurred in the match",
            "card": "the cards given in the match",
            "cross": "Balls sent into the opposition team's area from a wide position in the match",
            "corner": "Ball goes out of play for a corner kick in the match",
            "possession": "The duration from a player taking over the ball in the match",
            "b365h": "",
            "b365d": "",
            "b365a": "",
            "bwh": "",
            "bwd": "",
            "bwa": "",
            "iwh": "",
            "iwd": "",
            "iwa": "",
            "lbh": "",
            "lbd": "",
            "lba": "",
            "psh": "",
            "psd": "",
            "psa": "",
            "whh": "",
            "whd": "",
            "wha": "",
            "sjh": "",
            "sjd": "",
            "sja": "",
            "vch": "",
            "vcd": "",
            "vca": "",
            "gbh": "",
            "gbd": "",
            "gba": "",
            "bsh": "",
            "bsd": "",
            "bsa": ""
        },
        "atom": {
            "atom_id": "the unique id of atoms",
            "molecule_id": "identifying the molecule to which the atom belongs (commonsense evidence:; TRXXX_i represents ith atom of molecule TRXXX)",
            "element": "the element of the toxicology  ( cl: chlorine;  c: carbon;  h: hydrogen;  o: oxygen;  s: sulfur;  n: nitrogen;  p: phosphorus;  na: sodium;  br: bromine;  f: fluorine;  i: iodine;  sn: Tin;  pb: lead;  te: tellurium;  ca: Calcium)"
        },
        "bond": {
            "bond_id": "unique id representing bonds (TRxxx_A1_A2:; TRXXX refers to which molecule; A1 and A2 refers to which atom)",
            "molecule_id": "identifying the molecule in which the bond appears",
            "bond_type": "type of the bond (commonsense evidence:; -: single bond; '=': double bond; '#': triple bond)"
        },
        "connected": {
            "atom_id": "id of the first atom",
            "atom_id2": "id of the second atom",
            "bond_id": "bond id representing bond between two atoms"
        },
        "molecule": {
            "molecule_id": "unique id of molecule (\"+\" --> this molecule / compound is carcinogenic; '-' this molecule is not / compound carcinogenic)",
            "label": "whether this molecule is carcinogenic or not"
        },
        "customers": {
            "customerid": "identification of the customer",
            "segment": "client segment",
            "currency": "Currency"
        },
        "gasstations": {
            "gasstationid": "Gas Station ID",
            "chainid": "Chain ID",
            "country": "",
            "segment": "chain segment"
        },
        "products": {
            "productid": "Product ID",
            "description": "Description"
        },
        "transactions_1k": {
            "transactionid": "Transaction ID",
            "date": "Date",
            "time": "Time",
            "customerid": "Customer ID",
            "cardid": "Card ID",
            "gasstationid": "Gas Station ID",
            "productid": "Product ID",
            "amount": "Amount",
            "price": "Price (commonsense evidence:; ; total price = Amount x Price)"
        },
        "yearmonth": {
            "customerid": "Customer ID",
            "date": "Date",
            "consumption": "consumption"
        },
        "cards": {
            "id": "",
            "artist": "The name of the artist that illustrated the card art.",
            "asciiname": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters.",
            "availability": "A list of the card's available printing types. (\"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\")",
            "bordercolor": "The color of the card border. (\"black\", \"borderless\", \"gold\", \"silver\", \"white\")",
            "cardkingdomfoilid": "card Kingdom Foil Id (commonsense evidence:; cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. )",
            "cardkingdomid": "card Kingdom Id (A list of all the colors in the color indicator)",
            "coloridentity": "A list of all the colors found in manaCost, colorIndicator, and text",
            "colorindicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types).",
            "colors": "A list of all the colors in manaCost and colorIndicator.  (Some cards may not have values, such as cards with \"Devoid\" in its text.)",
            "convertedmanacost": "The converted mana cost of the card. Use the manaValue property. (if value is higher, it means that this card cost more converted mana )",
            "dueldeck": "The indicator for which duel deck the card is in.",
            "edhrecrank": "The card rank on EDHRec",
            "faceconvertedmanacost": "The converted mana cost or mana value for the face for either half or part of the card.  (if value is higher, it means that this card cost more converted mana for the face)",
            "facename": "The name on the face of the card.",
            "flavorname": "The promotional card name printed above the true card name on special cards that has no game function. (The promotional card name printed above the true card name on special cards that has no game function.)",
            "flavortext": "The italicized text found below the rules text that has no game function. (The italicized text found below the rules text that has no game function.)",
            "frameeffects": "The visual frame effects. (\"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\")",
            "frameversion": "The version of the card frame style. (\"1993\", \"1997\", \"2003\", \"2015\", \"future\")",
            "hand": "The starting maximum hand size total modifier.  (A + or - character precedes an integer. ; commonsense evidence:; positive maximum hand size: +1, +2, ....; negative maximum hand size: -1, ....; neural maximum hand size: 0....)",
            "hasalternativedecklimit": "If the card allows a value other than 4 copies in a deck. (0: disallow 1: allow)",
            "hascontentwarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. (0: doesn't have 1: has sensitve content or Wizards of the Coast; commonsense evidence:; Cards with this property may have missing or degraded properties and values. )",
            "hasfoil": "If the card can be found in foil (0: cannot be found 1: can be found)",
            "hasnonfoil": "If the card can be found in non-foil (0: cannot be found 1: can be found)",
            "isalternative": "If the card is an alternate variation to an original printing (0: is not 1: is)",
            "isfullart": "If the card has full artwork. (0: doesn't have, 1: has full artwork)",
            "isonlineonly": "If the card is only available in online game variations. (0: is not 1: is)",
            "isoversized": "If the card is oversized. (0: is not 1: is)",
            "ispromo": "If the card is a promotional printing. (0: is not 1: is)",
            "isreprint": "If the card has been reprinted. (0: has not 1: has not been)",
            "isreserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) (If the card is on the Magic, it will appear in The Gathering Reserved List)",
            "isstarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. (0: is not 1: is)",
            "isstoryspotlight": "If the card is a Story Spotlight card. (0: is not 1: is)",
            "istextless": "If the card does not have a text box. (commonsense evidence:; 0: has a text box;; 1: doesn't have a text box;)",
            "istimeshifted": "If the card is time shifted (commonsense evidence:; If the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.)",
            "keywords": "A list of keywords found on the card.",
            "layout": "The type of card layout. For a token card, this will be \"token\"",
            "leadershipskills": "A list of formats the card is legal to be a commander in",
            "life": "The starting life total modifier. A plus or minus character precedes an integer.",
            "loyalty": "The starting loyalty value of the card. (Used only on cards with \"Planeswalker\" in its types. empty means unkown)",
            "manacost": "The mana cost of the card wrapped in brackets for each value. (commonsense evidence:; manaCost is unconverted mana cost)",
            "mcmid": " (NOT USEFUL)",
            "mcmmetaid": " (NOT USEFUL)",
            "mtgarenaid": " (NOT USEFUL)",
            "mtgjsonv4id": " (NOT USEFUL)",
            "mtgofoilid": " (NOT USEFUL)",
            "mtgoid": " (NOT USEFUL)",
            "multiverseid": " (NOT USEFUL)",
            "name": "The name of the card. (Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.)",
            "number": "The number of the card",
            "originalreleasedate": "original Release Date (The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.)",
            "originaltext": "original Text (The text on the card as originally printed.)",
            "originaltype": "original Type (The type of the card as originally printed. Includes any supertypes and subtypes.)",
            "otherfaceids": "other Face Ids (A list of card UUID's to this card's counterparts, such as transformed or melded faces.)",
            "power": "The power of the card. (commonsense evidence:; ∞ means infinite power; null or * refers to unknown power)",
            "printings": "A list of set printing codes the card was printed in, formatted in uppercase.",
            "promotypes": "A list of promotional types for a card. (\"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\")",
            "purchaseurls": "Links that navigate to websites where the card can be purchased.",
            "rarity": "The card printing rarity.",
            "scryfallid": " (NOT USEFUL)",
            "scryfallillustrationid": " (NOT USEFUL)",
            "scryfalloracleid": " (NOT USEFUL)",
            "setcode": "The set printing code that the card is from.",
            "side": "The identifier of the card side.  (Used on cards with multiple faces on the same card.; commonsense evidence:; if this value is empty, then it means this card doesn't have multiple faces on the same card.)",
            "subtypes": "A list of card subtypes found after em-dash.",
            "supertypes": "A list of card supertypes found before em-dash. (commonsense evidence:; list of all types should be the union of subtypes and supertypes)",
            "tcgplayerproductid": "",
            "text": "The rules text of the card.",
            "toughness": "The toughness of the card.",
            "type": "The type of the card as visible, including any supertypes and subtypes. (\"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You’ll\", \"instant\")",
            "types": "A list of all card types of the card, including Un‑sets and gameplay variants.",
            "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. (NOT USEFUL)",
            "variations": "",
            "watermark": "The name of the watermark on the card."
        },
        "foreign_data": {
            "id": "unique id number identifying this row of data",
            "flavortext": "The foreign flavor text of the card.",
            "language": "The foreign language of card.",
            "multiverseid": "The foreign multiverse identifier of the card.",
            "name": "The foreign name of the card.",
            "text": "The foreign text ruling of the card.",
            "type": "The foreign type of the card. Includes any supertypes and subtypes.",
            "uuid": ""
        },
        "legalities": {
            "id": "unique id identifying this legality",
            "format": "format of play (each value refers to different rules to play)",
            "status": " (• legal; • banned; • restricted)",
            "uuid": ""
        },
        "sets": {
            "id": "unique id identifying this set",
            "basesetsize": "The number of cards in the set.",
            "block": "The block name the set was in.",
            "booster": "A breakdown of possibilities and weights of cards in a booster pack.",
            "code": "The set code for the set.",
            "isfoilonly": "If the set is only available in foil.",
            "isforeignonly": "If the set is available only outside the United States of America.",
            "isnonfoilonly": "If the set is only available in non-foil.",
            "isonlineonly": "If the set is only available in online game variations.",
            "ispartialpreview": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
            "keyrunecode": "The matching Keyrune code for set image icons.",
            "mcmid": "The Magic Card Marketset identifier.",
            "mcmidextras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier.",
            "mcmname": "",
            "mtgocode": "The set code for the set as it appears on Magic: The Gathering Online (commonsense evidence:; if the value is null or empty, then it doesn't appear on Magic: The Gathering Online)",
            "name": "The name of the set.",
            "parentcode": "The parent set code for set variations like promotions, guild kits, etc.",
            "releasedate": "The release date in ISO 8601 format for the set.",
            "tcgplayergroupid": "The group identifier of the set on TCGplayer",
            "totalsetsize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.",
            "type": "The expansion type of the set. (\"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\")"
        },
        "frpm": {
            "cdscode": "CDSCode",
            "academic year": "Academic Year",
            "county code": "County Code",
            "district code": "District Code",
            "county name": "County Code ",
            "school name": "School Name ",
            "district type": "District Type",
            "educational option type": "Educational Option Type",
            "nslp provision status": "NSLP Provision Status",
            "charter school (y/n)": "Charter School (Y/N) (0: N;; 1: Y)",
            "charter school number": "Charter School Number",
            "charter funding type": "Charter Funding Type",
            "irc": " (Not useful)",
            "low grade": "Low Grade",
            "high grade": "High Grade",
            "enrollment (k-12)": "Enrollment (K-12) (commonsense evidence:; ; K-12: 1st grade - 12nd grade )",
            "free meal count (k-12)": "Free Meal Count (K-12) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "percent (%) eligible free (k-12)": "",
            "frpm count (k-12)": "Free or Reduced Price Meal Count (K-12) (commonsense evidence:; ; eligible FRPM rate = FRPM / Enrollment)",
            "percent (%) eligible frpm (k-12)": "",
            "enrollment (ages 5-17)": "Enrollment (Ages 5-17)",
            "free meal count (ages 5-17)": "Free Meal Count (Ages 5-17) (commonsense evidence:; ; eligible free rate = Free Meal Count / Enrollment)",
            "frpm count (ages 5-17)": "",
            "percent (%) eligible frpm (ages 5-17)": "",
            "2013-14 calpads fall 1 certification status": "2013-14 CALPADS Fall 1 Certification Status"
        },
        "satscores": {
            "cds": "California Department Schools",
            "rtype": "rtype (unuseful)",
            "sname": "school name",
            "dname": "district segment",
            "cname": "county name",
            "enroll12": "enrollment (1st-12nd grade)",
            "numtsttakr": "Number of Test Takers in this school (number of test takers in each school)",
            "avgscrread": "average scores in Reading (average scores in Reading)",
            "avgscrmath": "average scores in Math (average scores in Math)",
            "avgscrwrite": "average scores in writing (average scores in writing)",
            "numge1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 (Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500; ; commonsense evidence:; ; Excellence Rate = NumGE1500 / NumTstTakr)"
        },
        "schools": {
            "cdscode": "CDSCode",
            "ncesdist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.",
            "ncesschool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.",
            "statustype": "This field identifies the status of the district.  (Definitions of the valid status types are listed below:; ·       Active: The district is in operation and providing instructional services.; ·       Closed: The district is not in operation and no longer providing instructional services.; ·       Merged: The district has combined with another district or districts.; ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.)",
            "county": "County name",
            "district": "District",
            "school": "School",
            "street": "Street",
            "streetabr": "The abbreviated street address of the school, district, or administrative authority’s physical location. (The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.)",
            "city": "City",
            "zip": "Zip",
            "state": "State",
            "mailstreet": "MailStreet (The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.)",
            "mailstrabr": " (the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.)",
            "mailcity": " (The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.)",
            "mailzip": " (The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.)",
            "mailstate": " (The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.)",
            "phone": "Phone",
            "ext": "The phone number extension of the school, district, or administrative authority. (The phone number extension of the school, district, or administrative authority.)",
            "website": "The website address of the school, district, or administrative authority. (The website address of the school, district, or administrative authority.)",
            "opendate": "The date the school opened.",
            "closeddate": "The date the school closed.",
            "charter": "This field identifies a charter school.  (The field is coded as follows:; ; ·       1 = The school is a charter; ; ·       0 = The school is not a charter)",
            "charternum": "The charter school number, (4-digit number assigned to a charter school.)",
            "fundingtype": "Indicates the charter school funding type (Values are as follows:; ; ·       Not in CS (California School) funding model; ; ·       Locally funded; ; ·       Directly funded)",
            "doc": "District Ownership Code (The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.; •       00 - County Office of Education; •       02 – State Board of Education; •       03 – Statewide Benefit Charter; •       31 – State Special Schools; •       34 – Non-school Location*; •       52 – Elementary School District; •       54 – Unified School District; •       56 – High School District; •       98 – Regional Occupational Center/Program (ROC/P); commonsense evidence:; *Only the California Education Authority has been included in the non-school location category.)",
            "doctype": "The District Ownership Code Type is the text description of the DOC category. ((See text values in DOC field description above))",
            "soc": "The School Ownership Code is a numeric code used to identify the type of school. (•      08 - Preschool      ; •       09 – Special Education Schools (Public); •      11 – Youth Authority Facilities (CEA); •       13 – Opportunity Schools; •       14 – Juvenile Court Schools; •       15 – Other County or District Programs; •       31 – State Special Schools; •       60 – Elementary School (Public); •       61 – Elementary School in 1 School District (Public); •       62 – Intermediate/Middle Schools (Public); •       63 – Alternative Schools of Choice; •       64 – Junior High Schools (Public); •       65 – K-12 Schools (Public); •       66 – High Schools (Public); •       67 – High Schools in 1 School District (Public); •       68 – Continuation High Schools; •       69 – District Community Day Schools; •       70 – Adult Education Centers; •       98 – Regional Occupational Center/Program (ROC/P))",
            "soctype": "The School Ownership Code Type is the text description of the type of school. (The School Ownership Code Type is the text description of the type of school.)",
            "edopscode": "The Education Option Code is a short text description of the type of education offered. (; •      ALTSOC – Alternative School of Choice; •      COMM – County Community School; •       COMMDAY – Community Day School; •       CON – Continuation School; •       JUV – Juvenile Court School; •       OPP – Opportunity School; •       YTH – Youth Authority School; •       SSS – State Special School; •       SPEC – Special Education School; •       TRAD – Traditional; •       ROP – Regional Occupational Program; •       HOMHOS – Home and Hospital; •       SPECON – District Consortia Special Education School)",
            "edopsname": "Educational Option Name (The Educational Option Name is the long text description of the type of education being offered.)",
            "eilcode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. (•       A – Adult; •       ELEM – Elementary; •       ELEMHIGH – Elementary-High Combination; •       HS – High School; •       INTMIDJR – Intermediate/Middle/Junior High; •       PS – Preschool; •       UG – Ungraded)",
            "eilname": "The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. (The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.)",
            "gsoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. (For example XYZ School might display the following data:; ; GSoffered = P–Adult; ; GSserved = K–12)",
            "gsserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. (commonsense evidence:; ; 1.     Only K–12 enrollment is reported through CALPADS; ; 2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type)",
            "virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  (The field is coded as follows:; ; ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.; ; ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.; ; ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.; ; ·       N = Not Virtual – The school does not offer any virtual instruction.; ; ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.)",
            "magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  (The field is coded as follows:; ; ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.; ; ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.; ; commonsense evidence:; ; Note: Preschools and adult education centers do not contain a magnet school indicator.)",
            "latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.)",
            "longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. (The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.)",
            "admfname1": "administrator's first name (The superintendent’s or principal’s first name.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admlname1": "administrator's last name (The superintendent’s or principal’s last name.; ; commonsense evidence:; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admemail1": "administrator's email address (The superintendent’s or principal’s email address.; ; commonsense evidence:; ; Only active and pending districts and schools will display administrator information, if applicable.)",
            "admfname2": " (SAME as 1)",
            "admlname2": "",
            "admemail2": "",
            "admfname3": " (not useful)",
            "admlname3": " (not useful)",
            "admemail3": " (not useful)",
            "lastupdate": " (when is this record updated last time)"
        },
        "examination": {
            "id": "identification of the patient",
            "examination date": "Examination Date",
            "acl igg": "anti-Cardiolipin antibody (IgG) concentration",
            "acl igm": "anti-Cardiolipin antibody (IgM) concentration",
            "ana": "anti-nucleus antibody concentration",
            "ana pattern": "pattern observed in the sheet of ANA examination",
            "acl iga": "anti-Cardiolipin antibody (IgA) concentration",
            "diagnosis": "disease names",
            "kct": "measure of degree of coagulation (+: positive; ; -: negative)",
            "rvvt": "measure of degree of coagulation (+: positive; ; -: negative)",
            "lac": "measure of degree of coagulation (+: positive; ; -: negative)",
            "symptoms": "other symptoms observed",
            "thrombosis": "degree of thrombosis (0: negative (no thrombosis); 1: positive (the most severe one); 2: positive (severe)3: positive (mild))"
        },
        "patient": {
            "id": "identification of the patient",
            "sex": "Sex (F: female; M: male)",
            "birthday": "Birthday",
            "description": "the first date when a patient data was recorded (null or empty: not recorded)",
            "first date": "the date when a patient came to the hospital",
            "admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) (patient was admitted to the hospital (+) or followed at the outpatient clinic (-))",
            "diagnosis": "disease names"
        },
        "laboratory": {
            "id": "identification of the patient",
            "date": "Date of the laboratory tests (YYMMDD)",
            "got": "AST glutamic oxaloacetic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "gpt": "ALT glutamic pyruvic transaminase (Commonsense evidence:; ; Normal range: N < 60)",
            "ldh": "lactate dehydrogenase (Commonsense evidence:; ; Normal range: N < 500)",
            "alp": "alkaliphophatase (Commonsense evidence:; ; Normal range: N < 300)",
            "tp": "total protein (Commonsense evidence:; ; Normal range: 6.0 < N < 8.5)",
            "alb": "albumin (Commonsense evidence:; ; Normal range: 3.5 < N < 5.5)",
            "ua": "uric acid (Commonsense evidence:; ; Normal range: N > 8.0 (Male)N > 6.5 (Female))",
            "un": "urea nitrogen (Commonsense evidence:; ; Normal range: N < 30)",
            "cre": "creatinine (Commonsense evidence:; ; Normal range: N < 1.5)",
            "t-bil": "total bilirubin (Commonsense evidence:; ; Normal range: N < 2.0)",
            "t-cho": "total cholesterol (Commonsense evidence:; Normal range: N < 250)",
            "tg": "triglyceride (Commonsense evidence:; ; Normal range: N < 200)",
            "cpk": "creatinine phosphokinase (Commonsense evidence:; Normal range: N < 250)",
            "glu": "blood glucose (Commonsense evidence:; Normal range: N < 180)",
            "wbc": "White blood cell (Commonsense evidence:; Normal range: 3.5 < N < 9.0)",
            "rbc": "Red blood cell (Commonsense evidence:; ; Normal range: 3.5 < N < 6.0)",
            "hgb": "Hemoglobin (Commonsense evidence:; ; Normal range: 10 < N < 17)",
            "hct": "Hematoclit (Commonsense evidence:; Normal range: 29 < N < 52)",
            "plt": "platelet (Commonsense evidence:; ; Normal range: 100 < N < 400)",
            "pt": "prothrombin time (Commonsense evidence:; ; Normal range: N < 14)",
            "aptt": "activated partial prothrombin time (Commonsense evidence:; ; Normal range: N < 45)",
            "fg": "fibrinogen (Commonsense evidence:; ; Normal range: 150 < N < 450)",
            "pic": "",
            "tat": "",
            "tat2": "",
            "u-pro": "proteinuria (Commonsense evidence:; ; Normal range: 0 < N < 30)",
            "igg": "Ig G (Commonsense evidence:; ; Normal range: 900 < N < 2000)",
            "iga": "Ig A (Commonsense evidence:; ; Normal range: 80 < N < 500)",
            "igm": "Ig M (Commonsense evidence:; ; Normal range: 40 < N < 400)",
            "crp": "C-reactive protein (Commonsense evidence:; ; Normal range: N= -, +-, or N < 1.0)",
            "ra": "Rhuematoid Factor (Commonsense evidence:; ; Normal range: N= -, +-)",
            "rf": "RAHA (Commonsense evidence:; ; Normal range: N < 20)",
            "c3": "complement 3 (Commonsense evidence:; ; Normal range: N > 35)",
            "c4": "complement 4 (Commonsense evidence:; ; Normal range: N > 10)",
            "rnp": "anti-ribonuclear protein (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sm": "anti-SM (Commonsense evidence:; ; Normal range: N= -, +-)",
            "sc170": "anti-scl70 (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssa": "anti-SSA (Commonsense evidence:; ; Normal range: N= -, +-)",
            "ssb": "anti-SSB (Commonsense evidence:; ; Normal range: N= -, +-)",
            "centromea": "anti-centromere (Commonsense evidence:; ; Normal range: N= -, +-)",
            "dna": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)",
            "dna-ii": "anti-DNA (Commonsense evidence:; ; Normal range: N < 8)"
        },
        "question": {
            "questiontext": "The detailed text of the question.",
            "questionid": "The unique id of the question. (Each questiontext can only have one unique questionid)"
        },
        "survey": {
            "surveyid": "The unique id of each survey  (commonsense evidence: ; Each SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.)",
            "description": "The Description of the specific survey."
        },
        "answer": {
            "answertext": "The specific and detailed answer text of each question. (The content is highly depend on the question.)",
            "surveyid": "The id of each survey. (The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.)",
            "userid": "The id of different user. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)",
            "questionid": "The id of different questions. (commonsense evidence: ; Some questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.)"
        },
        "current": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "current-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "caucus": "caucus (For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.)",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "historical": {
            "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on ballotpedia.org)",
            "bioguide_id": "The alphanumeric ID for this legislator ",
            "bioguide_previous_id": "The previous alphanumeric ID for this legislator ",
            "birthday_bio": "The legislator's birthday, (in YYYY-MM-DD format.)",
            "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website)",
            "fec_id": " A list of IDs for this legislator in Federal Election Commission data. (commonsense evidence:; if this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.)",
            "first_name": "first name of the legislator",
            "gender_bio": "gender of the legislator",
            "google_entity_id_id": "google entity id (commonsense evidence:; if this value is null or empty, it means this legislator are not google entities)",
            "govtrack_id": "The numeric ID for this legislator on GovTrack.us (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on GovTrack.us)",
            "house_history_alternate_id": "The alternative numeric ID for this legislator",
            "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ (commonsense evidence:; The ID is present only for members who have served in the U.S. House.)",
            "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteView.com )",
            "last_name": "last name of the legislator",
            "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes (commonsense evidence:; The ID is present only for members who attended in Senate roll call votes)",
            "maplight_id": "The numeric ID for this legislator on maplight.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on maplight.org)",
            "middle_name": "the middle name of the legislator",
            "nickname_name": "nickname of the legislator",
            "official_full_name": "official full name",
            "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.)",
            "religion_bio": "The legislator's religion.",
            "suffix_name": "suffix name",
            "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.)",
            "votesmart_id": "The numeric ID for this legislator on VoteSmart.org (commonsense evidence:; if this value is null or empty, it means this legislator doesn't have account on VoteSmart.org)",
            "wikidata_id": "the id for wikidata",
            "wikipedia_id": " The Wikipedia page name for the person (commonsense evidence:; if a legislator has wikipedia id, it means he or she is famous or impact)"
        },
        "historical-terms": {
            "address": "the address of this legislator",
            "bioguide": "The alphanumeric ID for this legislator ",
            "chamber": "chamber (â¢ senate; â¢ house)",
            "class": "class (For senators, their election class (1, 2, or 3). ; commonsense evidence:; only senator has class, if the value is null or empty, it means this legislator is not senator.)",
            "contact_form": "The website URL of the contact page on the legislator's official website",
            "district": "district (For representatives, the district number they are serving from. ; commonsense evidence:; if null or empty, they are not representatives.)",
            "end": "the end of the term (end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.)",
            "fax": "The fax number of the legislator's Washington, D.C. office (only valid if the term is current)",
            "last": "the last known number",
            "middle": "",
            "name": " (not useful)",
            "office": "office  (only valid if the term is current, otherwise the last known office)",
            "party": "The political party of the legislator. (commonsense evidence:; If the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.)",
            "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. (The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).)",
            "phone": "The phone number of the legislator's Washington, D.C. office (only valid if the term is current, otherwise the last known number)",
            "relation": " (not useful)",
            "rss_url": "The URL to the official website's RSS feed",
            "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  (Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) )",
            "state": "state code (commonsense evidence:; AK: Alaska ; AL: Alabama ; AR: Arkansas ; AZ: Arizona ; CA: California ; CO: Colorado ; CT: Connecticut ; DE: Delaware ; FL: Florida ; GA: Georgia ; HI: Hawaii ; IA: Iowa ; ID: Idaho ; IL: Illinois ; IN: Indiana ; KS: Kansas ; KY: Kentucky ; LA: Louisiana ; MA: Massachusetts ; MD: Maryland ; ME: Maine ; MI: Michigan ; MN: Minnesota ; MO: Missouri ; MS: Mississippi ; MT: Montana ; NC: North Carolina ; ND: North Dakota ; NE: Nebraska ; NH: New Hampshire ; NJ: New Jersey; 9 divisions of states in us: (please mention); https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf)",
            "state_rank": "whether they are the \"junior\" or \"senior\" senator (only valid if the term is current, otherwise the senator's rank at the time the term ended; commonsense evidence:; only senator has this value)",
            "title": "title of the legislator",
            "type": "The type of the term. (Either \"sen\" for senators or \"rep\" for representatives and delegates to the House)",
            "url": "The official website URL of the legislator  (only valid if the term is current)"
        },
        "social-media": {
            "bioguide": "The unique alphanumeric ID for this legislator ",
            "facebook": "The username of the current official Facebook presence of the legislator.",
            "facebook_id": "The numeric ID of the current official Facebook presence of the legislator.",
            "govtrack": "The numeric ID for this legislator on GovTrack.us",
            "instagram": "The current official Instagram handle of the legislator.",
            "instagram_id": "The numeric ID of the current official Instagram handle of the legislator.",
            "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov. ",
            "twitter": "The current official Twitter handle of the legislator.",
            "twitter_id": "The numeric ID of the current official twitter handle of the legislator.",
            "youtube": "The current official YouTube username of the legislator.",
            "youtube_id": "The current official YouTube channel ID of the legislator."
        },
        "air carriers": {
            "code": "the code of the air carriers",
            "description": "the description of air carriers"
        },
        "airports": {
            "code": "IATA code of the air airports",
            "description": "the description of airports"
        },
        "airlines": {
            "fl_date": "flight date",
            "op_carrier_airline_id": "operator carrier airline id",
            "tail_num": "plane's tail number (plane's tail number)",
            "op_carrier_fl_num": "operator carrier flight number",
            "origin_airport_id": "origin airport id",
            "origin_airport_seq_id": "origin airport sequence id",
            "origin_city_market_id": "origin city market id",
            "origin": "airport of origin (commonsense evidence:; ; • the origin city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "dest_airport_id": "ID of the destination airport",
            "dest_airport_seq_id": "",
            "dest_city_market_id": "",
            "dest": "Destination airport (commonsense evidence:; ; • the dest city could be inferred by this code:; ; you can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia; ; to quickly check)",
            "crs_dep_time": "",
            "dep_time": "Flight departure time (stored as the integer)",
            "dep_delay": "Departure delay indicator (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4); ; • if this value <= 0, it means this flight departs on time)",
            "dep_delay_new": "departure delay new (not useful)",
            "arr_time": "Flight arrival time.",
            "arr_delay": "arrival delay time (in minutes; ; commonsense evidence:; ; • if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4); ; • if this value <= 0, it means this flight arrives on time)",
            "arr_delay_new": "arrival delay new (not useful)",
            "cancelled": "Flight cancellation indicator.",
            "cancellation_code": "cancellation code (commonsense evidence:; ; C--> A: more serious reasons lead to this cancellation)",
            "crs_elapsed_time": "scheduled elapsed time",
            "actual_elapsed_time": "actual elapsed time (commonsense evidence:; ; if ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;; ; if ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled)",
            "carrier_delay": "carrier delay (minutes)",
            "weather_delay": "delay caused by the wheather problem (minutes)",
            "nas_delay": "delay, in minutes, attributable to the National Aviation System (minutes)",
            "security_delay": "delay attribute to security (minutes)",
            "late_aircraft_delay": "delay attribute to late aircraft (minutes)"
        },
        "incidents": {
            "case_number": "case number",
            "date": "date",
            "location": "location",
            "subject_statuses": "statuses of the victims ",
            "subject_weapon": "subject weapon",
            "subjects": "subjects",
            "subject_count": "subject_count",
            "officers": "officers"
        },
        "officers": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "subjects": {
            "case_number": "case number",
            "race": "race",
            "gender": "gender (M: male;; ; F: female)",
            "last_name": "last name",
            "first_name": "first name",
            "full_name": "full name"
        },
        "att_classes": {
            "att_class_id": "the unique attribute class ids",
            "att_class": "the corresponding classes for attributes"
        },
        "obj_classes": {
            "obj_class_id": "unique id number identifying object classes",
            "obj_class": "the explanation about object classes"
        },
        "img_obj": {
            "img_id": "the id representing images",
            "obj_sample_id": "the id of the object sample",
            "obj_class_id": "the id indicating class of the objects",
            "x": "x coordinate ",
            "y": "y coordinate ",
            "w": "width of the bounding box of the object",
            "h": "height of the bounding box of the object (commonsense evidence:; ; bounding box of the object: (x, y, W, H))"
        },
        "img_obj_att": {
            "img_id": "id number of each image",
            "att_class_id": "attribute class number for image (commonsense evidence:; ; if one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes)",
            "obj_sample_id": "object sample id (commonsense evidence:; ; â¢ if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects; ; â¢ if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects.)"
        },
        "pred_classes": {
            "pred_class_id": "the unique prediction id for the class",
            "pred_class": "the caption for the prediction class id"
        },
        "img_rel": {
            "img_id": "the image id ",
            "pred_class_id": "the prediction relationship class between objects (commonsense evidence:; ; if OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.)",
            "obj1_sample_id": "the sample id of the first object",
            "obj2_sample_id": "the sample id of the second object (commonsense evidence:; ; if (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations.)"
        },
        "institution_details": {
            "unitid": "unique Education Unit ID number",
            "chronname": "Institution name",
            "city": "Institution city",
            "state": "Institution state",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": "Control of institution (Public, ; Private not-for-profit, ; Private for-profit)",
            "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version)",
            "hbcu": "Denotes Historically Black College and Universities",
            "flagship": "Denotes Public flagship institutions",
            "long_x": "Institution longitude",
            "lat_y": "Institution latitude (commonsense evidence:; institute Coordinate)",
            "site": "Institution Web site address",
            "student_count": "Total number of undergraduates in 2010",
            "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013)",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:; awards_per_value > awards_per_state_value;  if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:; awards_per_value < awards_per_state_value)",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average (commonsense evidence:;  if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:; awards_per_value > awards_per_natl_value;  if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:; awards_per_value < awards_per_natl_value)",
            "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees (expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees)",
            "exp_award_state_value": "Spending per completion, state and sector average",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "exp_award_percentile": "",
            "ft_pct": "Percentage of undergraduates who attend full-time",
            "fte_value": "total number of full-time equivalent undergraduates",
            "fte_percentile": "",
            "med_sat_value": "Median estimated SAT value for incoming students",
            "med_sat_percentile": "Institution's percent rank for median SAT value within sector (Institution's percent rank for median SAT value within sector)",
            "aid_value": "The average amount of student aid going to undergraduate recipients",
            "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector (Institution's percent rank for average amount of student aid going to undergraduate recipients within sector)",
            "endow_value": "End-of-year endowment value per full-time equivalent student",
            "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector",
            "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector",
            "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) (%, ; commonsense evidence:; lower means harder to graduate for bachelor)",
            "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector",
            "pell_value": "percentage of undergraduates receiving a Pell Grant",
            "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector",
            "retain_value": "share of freshman students retained for a second year",
            "retain_percentile": "Institution's percent rank for freshman retention percentage within sector",
            "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school",
            "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector ",
            "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability",
            "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years",
            "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years",
            "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years (null: not available)",
            "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years",
            "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years",
            "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years",
            "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years",
            "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years",
            "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years",
            "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years",
            "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years",
            "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years",
            "similar": "",
            "state_sector_ct": "",
            "carnegie_ct": "",
            "counted_pct": "",
            "nicknames": "",
            "cohort_size": ""
        },
        "institution_grads": {
            "unitid": "Education Unit ID number",
            "year": "year of data release",
            "gender": "gender of students ('B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time"
        },
        "state_sector_grads": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_abbr": "",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "year": "year of data release",
            "gender": "gender of students (B' = both genders; 'M' = male; 'F' = female)",
            "race": "race/ethnicity of students (commonsense evidence:; 'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White)",
            "cohort": "degree-seeking cohort type (commonsense evidence:;  '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; ;  '4y other' = Students seeking another type of degree or certificate at a 4-year institution; ;  '2y all' = Degree-seeking students at 2-year institutions; 4-year degree is bachelor's degree; 2-year degree is associate's degree)",
            "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions",
            "grad_100": "Number of students who graduated within 100 percent of normal/expected time",
            "grad_150": "Number of students who graduated within 150 percent of normal/expected time",
            "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time",
            "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time",
            "grad_cohort_ct": "Number of institutions with data included in the cohort"
        },
        "state_sector_details": {
            "stateid": "state FIPS (Federal Information Processing System) code",
            "state": "state name ",
            "state_post": "",
            "level": "Level of institution (commonsense evidence:; 4-year: bachelor's degree; 2-year: associate's degree)",
            "control": " (Public, ; Private not-for-profit, ; Private for-profit)",
            "schools_count": "",
            "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate",
            "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average",
            "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average",
            "exp_award_state_value": "Spending per completion, state and sector average ",
            "exp_award_natl_value": "Spending per completion, national sector average",
            "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident",
            "state_appr_rank": "",
            "grad_rate_rank": "",
            "awards_per_rank": ""
        },
        "geographic": {
            "city": "the city",
            "county": "the country the city belongs to",
            "region": "corresponding regions"
        },
        "generalinfo": {
            "id_restaurant": "the unique id for the restaurant",
            "label": "the label of the restaurant",
            "food_type": "the food type",
            "city": "the city where the restaurant is located in",
            "review": "the review of the restaurant (commonsense evidence:; the review rating is from 0.0 to 5.0; The high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. )"
        },
        "location": {
            "id_restaurant": "the unique id for the restaurant",
            "street_num": "the street number of the restaurant",
            "street_name": "the street name of the restaurant",
            "city": "the city where the restaurant is located in"
        },
        "cars": {
            "id": "the unique id number representing the cars",
            "train_id": "the counterpart id for trains that the cars belong to",
            "position": "postion id of cars in the trains (1-4:; commonsense evidence:; 1: head car; 4: tail car)",
            "shape": "shape of the cars (â¢ rectangle; â¢ bucket; â¢ u_shaped; â¢ hexagon; â¢ elipse; commonsense evidence:; regular shape: ; rectangle, u_shaped, hexagon)",
            "len": "length of the cars (â¢ short ; â¢ long)",
            "sides": "sides of the cars (â¢ not_double; â¢ double)",
            "roof": "roof of the cars (commonsense evidence:; â¢ none: the roof is open; â¢ peaked; â¢ flat; â¢ arc; â¢ jagged)",
            "wheels": "wheels of the cars (â¢ 2:; â¢ 3: )",
            "load_shape": "load shape (â¢ circle; â¢ hexagon; â¢ triangle; â¢ rectangle ; â¢ diamond)",
            "load_num": "load number (0-3:; commonsense evidence:; â¢ 0: empty load; â¢ 3: full load)"
        },
        "trains": {
            "id": "the unique id representing the trains",
            "direction": "the direction of trains that are running  (â¢ east;; â¢ west;)"
        },
        "author": {
            "id": "Id of the author",
            "name": "Author Name",
            "affiliation": "Organization name with which the author is affiliated.  (the name of an organization with which an author can be affiliated)"
        },
        "conference": {
            "id": "Conference Id",
            "shortname": "Short name",
            "fullname": "Full name",
            "homepage": "Homepage URL of conference"
        },
        "journal": {
            "id": "Journal Id",
            "shortname": "Short name",
            "fullname": "Full name",
            "homepage": "Homepage URL of journal"
        },
        "paper": {
            "id": " Id of the paper",
            "title": "Title of the paper",
            "year": "Year of the paper (commonsense reasoning: if the year is \"0\", it means this paper is preprint, or not published)",
            "conferenceid": "Conference Id in which paper was published",
            "journalid": "Journal Id in which paper was published (commonsense reasoning: If a paper contain \"0\" in both ConferenceID and JournalId, it means this paper is preprint)",
            "keyword": "Keywords of the paper  (commonsense reasoning: Keywords should contain words and phrases that suggest what the topic is about. ; Similar keywords represent similar fields or sub-field. )"
        },
        "paperauthor": {
            "paperid": " Paper Id",
            "authorid": "Author Id (commonsense reasoning: A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair. )",
            "name": "Author Name (as written on paper)",
            "affiliation": "Author Affiliation (as written on paper) (the name of an organization with which an author can be affiliated)"
        },
        "sales_in_weather": {
            "date": "the date of sales",
            "store_nbr": "store number",
            "item_nbr": "item / product number",
            "units": "the quantity sold of an item on a given day"
        },
        "weather": {
            "station_nbr": "the id of weather stations",
            "date": "date",
            "tmax": "max temperature",
            "tmin": "min temperature (commonsense evidence:; temperature range / difference = tmax - tmin)",
            "tavg": "average temperature",
            "depart": " (Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.; commonsense evidence:; â¢ if null: the temperature is 30-year normal; â¢ if the value is positive: the temperature is above the 30-year normal, ; â¢ if the value is negative: the temperature is below the 30-year normal, )",
            "dewpoint": " (commonsense evidence:; The dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.)",
            "wetbulb": " (commonsense evidence:; â¢ The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.; â¢ At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); ; â¢ at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.)",
            "heat": "calculated heating degree",
            "cool": "calculated cooling degree",
            "sunrise": "calculated sunrise",
            "sunset": "calculated sunset",
            "codesum": "code summarization for the weather (; â¢ PY SPRAY ; â¢ SQ SQUALL ; â¢ DR LOW DRIFTING ; â¢ SH SHOWER ; â¢ FZ FREEZING ; â¢ MI SHALLOW ; â¢ PR PARTIAL ; â¢ BC PATCHES ; â¢ BL BLOWING ; â¢ VC VICINITY ; â¢ - LIGHT ; â¢ + HEAVY ; â¢ \"NO SIGN\" MODERATE)",
            "snowfall": "snowfall (snowfall (inches AND tenths))",
            "preciptotal": "precipitation total (inches (240hr period ending at indicated local standard time))",
            "stnpressure": "station pressure",
            "sealevel": "sea level",
            "resultspeed": "resultant wind speed",
            "resultdir": "resultant wind direction (who degree)",
            "avgspeed": "average wind speed (commonsense evidence:; if avgspeed is larger: much more wind)"
        },
        "relation": {
            "store_nbr": "the id of stores",
            "station_nbr": "the id of weather stations"
        },
        "dish": {
            "id": "unique id number indicating the dishes",
            "name": "the name of the dish",
            "description": "description of the dish  ((no value))",
            "menus_appeared": "how many menus have this dish ",
            "times_appeared": "how many times this dish appears in the menu (commonsense evidence:; if times_appeared > menus_appeard: this dish appeared in a menu more than once)",
            "first_appeared": "the year that this dish appears first (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct ; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "last_appeared": "the year that this dish appears the last time (commonsense evidence:; 1.\tthe year outside of [1851, 2012], it means this data is not correct; 2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical)",
            "lowest_price": "the lowest price of the dish (commonsense evidence:; 0: for free)",
            "highest_price": "the highest price of the dish"
        },
        "menu": {
            "id": "the unique number identifying the menu",
            "name": "the name of the menu (commonsense evidence:; ; if the value is not null or empty, it means this menu has special dishes.; ; otherwise, this menu is general and nothing special)",
            "sponsor": "the sponsor of this menu (commonsense evidence:; ; if the value is null or empyt, it means this meanu is DIY by the restaurant.)",
            "event": "the event that the menu was created for",
            "venue": "the venue that the menu was created for",
            "place": "the location that the menu was used ( the location that the menu was used)",
            "physical_description": "physical description of the menu",
            "occasion": "occasion of the menu",
            "notes": "notes",
            "call_number": "call number (commonsense evidence:; if null: not support for taking out or booking in advance)",
            "keywords": "keywords (not useful)",
            "language": "language (not useful)",
            "date": "the date that this menu was created",
            "location": "the location that the menu was used",
            "location_type": " (not useful)",
            "currency": "the currency that the menu was used",
            "currency_symbol": "the currency symbol",
            "status": "status of the menu",
            "page_count": "the number of pages of this menu",
            "dish_count": "the number of dishes of this menu"
        },
        "menupage": {
            "id": "the unique id number indentifying the menupage",
            "menu_id": "the id of the menu",
            "page_number": "the page number ",
            "image_id": "the id of the image ",
            "full_height": "full height of the menu page ((mm))",
            "full_width": "full width of the menu page ((mm))",
            "uuid": ""
        },
        "menuitem": {
            "id": "the unique id representing the menu item",
            "menu_page_id": "the id of menu page",
            "price": "the price of this dish (menu item)",
            "high_price": "high price of this dish",
            "dish_id": "the id of the dish",
            "created_at": "the dates when the item was created",
            "updated_at": "the dates when the item was updated",
            "xpos": "x-axis position of the dish in this menu page",
            "ypos": "y-axis position of the dish in this menu page"
        },
        "characters": {
            "movie_title": "unique title of the movie",
            "release_date": "The release date of the movie.",
            "hero": "The main character of the movie.  (commonsense evidence:; ; round role)",
            "villian": "The villain of the movie. (a character whose evil actions or motives are important to the plot. )",
            "song": "A song associated with the movie."
        },
        "director": {
            "name": "unique movie name",
            "director": "the name of the director (one director may have multiple movies.; ; more movies --> this director is more productive)"
        },
        "movies_total_gross": {
            "movie_title": "movie title",
            "release_date": "release date",
            "genre": "genre of the movie",
            "mpaa_rating": "Motion Picture Association of America of the disney movie (commonsense evidence:; â¢ G: general audience; â¢ PG: mature audiences or parental guidance suggested; â¢ R: restricted: no children under 17 allowed without parents or adult guardians; â¢ PG-13: PARENTS STRONGLY CAUTIONED. Some material may be inappropriate for children under 13; movies need accompany with parents: PG, PG-13, PG-17;; if \"Not rated\" or null, it means this film can show only gets permissions by theatre management; if the film can show without need of permissions of theatre management, the MPAA_rating should not be \"Not rated\" or null)",
            "total_gross": "The total gross of the movie. (commonsense evidence:; more total_gross--> more popular movie)",
            "inflation_adjusted_gross": "The inflation-adjusted gross of the movie. (commonsense evidence:; estimated inflation rate = inflation_adjusted_gross / total_gross;; the current gross = inflation_adjusted_gross)"
        },
        "revenue": {
            "year": "The year the movie was released.",
            "studio entertainment[ni 1]": "The studio entertainment segment of the Walt Disney Company.",
            "disney consumer products[ni 2]": "The consumer products segment of the Walt Disney Company.",
            "disney interactive[ni 3][rev 1]": "The interactive segment of the Walt Disney Company. ",
            "walt disney parks and resorts": "The parks and resorts segment of the Walt Disney Company.",
            "disney media networks": "The media networks segment of the Walt Disney Company.",
            "total": "The total box office gross for the movie."
        },
        "voice-actors": {
            "character": "The unique name of the character. ",
            "voice-actor": "The name of the voice actor.",
            "movie": "The name of the movie."
        },
        "torrents": {
            "groupname": "release title",
            "totalsnatched": "number of times the release has been downloaded",
            "artist": "artist / group name",
            "groupyear": "release year",
            "releasetype": "release type (e.g., album, single, mixtape)",
            "groupid": "Unique release identifier from What.CD. Used to ensure no releases are duplicates.",
            "id": "unique identifier (essentially an index)"
        },
        "tags": {
            "index": "index",
            "id": "release identifier which can be matched with id field in the torrents table",
            "tag": "tag"
        }
    }
}